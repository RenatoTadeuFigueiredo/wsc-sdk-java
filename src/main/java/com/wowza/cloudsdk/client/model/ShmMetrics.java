/*
 * This code and all components Â© 2015 - 2019 Wowza Media Systems, LLC. All rights reserved.
 * This code is licensed pursuant to the BSD 3-Clause License.
 * 
 * Wowza Streaming Cloud REST API Reference Documentation
 *
 * OpenAPI spec version: v1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wowza.cloudsdk.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.wowza.cloudsdk.client.model.AudioCodecMetric;
import com.wowza.cloudsdk.client.model.BitsInRateMetric;
import com.wowza.cloudsdk.client.model.BitsOutRateMetric;
import com.wowza.cloudsdk.client.model.BytesInRateMetric;
import com.wowza.cloudsdk.client.model.BytesOutRateMetric;
import com.wowza.cloudsdk.client.model.ConfiguredBytesOutRateMetric;
import com.wowza.cloudsdk.client.model.ConnectedMetric;
import com.wowza.cloudsdk.client.model.CpuMetric;
import com.wowza.cloudsdk.client.model.FrameRateMetric;
import com.wowza.cloudsdk.client.model.FrameSizeMetric;
import com.wowza.cloudsdk.client.model.GpuDecoderUsageMetric;
import com.wowza.cloudsdk.client.model.GpuDriverVersionMetric;
import com.wowza.cloudsdk.client.model.GpuEncoderUsageMetric;
import com.wowza.cloudsdk.client.model.GpuMemoryUsageMetric;
import com.wowza.cloudsdk.client.model.GpuUsageMetric;
import com.wowza.cloudsdk.client.model.HeightMetric;
import com.wowza.cloudsdk.client.model.KeyframeIntervalMetric;
import com.wowza.cloudsdk.client.model.StreamTargetStatusOUTPUTIDXSTREAMTARGETIDXMetric;
import com.wowza.cloudsdk.client.model.UniqueViewsMetric;
import com.wowza.cloudsdk.client.model.VideoCodecMetric;
import com.wowza.cloudsdk.client.model.WidthMetric;
import java.io.IOException;

/**
 * 
 */
@ApiModel(description = "")
public class ShmMetrics {
  @SerializedName("audio_codec")
  private AudioCodecMetric audioCodec = null;

  @SerializedName("bits_in_rate")
  private BitsInRateMetric bitsInRate = null;

  @SerializedName("bits_out_rate")
  private BitsOutRateMetric bitsOutRate = null;

  @SerializedName("bytes_in_rate")
  private BytesInRateMetric bytesInRate = null;

  @SerializedName("bytes_out_rate")
  private BytesOutRateMetric bytesOutRate = null;

  @SerializedName("configured_bytes_out_rate")
  private ConfiguredBytesOutRateMetric configuredBytesOutRate = null;

  @SerializedName("connected")
  private ConnectedMetric connected = null;

  @SerializedName("cpu")
  private CpuMetric cpu = null;

  @SerializedName("frame_size")
  private FrameSizeMetric frameSize = null;

  @SerializedName("frame_rate")
  private FrameRateMetric frameRate = null;

  @SerializedName("gpu_decoder_usage")
  private GpuDecoderUsageMetric gpuDecoderUsage = null;

  @SerializedName("gpu_driver_version")
  private GpuDriverVersionMetric gpuDriverVersion = null;

  @SerializedName("gpu_encoder_usage")
  private GpuEncoderUsageMetric gpuEncoderUsage = null;

  @SerializedName("gpu_memory_usage")
  private GpuMemoryUsageMetric gpuMemoryUsage = null;

  @SerializedName("gpu_usage")
  private GpuUsageMetric gpuUsage = null;

  @SerializedName("height")
  private HeightMetric height = null;

  @SerializedName("keyframe_interval")
  private KeyframeIntervalMetric keyframeInterval = null;

  @SerializedName("stream_target_status_OUTPUTIDX_STREAMTARGETIDX")
  private StreamTargetStatusOUTPUTIDXSTREAMTARGETIDXMetric streamTargetStatusOUTPUTIDXSTREAMTARGETIDX = null;

  @SerializedName("unique_views")
  private UniqueViewsMetric uniqueViews = null;

  @SerializedName("video_codec")
  private VideoCodecMetric videoCodec = null;

  @SerializedName("width")
  private WidthMetric width = null;

  public ShmMetrics audioCodec(AudioCodecMetric audioCodec) {
    this.audioCodec = audioCodec;
    return this;
  }

   /**
   * The audio codec of the video source.
   * @return audioCodec
  **/
  @ApiModelProperty(value = "The audio codec of the video source.")
  public AudioCodecMetric getAudioCodec() {
    return audioCodec;
  }

  public void setAudioCodec(AudioCodecMetric audioCodec) {
    this.audioCodec = audioCodec;
  }

  public ShmMetrics bitsInRate(BitsInRateMetric bitsInRate) {
    this.bitsInRate = bitsInRate;
    return this;
  }

   /**
   * The rate of the stream traveling from the source encoder to Wowza Streaming Cloud, in kilobits per second.
   * @return bitsInRate
  **/
  @ApiModelProperty(value = "The rate of the stream traveling from the source encoder to Wowza Streaming Cloud, in kilobits per second.")
  public BitsInRateMetric getBitsInRate() {
    return bitsInRate;
  }

  public void setBitsInRate(BitsInRateMetric bitsInRate) {
    this.bitsInRate = bitsInRate;
  }

  public ShmMetrics bitsOutRate(BitsOutRateMetric bitsOutRate) {
    this.bitsOutRate = bitsOutRate;
    return this;
  }

   /**
   * The total actual bitrate of all outbound video streams, in kilobits per second.
   * @return bitsOutRate
  **/
  @ApiModelProperty(value = "The total actual bitrate of all outbound video streams, in kilobits per second.")
  public BitsOutRateMetric getBitsOutRate() {
    return bitsOutRate;
  }

  public void setBitsOutRate(BitsOutRateMetric bitsOutRate) {
    this.bitsOutRate = bitsOutRate;
  }

  public ShmMetrics bytesInRate(BytesInRateMetric bytesInRate) {
    this.bytesInRate = bytesInRate;
    return this;
  }

   /**
   * The rate of the stream traveling from the source encoder to Wowza Streaming Cloud, in kilobytes per second.
   * @return bytesInRate
  **/
  @ApiModelProperty(value = "The rate of the stream traveling from the source encoder to Wowza Streaming Cloud, in kilobytes per second.")
  public BytesInRateMetric getBytesInRate() {
    return bytesInRate;
  }

  public void setBytesInRate(BytesInRateMetric bytesInRate) {
    this.bytesInRate = bytesInRate;
  }

  public ShmMetrics bytesOutRate(BytesOutRateMetric bytesOutRate) {
    this.bytesOutRate = bytesOutRate;
    return this;
  }

   /**
   * The total actual bitrate of all outbound video streams, in kilobytes per second.
   * @return bytesOutRate
  **/
  @ApiModelProperty(value = "The total actual bitrate of all outbound video streams, in kilobytes per second.")
  public BytesOutRateMetric getBytesOutRate() {
    return bytesOutRate;
  }

  public void setBytesOutRate(BytesOutRateMetric bytesOutRate) {
    this.bytesOutRate = bytesOutRate;
  }

  public ShmMetrics configuredBytesOutRate(ConfiguredBytesOutRateMetric configuredBytesOutRate) {
    this.configuredBytesOutRate = configuredBytesOutRate;
    return this;
  }

   /**
   * The total configured bitrate of all outbound video streams, in kilobits per second.
   * @return configuredBytesOutRate
  **/
  @ApiModelProperty(value = "The total configured bitrate of all outbound video streams, in kilobits per second.")
  public ConfiguredBytesOutRateMetric getConfiguredBytesOutRate() {
    return configuredBytesOutRate;
  }

  public void setConfiguredBytesOutRate(ConfiguredBytesOutRateMetric configuredBytesOutRate) {
    this.configuredBytesOutRate = configuredBytesOutRate;
  }

  public ShmMetrics connected(ConnectedMetric connected) {
    this.connected = connected;
    return this;
  }

   /**
   * The connection status of the video source. &lt;strong&gt;Yes&lt;/strong&gt; means the source is connected. &lt;strong&gt;No&lt;/strong&gt; means the source is not connected.
   * @return connected
  **/
  @ApiModelProperty(value = "The connection status of the video source. <strong>Yes</strong> means the source is connected. <strong>No</strong> means the source is not connected.")
  public ConnectedMetric getConnected() {
    return connected;
  }

  public void setConnected(ConnectedMetric connected) {
    this.connected = connected;
  }

  public ShmMetrics cpu(CpuMetric cpu) {
    this.cpu = cpu;
    return this;
  }

   /**
   * The percentage of available CPU power on the virtual host being used by the transcoder.
   * @return cpu
  **/
  @ApiModelProperty(value = "The percentage of available CPU power on the virtual host being used by the transcoder.")
  public CpuMetric getCpu() {
    return cpu;
  }

  public void setCpu(CpuMetric cpu) {
    this.cpu = cpu;
  }

  public ShmMetrics frameSize(FrameSizeMetric frameSize) {
    this.frameSize = frameSize;
    return this;
  }

   /**
   * The frame size of the video source, in pixels.
   * @return frameSize
  **/
  @ApiModelProperty(value = "The frame size of the video source, in pixels.")
  public FrameSizeMetric getFrameSize() {
    return frameSize;
  }

  public void setFrameSize(FrameSizeMetric frameSize) {
    this.frameSize = frameSize;
  }

  public ShmMetrics frameRate(FrameRateMetric frameRate) {
    this.frameRate = frameRate;
    return this;
  }

   /**
   * The frame rate of the video source, in frames per second.
   * @return frameRate
  **/
  @ApiModelProperty(value = "The frame rate of the video source, in frames per second.")
  public FrameRateMetric getFrameRate() {
    return frameRate;
  }

  public void setFrameRate(FrameRateMetric frameRate) {
    this.frameRate = frameRate;
  }

  public ShmMetrics gpuDecoderUsage(GpuDecoderUsageMetric gpuDecoderUsage) {
    this.gpuDecoderUsage = gpuDecoderUsage;
    return this;
  }

   /**
   * The percentage of the GPU decoding power on the virtual host being used by the transcoder.
   * @return gpuDecoderUsage
  **/
  @ApiModelProperty(value = "The percentage of the GPU decoding power on the virtual host being used by the transcoder.")
  public GpuDecoderUsageMetric getGpuDecoderUsage() {
    return gpuDecoderUsage;
  }

  public void setGpuDecoderUsage(GpuDecoderUsageMetric gpuDecoderUsage) {
    this.gpuDecoderUsage = gpuDecoderUsage;
  }

  public ShmMetrics gpuDriverVersion(GpuDriverVersionMetric gpuDriverVersion) {
    this.gpuDriverVersion = gpuDriverVersion;
    return this;
  }

   /**
   * The version of the GPU driver on the virtual host.
   * @return gpuDriverVersion
  **/
  @ApiModelProperty(value = "The version of the GPU driver on the virtual host.")
  public GpuDriverVersionMetric getGpuDriverVersion() {
    return gpuDriverVersion;
  }

  public void setGpuDriverVersion(GpuDriverVersionMetric gpuDriverVersion) {
    this.gpuDriverVersion = gpuDriverVersion;
  }

  public ShmMetrics gpuEncoderUsage(GpuEncoderUsageMetric gpuEncoderUsage) {
    this.gpuEncoderUsage = gpuEncoderUsage;
    return this;
  }

   /**
   * The percentage of available GPU encoding power on the virtual host being used by the transcoder.
   * @return gpuEncoderUsage
  **/
  @ApiModelProperty(value = "The percentage of available GPU encoding power on the virtual host being used by the transcoder.")
  public GpuEncoderUsageMetric getGpuEncoderUsage() {
    return gpuEncoderUsage;
  }

  public void setGpuEncoderUsage(GpuEncoderUsageMetric gpuEncoderUsage) {
    this.gpuEncoderUsage = gpuEncoderUsage;
  }

  public ShmMetrics gpuMemoryUsage(GpuMemoryUsageMetric gpuMemoryUsage) {
    this.gpuMemoryUsage = gpuMemoryUsage;
    return this;
  }

   /**
   * The percentage of the GPU memory usage on the virtual host being used by the transcoder.
   * @return gpuMemoryUsage
  **/
  @ApiModelProperty(value = "The percentage of the GPU memory usage on the virtual host being used by the transcoder.")
  public GpuMemoryUsageMetric getGpuMemoryUsage() {
    return gpuMemoryUsage;
  }

  public void setGpuMemoryUsage(GpuMemoryUsageMetric gpuMemoryUsage) {
    this.gpuMemoryUsage = gpuMemoryUsage;
  }

  public ShmMetrics gpuUsage(GpuUsageMetric gpuUsage) {
    this.gpuUsage = gpuUsage;
    return this;
  }

   /**
   * The percentage of the total GPU usage on the virtual host being used by the transcoder.
   * @return gpuUsage
  **/
  @ApiModelProperty(value = "The percentage of the total GPU usage on the virtual host being used by the transcoder.")
  public GpuUsageMetric getGpuUsage() {
    return gpuUsage;
  }

  public void setGpuUsage(GpuUsageMetric gpuUsage) {
    this.gpuUsage = gpuUsage;
  }

  public ShmMetrics height(HeightMetric height) {
    this.height = height;
    return this;
  }

   /**
   * The height of the frame of the video source frame, in pixels.
   * @return height
  **/
  @ApiModelProperty(value = "The height of the frame of the video source frame, in pixels.")
  public HeightMetric getHeight() {
    return height;
  }

  public void setHeight(HeightMetric height) {
    this.height = height;
  }

  public ShmMetrics keyframeInterval(KeyframeIntervalMetric keyframeInterval) {
    this.keyframeInterval = keyframeInterval;
    return this;
  }

   /**
   * The number of video frames compressed in a group of pictures (GOP) between keyframes.
   * @return keyframeInterval
  **/
  @ApiModelProperty(value = "The number of video frames compressed in a group of pictures (GOP) between keyframes.")
  public KeyframeIntervalMetric getKeyframeInterval() {
    return keyframeInterval;
  }

  public void setKeyframeInterval(KeyframeIntervalMetric keyframeInterval) {
    this.keyframeInterval = keyframeInterval;
  }

  public ShmMetrics streamTargetStatusOUTPUTIDXSTREAMTARGETIDX(StreamTargetStatusOUTPUTIDXSTREAMTARGETIDXMetric streamTargetStatusOUTPUTIDXSTREAMTARGETIDX) {
    this.streamTargetStatusOUTPUTIDXSTREAMTARGETIDX = streamTargetStatusOUTPUTIDXSTREAMTARGETIDX;
    return this;
  }

   /**
   * The status of the identified stream target assigned to the identified output. OUTPUTIDX identifies the output and STREAMTARGETIDX identifies the stream target. A status is returned for every stream target used by the transcoder.
   * @return streamTargetStatusOUTPUTIDXSTREAMTARGETIDX
  **/
  @ApiModelProperty(value = "The status of the identified stream target assigned to the identified output. OUTPUTIDX identifies the output and STREAMTARGETIDX identifies the stream target. A status is returned for every stream target used by the transcoder.")
  public StreamTargetStatusOUTPUTIDXSTREAMTARGETIDXMetric getStreamTargetStatusOUTPUTIDXSTREAMTARGETIDX() {
    return streamTargetStatusOUTPUTIDXSTREAMTARGETIDX;
  }

  public void setStreamTargetStatusOUTPUTIDXSTREAMTARGETIDX(StreamTargetStatusOUTPUTIDXSTREAMTARGETIDXMetric streamTargetStatusOUTPUTIDXSTREAMTARGETIDX) {
    this.streamTargetStatusOUTPUTIDXSTREAMTARGETIDX = streamTargetStatusOUTPUTIDXSTREAMTARGETIDX;
  }

  public ShmMetrics uniqueViews(UniqueViewsMetric uniqueViews) {
    this.uniqueViews = uniqueViews;
    return this;
  }

   /**
   * The number of IP addresses that received at least one chunk of the stream on any player or device in a 24-hour period.
   * @return uniqueViews
  **/
  @ApiModelProperty(value = "The number of IP addresses that received at least one chunk of the stream on any player or device in a 24-hour period.")
  public UniqueViewsMetric getUniqueViews() {
    return uniqueViews;
  }

  public void setUniqueViews(UniqueViewsMetric uniqueViews) {
    this.uniqueViews = uniqueViews;
  }

  public ShmMetrics videoCodec(VideoCodecMetric videoCodec) {
    this.videoCodec = videoCodec;
    return this;
  }

   /**
   * The video codec of the video source.
   * @return videoCodec
  **/
  @ApiModelProperty(value = "The video codec of the video source.")
  public VideoCodecMetric getVideoCodec() {
    return videoCodec;
  }

  public void setVideoCodec(VideoCodecMetric videoCodec) {
    this.videoCodec = videoCodec;
  }

  public ShmMetrics width(WidthMetric width) {
    this.width = width;
    return this;
  }

   /**
   * The width of the frame of the video source, in pixels.
   * @return width
  **/
  @ApiModelProperty(value = "The width of the frame of the video source, in pixels.")
  public WidthMetric getWidth() {
    return width;
  }

  public void setWidth(WidthMetric width) {
    this.width = width;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShmMetrics shmMetrics = (ShmMetrics) o;
    return Objects.equals(this.audioCodec, shmMetrics.audioCodec) &&
        Objects.equals(this.bitsInRate, shmMetrics.bitsInRate) &&
        Objects.equals(this.bitsOutRate, shmMetrics.bitsOutRate) &&
        Objects.equals(this.bytesInRate, shmMetrics.bytesInRate) &&
        Objects.equals(this.bytesOutRate, shmMetrics.bytesOutRate) &&
        Objects.equals(this.configuredBytesOutRate, shmMetrics.configuredBytesOutRate) &&
        Objects.equals(this.connected, shmMetrics.connected) &&
        Objects.equals(this.cpu, shmMetrics.cpu) &&
        Objects.equals(this.frameSize, shmMetrics.frameSize) &&
        Objects.equals(this.frameRate, shmMetrics.frameRate) &&
        Objects.equals(this.gpuDecoderUsage, shmMetrics.gpuDecoderUsage) &&
        Objects.equals(this.gpuDriverVersion, shmMetrics.gpuDriverVersion) &&
        Objects.equals(this.gpuEncoderUsage, shmMetrics.gpuEncoderUsage) &&
        Objects.equals(this.gpuMemoryUsage, shmMetrics.gpuMemoryUsage) &&
        Objects.equals(this.gpuUsage, shmMetrics.gpuUsage) &&
        Objects.equals(this.height, shmMetrics.height) &&
        Objects.equals(this.keyframeInterval, shmMetrics.keyframeInterval) &&
        Objects.equals(this.streamTargetStatusOUTPUTIDXSTREAMTARGETIDX, shmMetrics.streamTargetStatusOUTPUTIDXSTREAMTARGETIDX) &&
        Objects.equals(this.uniqueViews, shmMetrics.uniqueViews) &&
        Objects.equals(this.videoCodec, shmMetrics.videoCodec) &&
        Objects.equals(this.width, shmMetrics.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioCodec, bitsInRate, bitsOutRate, bytesInRate, bytesOutRate, configuredBytesOutRate, connected, cpu, frameSize, frameRate, gpuDecoderUsage, gpuDriverVersion, gpuEncoderUsage, gpuMemoryUsage, gpuUsage, height, keyframeInterval, streamTargetStatusOUTPUTIDXSTREAMTARGETIDX, uniqueViews, videoCodec, width);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShmMetrics {\n");
    
    sb.append("    audioCodec: ").append(toIndentedString(audioCodec)).append("\n");
    sb.append("    bitsInRate: ").append(toIndentedString(bitsInRate)).append("\n");
    sb.append("    bitsOutRate: ").append(toIndentedString(bitsOutRate)).append("\n");
    sb.append("    bytesInRate: ").append(toIndentedString(bytesInRate)).append("\n");
    sb.append("    bytesOutRate: ").append(toIndentedString(bytesOutRate)).append("\n");
    sb.append("    configuredBytesOutRate: ").append(toIndentedString(configuredBytesOutRate)).append("\n");
    sb.append("    connected: ").append(toIndentedString(connected)).append("\n");
    sb.append("    cpu: ").append(toIndentedString(cpu)).append("\n");
    sb.append("    frameSize: ").append(toIndentedString(frameSize)).append("\n");
    sb.append("    frameRate: ").append(toIndentedString(frameRate)).append("\n");
    sb.append("    gpuDecoderUsage: ").append(toIndentedString(gpuDecoderUsage)).append("\n");
    sb.append("    gpuDriverVersion: ").append(toIndentedString(gpuDriverVersion)).append("\n");
    sb.append("    gpuEncoderUsage: ").append(toIndentedString(gpuEncoderUsage)).append("\n");
    sb.append("    gpuMemoryUsage: ").append(toIndentedString(gpuMemoryUsage)).append("\n");
    sb.append("    gpuUsage: ").append(toIndentedString(gpuUsage)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    keyframeInterval: ").append(toIndentedString(keyframeInterval)).append("\n");
    sb.append("    streamTargetStatusOUTPUTIDXSTREAMTARGETIDX: ").append(toIndentedString(streamTargetStatusOUTPUTIDXSTREAMTARGETIDX)).append("\n");
    sb.append("    uniqueViews: ").append(toIndentedString(uniqueViews)).append("\n");
    sb.append("    videoCodec: ").append(toIndentedString(videoCodec)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

