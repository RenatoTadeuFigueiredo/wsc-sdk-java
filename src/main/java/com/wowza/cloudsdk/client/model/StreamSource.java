/*
 * This code and all components Â© 2015 - 2019 Wowza Media Systems, LLC. All rights reserved.
 * This code is licensed pursuant to the BSD 3-Clause License.
 * 
 * Wowza Streaming Cloud REST API Reference Documentation
 *
 * OpenAPI spec version: v1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wowza.cloudsdk.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * 
 */
@ApiModel(description = "")
public class StreamSource {
  @SerializedName("backup_ip_address")
  private String backupIpAddress = null;

  @SerializedName("backup_url")
  private String backupUrl = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("ip_address")
  private String ipAddress = null;

  /**
   * If &lt;em&gt;location_method&lt;/em&gt; is &lt;strong&gt;region&lt;/strong&gt;, specify a location as close as possible to the source encoder.
   */
  @JsonAdapter(LocationEnum.Adapter.class)
  public enum LocationEnum {
    ASIA_PACIFIC_AUSTRALIA("asia_pacific_australia"),
    
    ASIA_PACIFIC_JAPAN("asia_pacific_japan"),
    
    ASIA_PACIFIC_SINGAPORE("asia_pacific_singapore"),
    
    ASIA_PACIFIC_TAIWAN("asia_pacific_taiwan"),
    
    EU_BELGIUM("eu_belgium"),
    
    EU_GERMANY("eu_germany"),
    
    EU_IRELAND("eu_ireland"),
    
    SOUTH_AMERICA_BRAZIL("south_america_brazil"),
    
    US_CENTRAL_IOWA("us_central_iowa"),
    
    US_EAST_VIRGINIA("us_east_virginia"),
    
    US_WEST_CALIFORNIA("us_west_california"),
    
    US_WEST_OREGON("us_west_oregon");

    private String value;

    LocationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocationEnum fromValue(String text) {
      for (LocationEnum b : LocationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LocationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LocationEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("location")
  private LocationEnum location = null;

  /**
   * The method used to determine the location of the stream source, either by &lt;strong&gt;region&lt;/strong&gt; or based on the source encoder&#39;s &lt;strong&gt;ip_address&lt;/strong&gt;.
   */
  @JsonAdapter(LocationMethodEnum.Adapter.class)
  public enum LocationMethodEnum {
    REGION("region"),
    
    IP_ADDRESS("ip_address");

    private String value;

    LocationMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocationMethodEnum fromValue(String text) {
      for (LocationMethodEnum b : LocationMethodEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LocationMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocationMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocationMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LocationMethodEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("location_method")
  private LocationMethodEnum locationMethod = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("password")
  private String password = null;

  @SerializedName("playback_url")
  private String playbackUrl = null;

  @SerializedName("primary_url")
  private String primaryUrl = null;

  @SerializedName("provider")
  private String provider = null;

  @SerializedName("stream_name")
  private String streamName = null;

  /**
   * An **akamai** stream source is a Wowza Streaming Cloud edge resource that send streams to a Wowza Streaming Cloud transcoder using the RTMP protocol.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    AKAMAISTREAMSOURCE("akamaiStreamSource");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("updated_at")
  private OffsetDateTime updatedAt = null;

  @SerializedName("username")
  private String username = null;

  public StreamSource backupIpAddress(String backupIpAddress) {
    this.backupIpAddress = backupIpAddress;
    return this;
  }

   /**
   * If &lt;em&gt;location_method&lt;/em&gt; is &lt;strong&gt;ip_address&lt;/strong&gt;, specify the backup IP address of the source encoder.
   * @return backupIpAddress
  **/
  @ApiModelProperty(example = "", value = "If <em>location_method</em> is <strong>ip_address</strong>, specify the backup IP address of the source encoder.")
  public String getBackupIpAddress() {
    return backupIpAddress;
  }

  public void setBackupIpAddress(String backupIpAddress) {
    this.backupIpAddress = backupIpAddress;
  }

  public StreamSource backupUrl(String backupUrl) {
    this.backupUrl = backupUrl;
    return this;
  }

   /**
   * The backup RTMP playback URL of the transcoded stream.
   * @return backupUrl
  **/
  @ApiModelProperty(example = "", value = "The backup RTMP playback URL of the transcoded stream.")
  public String getBackupUrl() {
    return backupUrl;
  }

  public void setBackupUrl(String backupUrl) {
    this.backupUrl = backupUrl;
  }

  public StreamSource createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date and time that the stream source was created.
   * @return createdAt
  **/
  @ApiModelProperty(example = "", value = "The date and time that the stream source was created.")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public StreamSource id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The unique alphanumeric string that identifies the stream source.
   * @return id
  **/
  @ApiModelProperty(example = "", value = "The unique alphanumeric string that identifies the stream source.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public StreamSource ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * If &lt;em&gt;location_method&lt;/em&gt; is &lt;strong&gt;ip_address&lt;/strong&gt;, specify the primary IP address of the source encoder.
   * @return ipAddress
  **/
  @ApiModelProperty(example = "", value = "If <em>location_method</em> is <strong>ip_address</strong>, specify the primary IP address of the source encoder.")
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }

  public StreamSource location(LocationEnum location) {
    this.location = location;
    return this;
  }

   /**
   * If &lt;em&gt;location_method&lt;/em&gt; is &lt;strong&gt;region&lt;/strong&gt;, specify a location as close as possible to the source encoder.
   * @return location
  **/
  @ApiModelProperty(example = "", value = "If <em>location_method</em> is <strong>region</strong>, specify a location as close as possible to the source encoder.")
  public LocationEnum getLocation() {
    return location;
  }

  public void setLocation(LocationEnum location) {
    this.location = location;
  }

  public StreamSource locationMethod(LocationMethodEnum locationMethod) {
    this.locationMethod = locationMethod;
    return this;
  }

   /**
   * The method used to determine the location of the stream source, either by &lt;strong&gt;region&lt;/strong&gt; or based on the source encoder&#39;s &lt;strong&gt;ip_address&lt;/strong&gt;.
   * @return locationMethod
  **/
  @ApiModelProperty(example = "", value = "The method used to determine the location of the stream source, either by <strong>region</strong> or based on the source encoder's <strong>ip_address</strong>.")
  public LocationMethodEnum getLocationMethod() {
    return locationMethod;
  }

  public void setLocationMethod(LocationMethodEnum locationMethod) {
    this.locationMethod = locationMethod;
  }

  public StreamSource name(String name) {
    this.name = name;
    return this;
  }

   /**
   * A descriptive name for the stream source. Maximum 255 characters.
   * @return name
  **/
  @ApiModelProperty(example = "", value = "A descriptive name for the stream source. Maximum 255 characters.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public StreamSource password(String password) {
    this.password = password;
    return this;
  }

   /**
   * The password that you can use to configure the source encoder to authenticate to the stream source.
   * @return password
  **/
  @ApiModelProperty(example = "", value = "The password that you can use to configure the source encoder to authenticate to the stream source.")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public StreamSource playbackUrl(String playbackUrl) {
    this.playbackUrl = playbackUrl;
    return this;
  }

   /**
   * The full RTMP playback URL.
   * @return playbackUrl
  **/
  @ApiModelProperty(example = "", value = "The full RTMP playback URL.")
  public String getPlaybackUrl() {
    return playbackUrl;
  }

  public void setPlaybackUrl(String playbackUrl) {
    this.playbackUrl = playbackUrl;
  }

  public StreamSource primaryUrl(String primaryUrl) {
    this.primaryUrl = primaryUrl;
    return this;
  }

   /**
   * The primary RTMP playback URL of the transcoded stream.
   * @return primaryUrl
  **/
  @ApiModelProperty(example = "", value = "The primary RTMP playback URL of the transcoded stream.")
  public String getPrimaryUrl() {
    return primaryUrl;
  }

  public void setPrimaryUrl(String primaryUrl) {
    this.primaryUrl = primaryUrl;
  }

  public StreamSource provider(String provider) {
    this.provider = provider;
    return this;
  }

   /**
   * The provider of the Wowza Streaming Cloud stream source.
   * @return provider
  **/
  @ApiModelProperty(example = "", value = "The provider of the Wowza Streaming Cloud stream source.")
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }

  public StreamSource streamName(String streamName) {
    this.streamName = streamName;
    return this;
  }

   /**
   * The name of the stream that you can use to configure the source encoder to connect to the stream source.
   * @return streamName
  **/
  @ApiModelProperty(example = "", value = "The name of the stream that you can use to configure the source encoder to connect to the stream source.")
  public String getStreamName() {
    return streamName;
  }

  public void setStreamName(String streamName) {
    this.streamName = streamName;
  }

  public StreamSource type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * An **akamai** stream source is a Wowza Streaming Cloud edge resource that send streams to a Wowza Streaming Cloud transcoder using the RTMP protocol.
   * @return type
  **/
  @ApiModelProperty(example = "", value = "An **akamai** stream source is a Wowza Streaming Cloud edge resource that send streams to a Wowza Streaming Cloud transcoder using the RTMP protocol.")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public StreamSource updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * The date and time that the stream source was updated.
   * @return updatedAt
  **/
  @ApiModelProperty(example = "", value = "The date and time that the stream source was updated.")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public StreamSource username(String username) {
    this.username = username;
    return this;
  }

   /**
   * The username that you can use to configure the source encoder to authenticate to the stream source.
   * @return username
  **/
  @ApiModelProperty(example = "", value = "The username that you can use to configure the source encoder to authenticate to the stream source.")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamSource streamSource = (StreamSource) o;
    return Objects.equals(this.backupIpAddress, streamSource.backupIpAddress) &&
        Objects.equals(this.backupUrl, streamSource.backupUrl) &&
        Objects.equals(this.createdAt, streamSource.createdAt) &&
        Objects.equals(this.id, streamSource.id) &&
        Objects.equals(this.ipAddress, streamSource.ipAddress) &&
        Objects.equals(this.location, streamSource.location) &&
        Objects.equals(this.locationMethod, streamSource.locationMethod) &&
        Objects.equals(this.name, streamSource.name) &&
        Objects.equals(this.password, streamSource.password) &&
        Objects.equals(this.playbackUrl, streamSource.playbackUrl) &&
        Objects.equals(this.primaryUrl, streamSource.primaryUrl) &&
        Objects.equals(this.provider, streamSource.provider) &&
        Objects.equals(this.streamName, streamSource.streamName) &&
        Objects.equals(this.type, streamSource.type) &&
        Objects.equals(this.updatedAt, streamSource.updatedAt) &&
        Objects.equals(this.username, streamSource.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupIpAddress, backupUrl, createdAt, id, ipAddress, location, locationMethod, name, password, playbackUrl, primaryUrl, provider, streamName, type, updatedAt, username);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamSource {\n");
    
    sb.append("    backupIpAddress: ").append(toIndentedString(backupIpAddress)).append("\n");
    sb.append("    backupUrl: ").append(toIndentedString(backupUrl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    locationMethod: ").append(toIndentedString(locationMethod)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    playbackUrl: ").append(toIndentedString(playbackUrl)).append("\n");
    sb.append("    primaryUrl: ").append(toIndentedString(primaryUrl)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    streamName: ").append(toIndentedString(streamName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

