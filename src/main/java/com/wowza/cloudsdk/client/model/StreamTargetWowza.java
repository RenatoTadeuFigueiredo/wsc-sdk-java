/*
 * This code and all components Â© 2015 - 2019 Wowza Media Systems, LLC. All rights reserved.
 * This code is licensed pursuant to the BSD 3-Clause License.
 * 
 * Wowza Streaming Cloud REST API Reference Documentation
 *
 * OpenAPI spec version: v1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wowza.cloudsdk.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * 
 */
@ApiModel(description = "")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-02T10:45:24.077Z")
public class StreamTargetWowza {
  @SerializedName("backup_url")
  private String backupUrl = null;

  @SerializedName("connection_code")
  private String connectionCode = null;

  @SerializedName("connection_code_expires_at")
  private String connectionCodeExpiresAt = null;

  @SerializedName("created_at")
  private String createdAt = null;

  @SerializedName("hds_playback_url")
  private String hdsPlaybackUrl = null;

  @SerializedName("hls_playback_url")
  private String hlsPlaybackUrl = null;

  @SerializedName("id")
  private String id = null;

  /**
   * Only for Wowza stream targets whose &lt;em&gt;provider&lt;/em&gt; is &lt;em&gt;not&lt;/em&gt; &lt;strong&gt;akamai_cupertino&lt;/strong&gt;. Choose a location as close as possible to your video source.
   */
  @JsonAdapter(LocationEnum.Adapter.class)
  public enum LocationEnum {
    ASIA_PACIFIC_AUSTRALIA("asia_pacific_australia"),
    
    ASIA_PACIFIC_JAPAN("asia_pacific_japan"),
    
    ASIA_PACIFIC_SINGAPORE("asia_pacific_singapore"),
    
    ASIA_PACIFIC_TAIWAN("asia_pacific_taiwan"),
    
    EU_BELGIUM("eu_belgium"),
    
    EU_GERMANY("eu_germany"),
    
    EU_IRELAND("eu_ireland"),
    
    SOUTH_AMERICA_BRAZIL("south_america_brazil"),
    
    US_CENTRAL_IOWA("us_central_iowa"),
    
    US_EAST_VIRGINIA("us_east_virginia"),
    
    US_WEST_CALIFORNIA("us_west_california"),
    
    US_WEST_OREGON("us_west_oregon");

    private String value;

    LocationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocationEnum fromValue(String text) {
      for (LocationEnum b : LocationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LocationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LocationEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("location")
  private LocationEnum location = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("primary_url")
  private String primaryUrl = null;

  @SerializedName("secure_ingest_query_param")
  private String secureIngestQueryParam = null;

  @SerializedName("stream_name")
  private String streamName = null;

  @SerializedName("updated_at")
  private String updatedAt = null;

  @SerializedName("use_cors")
  private Boolean useCors = null;

  @SerializedName("use_secure_ingest")
  private Boolean useSecureIngest = null;

  public StreamTargetWowza backupUrl(String backupUrl) {
    this.backupUrl = backupUrl;
    return this;
  }

   /**
   * Only for Wowza stream targets whose &lt;em&gt;provider&lt;/em&gt; is &lt;em&gt;not&lt;/em&gt; &lt;strong&gt;akamai_cupertino&lt;/strong&gt;. The backup RTMP ingest URL of the Wowza Stream Target.
   * @return backupUrl
  **/
  @ApiModelProperty(example = "", value = "Only for Wowza stream targets whose <em>provider</em> is <em>not</em> <strong>akamai_cupertino</strong>. The backup RTMP ingest URL of the Wowza Stream Target.")
  public String getBackupUrl() {
    return backupUrl;
  }

  public void setBackupUrl(String backupUrl) {
    this.backupUrl = backupUrl;
  }

  public StreamTargetWowza connectionCode(String connectionCode) {
    this.connectionCode = connectionCode;
    return this;
  }

   /**
   * A six-character, alphanumeric string that allows Wowza Streaming Engine to send a transcoded stream to a Wowza stream target. The code can be used once and expires 24 hours after it&#39;s created.
   * @return connectionCode
  **/
  @ApiModelProperty(example = "", value = "A six-character, alphanumeric string that allows Wowza Streaming Engine to send a transcoded stream to a Wowza stream target. The code can be used once and expires 24 hours after it's created.")
  public String getConnectionCode() {
    return connectionCode;
  }

  public void setConnectionCode(String connectionCode) {
    this.connectionCode = connectionCode;
  }

  public StreamTargetWowza connectionCodeExpiresAt(String connectionCodeExpiresAt) {
    this.connectionCodeExpiresAt = connectionCodeExpiresAt;
    return this;
  }

   /**
   * The date and time that the &lt;em&gt;connection_code&lt;/em&gt; expires.
   * @return connectionCodeExpiresAt
  **/
  @ApiModelProperty(example = "", value = "The date and time that the <em>connection_code</em> expires.")
  public String getConnectionCodeExpiresAt() {
    return connectionCodeExpiresAt;
  }

  public void setConnectionCodeExpiresAt(String connectionCodeExpiresAt) {
    this.connectionCodeExpiresAt = connectionCodeExpiresAt;
  }

  public StreamTargetWowza createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date and time that the stream target was created.
   * @return createdAt
  **/
  @ApiModelProperty(example = "", value = "The date and time that the stream target was created.")
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }

  public StreamTargetWowza hdsPlaybackUrl(String hdsPlaybackUrl) {
    this.hdsPlaybackUrl = hdsPlaybackUrl;
    return this;
  }

   /**
   * The web address that the target uses to play Adobe HDS streams.
   * @return hdsPlaybackUrl
  **/
  @ApiModelProperty(example = "", value = "The web address that the target uses to play Adobe HDS streams.")
  public String getHdsPlaybackUrl() {
    return hdsPlaybackUrl;
  }

  public void setHdsPlaybackUrl(String hdsPlaybackUrl) {
    this.hdsPlaybackUrl = hdsPlaybackUrl;
  }

  public StreamTargetWowza hlsPlaybackUrl(String hlsPlaybackUrl) {
    this.hlsPlaybackUrl = hlsPlaybackUrl;
    return this;
  }

   /**
   * Only for targets whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;. The web address that the target uses to play Apple HLS streams.
   * @return hlsPlaybackUrl
  **/
  @ApiModelProperty(example = "", value = "Only for targets whose <em>provider</em> is <strong>akamai_cupertino</strong>. The web address that the target uses to play Apple HLS streams.")
  public String getHlsPlaybackUrl() {
    return hlsPlaybackUrl;
  }

  public void setHlsPlaybackUrl(String hlsPlaybackUrl) {
    this.hlsPlaybackUrl = hlsPlaybackUrl;
  }

  public StreamTargetWowza id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The unique alphanumeric string that identifies the stream target.
   * @return id
  **/
  @ApiModelProperty(example = "", value = "The unique alphanumeric string that identifies the stream target.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public StreamTargetWowza location(LocationEnum location) {
    this.location = location;
    return this;
  }

   /**
   * Only for Wowza stream targets whose &lt;em&gt;provider&lt;/em&gt; is &lt;em&gt;not&lt;/em&gt; &lt;strong&gt;akamai_cupertino&lt;/strong&gt;. Choose a location as close as possible to your video source.
   * @return location
  **/
  @ApiModelProperty(example = "", value = "Only for Wowza stream targets whose <em>provider</em> is <em>not</em> <strong>akamai_cupertino</strong>. Choose a location as close as possible to your video source.")
  public LocationEnum getLocation() {
    return location;
  }

  public void setLocation(LocationEnum location) {
    this.location = location;
  }

  public StreamTargetWowza name(String name) {
    this.name = name;
    return this;
  }

   /**
   * A descriptive name for the stream target. Maximum 255 characters.
   * @return name
  **/
  @ApiModelProperty(example = "", value = "A descriptive name for the stream target. Maximum 255 characters.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public StreamTargetWowza primaryUrl(String primaryUrl) {
    this.primaryUrl = primaryUrl;
    return this;
  }

   /**
   * The primary ingest URL of the target.
   * @return primaryUrl
  **/
  @ApiModelProperty(example = "", value = "The primary ingest URL of the target.")
  public String getPrimaryUrl() {
    return primaryUrl;
  }

  public void setPrimaryUrl(String primaryUrl) {
    this.primaryUrl = primaryUrl;
  }

  @JsonAdapter(ProviderEnum.Adapter.class)
  public enum ProviderEnum {
    AKAMAI("akamai"),

    AKAMAI_CUPERTINO("akamai_cupertino"),

    AKAMAI_LEGACY_RTMP("akamai_legacy_rtmp");

    private String value;

    ProviderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProviderEnum fromValue(String text) {
      for (ProviderEnum b : ProviderEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ProviderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProviderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProviderEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ProviderEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("provider")
  private ProviderEnum provider = null;

 public StreamTargetWowza provider(ProviderEnum provider) {
    this.provider = provider;
    return this;
  }

   /**
   * The CDN for the target.
   * @return provider
  **/
  @ApiModelProperty(example = "akamai", value = "The CDN for the target.")
  public ProviderEnum getProvider() {
    return provider;
  }

  public void setProvider(ProviderEnum provider) {
    this.provider = provider;
  }


  public StreamTargetWowza secureIngestQueryParam(String secureIngestQueryParam) {
    this.secureIngestQueryParam = secureIngestQueryParam;
    return this;
  }

   /**
   * Only for targets whose &lt;em&gt;use_secure_ingest&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt;. The query parameter needed for secure stream delivery between the transcoder and the target.
   * @return secureIngestQueryParam
  **/
  @ApiModelProperty(example = "", value = "Only for targets whose <em>use_secure_ingest</em> is <strong>true</strong>. The query parameter needed for secure stream delivery between the transcoder and the target.")
  public String getSecureIngestQueryParam() {
    return secureIngestQueryParam;
  }

  public void setSecureIngestQueryParam(String secureIngestQueryParam) {
    this.secureIngestQueryParam = secureIngestQueryParam;
  }

  public StreamTargetWowza streamName(String streamName) {
    this.streamName = streamName;
    return this;
  }

   /**
   * The name of the stream being ingested into the target.
   * @return streamName
  **/
  @ApiModelProperty(example = "", value = "The name of the stream being ingested into the target.")
  public String getStreamName() {
    return streamName;
  }

  public void setStreamName(String streamName) {
    this.streamName = streamName;
  }

  public StreamTargetWowza updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * The date and time that the stream target was updated.
   * @return updatedAt
  **/
  @ApiModelProperty(example = "", value = "The date and time that the stream target was updated.")
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }

  public StreamTargetWowza useCors(Boolean useCors) {
    this.useCors = useCors;
    return this;
  }

   /**
   * Only for Wowza stream targets whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;. CORS, or cross-origin resource sharing, allows streams to be safely delivered across domains.
   * @return useCors
  **/
  @ApiModelProperty(value = "Only for Wowza stream targets whose <em>provider</em> is <strong>akamai_cupertino</strong>. CORS, or cross-origin resource sharing, allows streams to be safely delivered across domains.")
  public Boolean isUseCors() {
    return useCors;
  }

  public void setUseCors(Boolean useCors) {
    this.useCors = useCors;
  }

  public StreamTargetWowza useSecureIngest(Boolean useSecureIngest) {
    this.useSecureIngest = useSecureIngest;
    return this;
  }

   /**
   * Only for Wowza stream targets whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;. If &lt;strong&gt;true&lt;/strong&gt;, generates a &lt;em&gt;secure_ingest_query_param&lt;/em&gt; to securely deliver the stream from the transcoder to the provider.
   * @return useSecureIngest
  **/
  @ApiModelProperty(value = "Only for Wowza stream targets whose <em>provider</em> is <strong>akamai_cupertino</strong>. If <strong>true</strong>, generates a <em>secure_ingest_query_param</em> to securely deliver the stream from the transcoder to the provider.")
  public Boolean isUseSecureIngest() {
    return useSecureIngest;
  }

  public void setUseSecureIngest(Boolean useSecureIngest) {
    this.useSecureIngest = useSecureIngest;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamTargetWowza streamTargetWowza = (StreamTargetWowza) o;
    return Objects.equals(this.backupUrl, streamTargetWowza.backupUrl) &&
        Objects.equals(this.connectionCode, streamTargetWowza.connectionCode) &&
        Objects.equals(this.connectionCodeExpiresAt, streamTargetWowza.connectionCodeExpiresAt) &&
        Objects.equals(this.createdAt, streamTargetWowza.createdAt) &&
        Objects.equals(this.hdsPlaybackUrl, streamTargetWowza.hdsPlaybackUrl) &&
        Objects.equals(this.hlsPlaybackUrl, streamTargetWowza.hlsPlaybackUrl) &&
        Objects.equals(this.id, streamTargetWowza.id) &&
        Objects.equals(this.location, streamTargetWowza.location) &&
        Objects.equals(this.name, streamTargetWowza.name) &&
        Objects.equals(this.primaryUrl, streamTargetWowza.primaryUrl) &&
        Objects.equals(this.provider, streamTargetWowza.provider) &&
        Objects.equals(this.secureIngestQueryParam, streamTargetWowza.secureIngestQueryParam) &&
        Objects.equals(this.streamName, streamTargetWowza.streamName) &&
        Objects.equals(this.updatedAt, streamTargetWowza.updatedAt) &&
        Objects.equals(this.useCors, streamTargetWowza.useCors) &&
        Objects.equals(this.useSecureIngest, streamTargetWowza.useSecureIngest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupUrl, connectionCode, connectionCodeExpiresAt, createdAt, hdsPlaybackUrl, hlsPlaybackUrl, id, location, name, primaryUrl, provider, secureIngestQueryParam, streamName, updatedAt, useCors, useSecureIngest);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamTargetWowza {\n");
    
    sb.append("    backupUrl: ").append(toIndentedString(backupUrl)).append("\n");
    sb.append("    connectionCode: ").append(toIndentedString(connectionCode)).append("\n");
    sb.append("    connectionCodeExpiresAt: ").append(toIndentedString(connectionCodeExpiresAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    hdsPlaybackUrl: ").append(toIndentedString(hdsPlaybackUrl)).append("\n");
    sb.append("    hlsPlaybackUrl: ").append(toIndentedString(hlsPlaybackUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    primaryUrl: ").append(toIndentedString(primaryUrl)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    secureIngestQueryParam: ").append(toIndentedString(secureIngestQueryParam)).append("\n");
    sb.append("    streamName: ").append(toIndentedString(streamName)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    useCors: ").append(toIndentedString(useCors)).append("\n");
    sb.append("    useSecureIngest: ").append(toIndentedString(useSecureIngest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

