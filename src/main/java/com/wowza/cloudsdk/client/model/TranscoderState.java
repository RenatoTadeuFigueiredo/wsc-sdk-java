/*
 * This code and all components Â© 2015 - 2019 Wowza Media Systems, LLC. All rights reserved.
 * This code is licensed pursuant to the BSD 3-Clause License.
 * 
 * Wowza Streaming Cloud REST API Reference Documentation
 *
 * OpenAPI spec version: v1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wowza.cloudsdk.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * TranscoderState
 */
public class TranscoderState {
  @SerializedName("ip_address")
  private String ipAddress = null;

  /**
   * The state of the transcoder.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STARTING("starting"),
    
    STOPPING("stopping"),
    
    STARTED("started"),
    
    STOPPED("stopped"),
    
    RESETTING("resetting");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("uptime_id")
  private String uptimeId = null;

  public TranscoderState ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * Available from version 1.1.&lt;br /&gt;&lt;br /&gt;The IP address of the transcoder instance. If the transcoder &lt;em&gt;state&lt;/em&gt; is anything other than &lt;strong&gt;started&lt;/strong&gt;, the &lt;em&gt;ip_address&lt;/em&gt; is &lt;strong&gt;0.0.0.0&lt;/strong&gt;.
   * @return ipAddress
  **/
  @ApiModelProperty(example = "1.2.3.4", value = "Available from version 1.1.<br /><br />The IP address of the transcoder instance. If the transcoder <em>state</em> is anything other than <strong>started</strong>, the <em>ip_address</em> is <strong>0.0.0.0</strong>.")
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }

  public TranscoderState state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * The state of the transcoder.
   * @return state
  **/
  @ApiModelProperty(example = "started", value = "The state of the transcoder.")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public TranscoderState uptimeId(String uptimeId) {
    this.uptimeId = uptimeId;
    return this;
  }

   /**
   * The unique identifier associated with a specific uptime period of a transcoder.
   * @return uptimeId
  **/
  @ApiModelProperty(example = "abcd1234", value = "The unique identifier associated with a specific uptime period of a transcoder.")
  public String getUptimeId() {
    return uptimeId;
  }

  public void setUptimeId(String uptimeId) {
    this.uptimeId = uptimeId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TranscoderState transcoder4 = (TranscoderState) o;
    return Objects.equals(this.ipAddress, transcoder4.ipAddress) &&
        Objects.equals(this.state, transcoder4.state) &&
        Objects.equals(this.uptimeId, transcoder4.uptimeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ipAddress, state, uptimeId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TranscoderState {\n");
    
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    uptimeId: ").append(toIndentedString(uptimeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

