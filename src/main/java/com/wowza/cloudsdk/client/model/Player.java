/*
 * This code and all components Â© 2015 - 2019 Wowza Media Systems, LLC. All rights reserved.
 * This code is licensed pursuant to the BSD 3-Clause License.
 * 
 * Wowza Streaming Cloud REST API Reference Documentation
 *
 * OpenAPI spec version: v1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wowza.cloudsdk.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * 
 */
@ApiModel(description = "")
public class Player {
  @SerializedName("countdown")
  private Boolean countdown = null;

  @SerializedName("countdown_at")
  private OffsetDateTime countdownAt = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("embed_code")
  private String embedCode = null;

  @SerializedName("hds_playback_url")
  private String hdsPlaybackUrl = null;

  @SerializedName("hls_playback_url")
  private String hlsPlaybackUrl = null;

  @SerializedName("hosted_page")
  private Boolean hostedPage = null;

  @SerializedName("hosted_page_description")
  private String hostedPageDescription = null;

  @SerializedName("hosted_page_logo_image_url")
  private String hostedPageLogoImageUrl = null;

  @SerializedName("hosted_page_sharing_icons")
  private String hostedPageSharingIcons = null;

  @SerializedName("hosted_page_title")
  private String hostedPageTitle = null;

  @SerializedName("hosted_page_url")
  private String hostedPageUrl = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("logo_image_url")
  private String logoImageUrl = null;

  @SerializedName("logo_position")
  private String logoPosition = null;

  @SerializedName("responsive")
  private Boolean responsive = null;

  @SerializedName("transcoder_id")
  private String transcoderId = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("updated_at")
  private OffsetDateTime updatedAt = null;

  @SerializedName("video_poster_image_url")
  private String videoPosterImageUrl = null;

  @SerializedName("width")
  private Integer width = null;

  public Player countdown(Boolean countdown) {
    this.countdown = countdown;
    return this;
  }

   /**
   * A clock that appears in the player before the event and counts down to the start of the stream. Specify &lt;strong&gt;true&lt;/strong&gt; to display the countdown clock. The default is &lt;strong&gt;false&lt;/strong&gt;.
   * @return countdown
  **/
  @ApiModelProperty(value = "A clock that appears in the player before the event and counts down to the start of the stream. Specify <strong>true</strong> to display the countdown clock. The default is <strong>false</strong>.")
  public Boolean isCountdown() {
    return countdown;
  }

  public void setCountdown(Boolean countdown) {
    this.countdown = countdown;
  }

  public Player countdownAt(OffsetDateTime countdownAt) {
    this.countdownAt = countdownAt;
    return this;
  }

   /**
   * The date and time that the event starts, used by the countdown clock. Enter &lt;strong&gt;YYYY-MM-DD HH:MM:SS&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC.
   * @return countdownAt
  **/
  @ApiModelProperty(example = "", value = "The date and time that the event starts, used by the countdown clock. Enter <strong>YYYY-MM-DD HH:MM:SS</strong> where <strong>HH</strong> is a 24-hour clock in UTC.")
  public OffsetDateTime getCountdownAt() {
    return countdownAt;
  }

  public void setCountdownAt(OffsetDateTime countdownAt) {
    this.countdownAt = countdownAt;
  }

  public Player createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date and time that the player was created.
   * @return createdAt
  **/
  @ApiModelProperty(example = "", value = "The date and time that the player was created.")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public Player embedCode(String embedCode) {
    this.embedCode = embedCode;
    return this;
  }

   /**
   * The HTML code that can be used in an external webpage to host the Wowza Streaming Cloud player.
   * @return embedCode
  **/
  @ApiModelProperty(example = "", value = "The HTML code that can be used in an external webpage to host the Wowza Streaming Cloud player.")
  public String getEmbedCode() {
    return embedCode;
  }

  public void setEmbedCode(String embedCode) {
    this.embedCode = embedCode;
  }

  public Player hdsPlaybackUrl(String hdsPlaybackUrl) {
    this.hdsPlaybackUrl = hdsPlaybackUrl;
    return this;
  }

   /**
   * The address that can be used to configure playback of the stream using the Adobe HDS protocol.
   * @return hdsPlaybackUrl
  **/
  @ApiModelProperty(example = "", value = "The address that can be used to configure playback of the stream using the Adobe HDS protocol.")
  public String getHdsPlaybackUrl() {
    return hdsPlaybackUrl;
  }

  public void setHdsPlaybackUrl(String hdsPlaybackUrl) {
    this.hdsPlaybackUrl = hdsPlaybackUrl;
  }

  public Player hlsPlaybackUrl(String hlsPlaybackUrl) {
    this.hlsPlaybackUrl = hlsPlaybackUrl;
    return this;
  }

   /**
   * The address that can be used to configure playback of the stream using the Apple HLS protocol.
   * @return hlsPlaybackUrl
  **/
  @ApiModelProperty(example = "", value = "The address that can be used to configure playback of the stream using the Apple HLS protocol.")
  public String getHlsPlaybackUrl() {
    return hlsPlaybackUrl;
  }

  public void setHlsPlaybackUrl(String hlsPlaybackUrl) {
    this.hlsPlaybackUrl = hlsPlaybackUrl;
  }

  public Player hostedPage(Boolean hostedPage) {
    this.hostedPage = hostedPage;
    return this;
  }

   /**
   * A web page hosted by Wowza Streaming Cloud that includes a player for the live stream. The default, &lt;strong&gt;true&lt;/strong&gt;, creates a hosted page. Specify &lt;strong&gt;false&lt;/strong&gt; to not create a hosted web page.
   * @return hostedPage
  **/
  @ApiModelProperty(value = "A web page hosted by Wowza Streaming Cloud that includes a player for the live stream. The default, <strong>true</strong>, creates a hosted page. Specify <strong>false</strong> to not create a hosted web page.")
  public Boolean isHostedPage() {
    return hostedPage;
  }

  public void setHostedPage(Boolean hostedPage) {
    this.hostedPage = hostedPage;
  }

  public Player hostedPageDescription(String hostedPageDescription) {
    this.hostedPageDescription = hostedPageDescription;
    return this;
  }

   /**
   * A description that appears on the hosted page below the player. Can&#39;t include custom HTML, JavaScript, or other tags.
   * @return hostedPageDescription
  **/
  @ApiModelProperty(example = "", value = "A description that appears on the hosted page below the player. Can't include custom HTML, JavaScript, or other tags.")
  public String getHostedPageDescription() {
    return hostedPageDescription;
  }

  public void setHostedPageDescription(String hostedPageDescription) {
    this.hostedPageDescription = hostedPageDescription;
  }

  public Player hostedPageLogoImageUrl(String hostedPageLogoImageUrl) {
    this.hostedPageLogoImageUrl = hostedPageLogoImageUrl;
    return this;
  }

   /**
   * The path to a GIF, JPEG, or PNG logo file that appears in the upper-left corner of the hosted page. Logo file must be 2.5 MB or smaller.
   * @return hostedPageLogoImageUrl
  **/
  @ApiModelProperty(example = "", value = "The path to a GIF, JPEG, or PNG logo file that appears in the upper-left corner of the hosted page. Logo file must be 2.5 MB or smaller.")
  public String getHostedPageLogoImageUrl() {
    return hostedPageLogoImageUrl;
  }

  public void setHostedPageLogoImageUrl(String hostedPageLogoImageUrl) {
    this.hostedPageLogoImageUrl = hostedPageLogoImageUrl;
  }

  public Player hostedPageSharingIcons(String hostedPageSharingIcons) {
    this.hostedPageSharingIcons = hostedPageSharingIcons;
    return this;
  }

   /**
   * Icons that let viewers share the stream on Facebook, Google+, Twitter, and by email. The default, &lt;strong&gt;true&lt;/strong&gt;, includes sharing icons on the hosted page. Specify &lt;strong&gt;false&lt;/strong&gt; to omit sharing icons.
   * @return hostedPageSharingIcons
  **/
  @ApiModelProperty(example = "", value = "Icons that let viewers share the stream on Facebook, Google+, Twitter, and by email. The default, <strong>true</strong>, includes sharing icons on the hosted page. Specify <strong>false</strong> to omit sharing icons.")
  public String getHostedPageSharingIcons() {
    return hostedPageSharingIcons;
  }

  public void setHostedPageSharingIcons(String hostedPageSharingIcons) {
    this.hostedPageSharingIcons = hostedPageSharingIcons;
  }

  public Player hostedPageTitle(String hostedPageTitle) {
    this.hostedPageTitle = hostedPageTitle;
    return this;
  }

   /**
   * A title for the page that appears above the player. Can&#39;t include custom HTML, JavaScript, or other tags.
   * @return hostedPageTitle
  **/
  @ApiModelProperty(example = "", value = "A title for the page that appears above the player. Can't include custom HTML, JavaScript, or other tags.")
  public String getHostedPageTitle() {
    return hostedPageTitle;
  }

  public void setHostedPageTitle(String hostedPageTitle) {
    this.hostedPageTitle = hostedPageTitle;
  }

  public Player hostedPageUrl(String hostedPageUrl) {
    this.hostedPageUrl = hostedPageUrl;
    return this;
  }

   /**
   * The URL of the Wowza Streaming Cloud-hosted webpage that viewers can visit to watch the stream.
   * @return hostedPageUrl
  **/
  @ApiModelProperty(example = "", value = "The URL of the Wowza Streaming Cloud-hosted webpage that viewers can visit to watch the stream.")
  public String getHostedPageUrl() {
    return hostedPageUrl;
  }

  public void setHostedPageUrl(String hostedPageUrl) {
    this.hostedPageUrl = hostedPageUrl;
  }

  public Player id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The unique alphanumeric string that identifies the player.
   * @return id
  **/
  @ApiModelProperty(example = "", value = "The unique alphanumeric string that identifies the player.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Player logoImageUrl(String logoImageUrl) {
    this.logoImageUrl = logoImageUrl;
    return this;
  }

   /**
   * The path to a GIF, JPEG, or PNG logo file that appears partially transparent in a corner of the player throughout playback. Logo file must be 2.5 MB or smaller.
   * @return logoImageUrl
  **/
  @ApiModelProperty(example = "", value = "The path to a GIF, JPEG, or PNG logo file that appears partially transparent in a corner of the player throughout playback. Logo file must be 2.5 MB or smaller.")
  public String getLogoImageUrl() {
    return logoImageUrl;
  }

  public void setLogoImageUrl(String logoImageUrl) {
    this.logoImageUrl = logoImageUrl;
  }

  public Player logoPosition(String logoPosition) {
    this.logoPosition = logoPosition;
    return this;
  }

   /**
   * The corner of the player in which you want the player logo to appear. The default is &lt;strong&gt;top-left&lt;/strong&gt;.
   * @return logoPosition
  **/
  @ApiModelProperty(example = "", value = "The corner of the player in which you want the player logo to appear. The default is <strong>top-left</strong>.")
  public String getLogoPosition() {
    return logoPosition;
  }

  public void setLogoPosition(String logoPosition) {
    this.logoPosition = logoPosition;
  }

  public Player responsive(Boolean responsive) {
    this.responsive = responsive;
    return this;
  }

   /**
   * A player whose size adjusts according to the device on which it&#39;s being viewed. If &lt;strong&gt;true&lt;/strong&gt;, creates a responsive player. If &lt;strong&gt;false&lt;/strong&gt;, specify a &lt;strong&gt;width&lt;/strong&gt;.
   * @return responsive
  **/
  @ApiModelProperty(value = "A player whose size adjusts according to the device on which it's being viewed. If <strong>true</strong>, creates a responsive player. If <strong>false</strong>, specify a <strong>width</strong>.")
  public Boolean isResponsive() {
    return responsive;
  }

  public void setResponsive(Boolean responsive) {
    this.responsive = responsive;
  }

  public Player transcoderId(String transcoderId) {
    this.transcoderId = transcoderId;
    return this;
  }

   /**
   * The unique alphanumeric string that identifies the transcoder.
   * @return transcoderId
  **/
  @ApiModelProperty(example = "", value = "The unique alphanumeric string that identifies the transcoder.")
  public String getTranscoderId() {
    return transcoderId;
  }

  public void setTranscoderId(String transcoderId) {
    this.transcoderId = transcoderId;
  }

  public Player type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The player you want to use. Valid values are &lt;strong&gt;original_html5&lt;/strong&gt;, which provides HTML5 playback and falls back to Flash on older browsers, and &lt;strong&gt;wowza_player&lt;/strong&gt;, which provides HTML5 playback over Apple HLS. &lt;strong&gt;wowza_player&lt;/strong&gt; requires that &lt;em&gt;target_delivery_protocol&lt;/em&gt; be &lt;strong&gt;hls-https&lt;/strong&gt; and &lt;em&gt;closed_caption_type&lt;/em&gt; be &lt;strong&gt;none&lt;/strong&gt;. The default is &lt;strong&gt;original_html5&lt;/strong&gt;.
   * @return type
  **/
  @ApiModelProperty(example = "", value = "The player you want to use. Valid values are <strong>original_html5</strong>, which provides HTML5 playback and falls back to Flash on older browsers, and <strong>wowza_player</strong>, which provides HTML5 playback over Apple HLS. <strong>wowza_player</strong> requires that <em>target_delivery_protocol</em> be <strong>hls-https</strong> and <em>closed_caption_type</em> be <strong>none</strong>. The default is <strong>original_html5</strong>.")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public Player updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * The date and time that the player was updated.
   * @return updatedAt
  **/
  @ApiModelProperty(example = "", value = "The date and time that the player was updated.")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public Player videoPosterImageUrl(String videoPosterImageUrl) {
    this.videoPosterImageUrl = videoPosterImageUrl;
    return this;
  }

   /**
   * The path to a GIF, JPEG, or PNG poster image that appears in the player before the stream begins. Poster image files must be 2.5 MB or smaller.
   * @return videoPosterImageUrl
  **/
  @ApiModelProperty(example = "", value = "The path to a GIF, JPEG, or PNG poster image that appears in the player before the stream begins. Poster image files must be 2.5 MB or smaller.")
  public String getVideoPosterImageUrl() {
    return videoPosterImageUrl;
  }

  public void setVideoPosterImageUrl(String videoPosterImageUrl) {
    this.videoPosterImageUrl = videoPosterImageUrl;
  }

  public Player width(Integer width) {
    this.width = width;
    return this;
  }

   /**
   * The width, in pixels, of a fixed-size player. The default is &lt;strong&gt;640&lt;/strong&gt;.
   * @return width
  **/
  @ApiModelProperty(example = "", value = "The width, in pixels, of a fixed-size player. The default is <strong>640</strong>.")
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Player player = (Player) o;
    return Objects.equals(this.countdown, player.countdown) &&
        Objects.equals(this.countdownAt, player.countdownAt) &&
        Objects.equals(this.createdAt, player.createdAt) &&
        Objects.equals(this.embedCode, player.embedCode) &&
        Objects.equals(this.hdsPlaybackUrl, player.hdsPlaybackUrl) &&
        Objects.equals(this.hlsPlaybackUrl, player.hlsPlaybackUrl) &&
        Objects.equals(this.hostedPage, player.hostedPage) &&
        Objects.equals(this.hostedPageDescription, player.hostedPageDescription) &&
        Objects.equals(this.hostedPageLogoImageUrl, player.hostedPageLogoImageUrl) &&
        Objects.equals(this.hostedPageSharingIcons, player.hostedPageSharingIcons) &&
        Objects.equals(this.hostedPageTitle, player.hostedPageTitle) &&
        Objects.equals(this.hostedPageUrl, player.hostedPageUrl) &&
        Objects.equals(this.id, player.id) &&
        Objects.equals(this.logoImageUrl, player.logoImageUrl) &&
        Objects.equals(this.logoPosition, player.logoPosition) &&
        Objects.equals(this.responsive, player.responsive) &&
        Objects.equals(this.transcoderId, player.transcoderId) &&
        Objects.equals(this.type, player.type) &&
        Objects.equals(this.updatedAt, player.updatedAt) &&
        Objects.equals(this.videoPosterImageUrl, player.videoPosterImageUrl) &&
        Objects.equals(this.width, player.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countdown, countdownAt, createdAt, embedCode, hdsPlaybackUrl, hlsPlaybackUrl, hostedPage, hostedPageDescription, hostedPageLogoImageUrl, hostedPageSharingIcons, hostedPageTitle, hostedPageUrl, id, logoImageUrl, logoPosition, responsive, transcoderId, type, updatedAt, videoPosterImageUrl, width);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Player {\n");
    
    sb.append("    countdown: ").append(toIndentedString(countdown)).append("\n");
    sb.append("    countdownAt: ").append(toIndentedString(countdownAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    embedCode: ").append(toIndentedString(embedCode)).append("\n");
    sb.append("    hdsPlaybackUrl: ").append(toIndentedString(hdsPlaybackUrl)).append("\n");
    sb.append("    hlsPlaybackUrl: ").append(toIndentedString(hlsPlaybackUrl)).append("\n");
    sb.append("    hostedPage: ").append(toIndentedString(hostedPage)).append("\n");
    sb.append("    hostedPageDescription: ").append(toIndentedString(hostedPageDescription)).append("\n");
    sb.append("    hostedPageLogoImageUrl: ").append(toIndentedString(hostedPageLogoImageUrl)).append("\n");
    sb.append("    hostedPageSharingIcons: ").append(toIndentedString(hostedPageSharingIcons)).append("\n");
    sb.append("    hostedPageTitle: ").append(toIndentedString(hostedPageTitle)).append("\n");
    sb.append("    hostedPageUrl: ").append(toIndentedString(hostedPageUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logoImageUrl: ").append(toIndentedString(logoImageUrl)).append("\n");
    sb.append("    logoPosition: ").append(toIndentedString(logoPosition)).append("\n");
    sb.append("    responsive: ").append(toIndentedString(responsive)).append("\n");
    sb.append("    transcoderId: ").append(toIndentedString(transcoderId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    videoPosterImageUrl: ").append(toIndentedString(videoPosterImageUrl)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

