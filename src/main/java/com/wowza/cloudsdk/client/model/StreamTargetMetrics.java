/*
 * This code and all components Â© 2015 - 2019 Wowza Media Systems, LLC. All rights reserved.
 * This code is licensed pursuant to the BSD 3-Clause License.
 * 
 * Wowza Streaming Cloud REST API Reference Documentation
 *
 * OpenAPI spec version: v1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wowza.cloudsdk.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * 
 */
@ApiModel(description = "")
public class StreamTargetMetrics {
  @SerializedName("average_bytes_in")
  private Float averageBytesIn = null;

  @SerializedName("average_total_connections")
  private Float averageTotalConnections = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  @SerializedName("dropped_connections")
  private Integer droppedConnections = null;

  @SerializedName("maximum_total_connections")
  private Integer maximumTotalConnections = null;

  @SerializedName("minimum_total_connections")
  private Integer minimumTotalConnections = null;

  @SerializedName("new_connections")
  private Integer newConnections = null;

  public StreamTargetMetrics averageBytesIn(Float averageBytesIn) {
    this.averageBytesIn = averageBytesIn;
    return this;
  }

   /**
   * The average number of bytes transfered to the origin server by the source.
   * @return averageBytesIn
  **/
  @ApiModelProperty(example = "456789.12", value = "The average number of bytes transfered to the origin server by the source.")
  public Float getAverageBytesIn() {
    return averageBytesIn;
  }

  public void setAverageBytesIn(Float averageBytesIn) {
    this.averageBytesIn = averageBytesIn;
  }

  public StreamTargetMetrics averageTotalConnections(Float averageTotalConnections) {
    this.averageTotalConnections = averageTotalConnections;
    return this;
  }

   /**
   * The total number of current connections.
   * @return averageTotalConnections
  **/
  @ApiModelProperty(example = "10.1", value = "The total number of current connections.")
  public Float getAverageTotalConnections() {
    return averageTotalConnections;
  }

  public void setAverageTotalConnections(Float averageTotalConnections) {
    this.averageTotalConnections = averageTotalConnections;
  }

  public StreamTargetMetrics createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date and time, in UTC, that the metrics were recorded.
   * @return createdAt
  **/
  @ApiModelProperty(example = "", value = "The date and time, in UTC, that the metrics were recorded.")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public StreamTargetMetrics droppedConnections(Integer droppedConnections) {
    this.droppedConnections = droppedConnections;
    return this;
  }

   /**
   * The total number of dropped connections since the last interval.
   * @return droppedConnections
  **/
  @ApiModelProperty(example = "0", value = "The total number of dropped connections since the last interval.")
  public Integer getDroppedConnections() {
    return droppedConnections;
  }

  public void setDroppedConnections(Integer droppedConnections) {
    this.droppedConnections = droppedConnections;
  }

  public StreamTargetMetrics maximumTotalConnections(Integer maximumTotalConnections) {
    this.maximumTotalConnections = maximumTotalConnections;
    return this;
  }

   /**
   * The maximum number of connections during the interval.
   * @return maximumTotalConnections
  **/
  @ApiModelProperty(example = "20", value = "The maximum number of connections during the interval.")
  public Integer getMaximumTotalConnections() {
    return maximumTotalConnections;
  }

  public void setMaximumTotalConnections(Integer maximumTotalConnections) {
    this.maximumTotalConnections = maximumTotalConnections;
  }

  public StreamTargetMetrics minimumTotalConnections(Integer minimumTotalConnections) {
    this.minimumTotalConnections = minimumTotalConnections;
    return this;
  }

   /**
   * The minimum number of connections during the interval.
   * @return minimumTotalConnections
  **/
  @ApiModelProperty(example = "0", value = "The minimum number of connections during the interval.")
  public Integer getMinimumTotalConnections() {
    return minimumTotalConnections;
  }

  public void setMinimumTotalConnections(Integer minimumTotalConnections) {
    this.minimumTotalConnections = minimumTotalConnections;
  }

  public StreamTargetMetrics newConnections(Integer newConnections) {
    this.newConnections = newConnections;
    return this;
  }

   /**
   * The total number of new connections since the last interval.
   * @return newConnections
  **/
  @ApiModelProperty(example = "0", value = "The total number of new connections since the last interval.")
  public Integer getNewConnections() {
    return newConnections;
  }

  public void setNewConnections(Integer newConnections) {
    this.newConnections = newConnections;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamTargetMetrics streamTargetMetrics = (StreamTargetMetrics) o;
    return Objects.equals(this.averageBytesIn, streamTargetMetrics.averageBytesIn) &&
        Objects.equals(this.averageTotalConnections, streamTargetMetrics.averageTotalConnections) &&
        Objects.equals(this.createdAt, streamTargetMetrics.createdAt) &&
        Objects.equals(this.droppedConnections, streamTargetMetrics.droppedConnections) &&
        Objects.equals(this.maximumTotalConnections, streamTargetMetrics.maximumTotalConnections) &&
        Objects.equals(this.minimumTotalConnections, streamTargetMetrics.minimumTotalConnections) &&
        Objects.equals(this.newConnections, streamTargetMetrics.newConnections);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averageBytesIn, averageTotalConnections, createdAt, droppedConnections, maximumTotalConnections, minimumTotalConnections, newConnections);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamTargetMetrics {\n");
    
    sb.append("    averageBytesIn: ").append(toIndentedString(averageBytesIn)).append("\n");
    sb.append("    averageTotalConnections: ").append(toIndentedString(averageTotalConnections)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    droppedConnections: ").append(toIndentedString(droppedConnections)).append("\n");
    sb.append("    maximumTotalConnections: ").append(toIndentedString(maximumTotalConnections)).append("\n");
    sb.append("    minimumTotalConnections: ").append(toIndentedString(minimumTotalConnections)).append("\n");
    sb.append("    newConnections: ").append(toIndentedString(newConnections)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

