/*
 * This code and all components Â© 2015 - 2019 Wowza Media Systems, LLC. All rights reserved.
 * This code is licensed pursuant to the BSD 3-Clause License.
 * 
 * Wowza Streaming Cloud REST API Reference Documentation
 *
 * OpenAPI spec version: v1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wowza.cloudsdk.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.wowza.cloudsdk.client.model.PlaybackUrl;
import com.wowza.cloudsdk.client.model.StreamTargetsId;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.time.OffsetDateTime;

/**
 * 
 */
@ApiModel(description = "")
@javax.annotation.Generated(value ="com.wowza.cloudsdk.JavaCreate", date = "2019-03-02T10:45:24.077Z")
public class LiveStream {
  @SerializedName("aspect_ratio_height")
  private Integer aspectRatioHeight = null;

  @SerializedName("aspect_ratio_width")
  private Integer aspectRatioWidth = null;

  /**
   * The billing mode for the stream. The default is &lt;strong&gt;pay_as_you_go&lt;/strong&gt;.
   */
  @JsonAdapter(BillingModeEnum.Adapter.class)
  public enum BillingModeEnum {
    PAY_AS_YOU_GO("pay_as_you_go"),
    
    TWENTYFOUR_SEVEN("twentyfour_seven");

    private String value;

    BillingModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BillingModeEnum fromValue(String text) {
      for (BillingModeEnum b : BillingModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BillingModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BillingModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BillingModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BillingModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("billing_mode")
  private BillingModeEnum billingMode = null;

  /**
   * The location of your stream. Choose a location as close as possible to your video source.
   */
  @JsonAdapter(BroadcastLocationEnum.Adapter.class)
  public enum BroadcastLocationEnum {
    ASIA_PACIFIC_AUSTRALIA("asia_pacific_australia"),
    
    ASIA_PACIFIC_JAPAN("asia_pacific_japan"),
    
    ASIA_PACIFIC_SINGAPORE("asia_pacific_singapore"),
    
    ASIA_PACIFIC_TAIWAN("asia_pacific_taiwan"),
    
    EU_BELGIUM("eu_belgium"),
    
    EU_GERMANY("eu_germany"),
    
    EU_IRELAND("eu_ireland"),
    
    SOUTH_AMERICA_BRAZIL("south_america_brazil"),
    
    US_CENTRAL_IOWA("us_central_iowa"),
    
    US_EAST_VIRGINIA("us_east_virginia"),
    
    US_WEST_CALIFORNIA("us_west_california"),
    
    US_WEST_OREGON("us_west_oregon");

    private String value;

    BroadcastLocationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BroadcastLocationEnum fromValue(String text) {
      for (BroadcastLocationEnum b : BroadcastLocationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<BroadcastLocationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BroadcastLocationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BroadcastLocationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return BroadcastLocationEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("broadcast_location")
  private BroadcastLocationEnum broadcastLocation = null;

  /**
   * The type of closed caption data being passed from the source. The default, &lt;strong&gt;none&lt;/strong&gt;, indicates that no data is being provided. &lt;strong&gt;cea&lt;/strong&gt; indicates that a CEA closed captioning data stream is being provided. &lt;strong&gt;on_text&lt;/strong&gt; indicates that an onTextData closed captioning data stream is being provided. &lt;strong&gt;both&lt;/strong&gt; indicates that both CEA and onTextData closed captioning data streams are being provided.
   */
  @JsonAdapter(ClosedCaptionTypeEnum.Adapter.class)
  public enum ClosedCaptionTypeEnum {
    NONE("none"),
    
    CEA("cea"),
    
    ON_TEXT("on_text"),
    
    BOTH("both");

    private String value;

    ClosedCaptionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClosedCaptionTypeEnum fromValue(String text) {
      for (ClosedCaptionTypeEnum b : ClosedCaptionTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ClosedCaptionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClosedCaptionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClosedCaptionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ClosedCaptionTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("closed_caption_type")
  private ClosedCaptionTypeEnum closedCaptionType = null;

  @SerializedName("connection_code")
  private String connectionCode = null;

  @SerializedName("password")
  private String password = null;

  @SerializedName("username")
  private String username = null;

  @SerializedName("disable_authentication")
  private Boolean disableAuthentication = false;

  @SerializedName("connection_code_expires_at")
  private OffsetDateTime connectionCodeExpiresAt = null;

  @SerializedName("created_at")
  private OffsetDateTime createdAt = null;

  /**
   * The type of connection between the video source and the transcoder. The default, &lt;strong&gt;push&lt;/strong&gt;, instructs the source to push the stream to the transcoder. &lt;strong&gt;pull&lt;/strong&gt; instructs the transcoder to pull the video from the source. &lt;strong&gt;cdn&lt;/strong&gt; uses a stream source to deliver the stream to the transcoder.
   */
  @JsonAdapter(DeliveryMethodEnum.Adapter.class)
  public enum DeliveryMethodEnum {
    PULL("pull"),
    
    CDN("cdn"),
    
    PUSH("push");

    private String value;

    DeliveryMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliveryMethodEnum fromValue(String text) {
      for (DeliveryMethodEnum b : DeliveryMethodEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DeliveryMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliveryMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliveryMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DeliveryMethodEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("delivery_method")
  private DeliveryMethodEnum deliveryMethod = null;

  @SerializedName("delivery_protocols")
  private List<String> deliveryProtocols = null;

  /**
   * For streams whose &lt;em&gt;encoder&lt;/em&gt; is &lt;strong&gt;wowza_streaming_engine&lt;/strong&gt;. The default is &lt;strong&gt;multi-bitrate&lt;/strong&gt;, which means you&#39;re sending one or more bitrate renditions from Wowza Streaming Engine directly to a Wowza CDN target without transcoding in Wowza Streaming Cloud. The value &lt;strong&gt;single-bitrate&lt;/strong&gt; means you&#39;re sending a single source stream to Wowza Streaming Cloud for transcoding and/or to deliver the source stream to multiple stream targets in Wowza Streaming Cloud.
   */
  @JsonAdapter(DeliveryTypeEnum.Adapter.class)
  public enum DeliveryTypeEnum {
    SINGLE_BITRATE("single-bitrate"),
    
    MULTI_BITRATE("multi-bitrate");

    private String value;

    DeliveryTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliveryTypeEnum fromValue(String text) {
      for (DeliveryTypeEnum b : DeliveryTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DeliveryTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliveryTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliveryTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DeliveryTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("delivery_type")
  private DeliveryTypeEnum deliveryType = null;

  @SerializedName("direct_playback_urls")
  private HashMap<String,List<PlaybackUrl>> directPlaybackUrls = null;

  /**
   * The video source for the live stream. Choose the type of camera or encoder you&#39;re using to connect to the Wowza Streaming Cloud transcoder. If your specific device isn&#39;t listed, choose &lt;strong&gt;ipcamera&lt;/strong&gt;, &lt;strong&gt;other_rtmp&lt;/strong&gt;, or &lt;strong&gt;other_rtsp&lt;/strong&gt;.
   */
  @JsonAdapter(EncoderEnum.Adapter.class)
  public enum EncoderEnum {
    WOWZA_STREAMING_ENGINE("wowza_streaming_engine"),
    
    WOWZA_GOCODER("wowza_gocoder"),
    
    MEDIA_DS("media_ds"),
    
    AXIS("axis"),
    
    EPIPHAN("epiphan"),
    
    HAUPPAUGE("hauppauge"),
    
    JVC("jvc"),
    
    LIVE_U("live_u"),
    
    MATROX("matrox"),
    
    NEWTEK_TRICASTER("newtek_tricaster"),
    
    OSPREY("osprey"),
    
    SONY("sony"),
    
    TELESTREAM_WIRECAST("telestream_wirecast"),
    
    TERADEK_CUBE("teradek_cube"),
    
    VMIX("vmix"),
    
    X_SPLIT("x_split"),
    
    IPCAMERA("ipcamera"),
    
    OTHER_RTMP("other_rtmp"),
    
    OTHER_RTSP("other_rtsp");

    private String value;

    EncoderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncoderEnum fromValue(String text) {
      for (EncoderEnum b : EncoderEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EncoderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncoderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncoderEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EncoderEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("encoder")
  private EncoderEnum encoder = null;

  @SerializedName("hosted_page")
  private Boolean hostedPage = null;

  @SerializedName("hosted_page_description")
  private String hostedPageDescription = null;

  @SerializedName("hosted_page_logo_image_url")
  private String hostedPageLogoImageUrl = null;

  @SerializedName("hosted_page_sharing_icons")
  private Boolean hostedPageSharingIcons = null;

  @SerializedName("hosted_page_title")
  private String hostedPageTitle = null;

  @SerializedName("hosted_page_url")
  private String hostedPageUrl = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("low_latency")
  private Boolean lowLatency = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("player_countdown")
  private Boolean playerCountdown = null;

  @SerializedName("player_countdown_at")
  private OffsetDateTime playerCountdownAt = null;

  @SerializedName("player_embed_code")
  private String playerEmbedCode = null;

  @SerializedName("player_hds_playback_url")
  private String playerHdsPlaybackUrl = null;

  @SerializedName("player_hls_playback_url")
  private String playerHlsPlaybackUrl = null;

  @SerializedName("player_id")
  private String playerId = null;

  @SerializedName("player_logo_image_url")
  private String playerLogoImageUrl = null;

  /**
   * The corner of the player in which you want the player logo to appear. The default is &lt;strong&gt;top-left&lt;/strong&gt;.
   */
  @JsonAdapter(PlayerLogoPositionEnum.Adapter.class)
  public enum PlayerLogoPositionEnum {
    TOP_LEFT("top-left"),
    
    TOP_RIGHT("top-right"),
    
    BOTTOM_LEFT("bottom-left"),
    
    BOTTOM_RIGHT("bottom-right");

    private String value;

    PlayerLogoPositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlayerLogoPositionEnum fromValue(String text) {
      for (PlayerLogoPositionEnum b : PlayerLogoPositionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PlayerLogoPositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlayerLogoPositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlayerLogoPositionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PlayerLogoPositionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("player_logo_position")
  private PlayerLogoPositionEnum playerLogoPosition = null;

  @SerializedName("player_responsive")
  private Boolean playerResponsive = null;

  @SerializedName("player_type")
  private String playerType = null;

  @SerializedName("player_video_poster_image_url")
  private String playerVideoPosterImageUrl = null;

  @SerializedName("player_width")
  private Integer playerWidth = null;

  @SerializedName("recording")
  private Boolean recording = null;

  @SerializedName("source_connection_information")
  private Object sourceConnectionInformation = null;

  @SerializedName("stream_source_id")
  private String streamSourceId = null;

  @SerializedName("stream_targets")
  private List<StreamTargetsId> streamTargets = null;

  /**
   * The type of stream being delivered from Wowza Streaming Cloud. The default is &lt;strong&gt;hls-https&lt;/strong&gt;.
   */
  @JsonAdapter(TargetDeliveryProtocolEnum.Adapter.class)
  public enum TargetDeliveryProtocolEnum {
    HTTPS("hls-https"),
    
    HDS("hls-hds");

    private String value;

    TargetDeliveryProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetDeliveryProtocolEnum fromValue(String text) {
      for (TargetDeliveryProtocolEnum b : TargetDeliveryProtocolEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TargetDeliveryProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetDeliveryProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetDeliveryProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TargetDeliveryProtocolEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("target_delivery_protocol")
  private TargetDeliveryProtocolEnum targetDeliveryProtocol = null;

  /**
   * The type of transcoder, either &lt;strong&gt;transcoded&lt;/strong&gt; for streams that are transcoded into adaptive bitrate renditions or &lt;strong&gt;passthrough&lt;/strong&gt; for streams that aren&#39;t processed by the transcoder. The default is &lt;strong&gt;transcoded&lt;/strong&gt;.
   */
  @JsonAdapter(TranscoderTypeEnum.Adapter.class)
  public enum TranscoderTypeEnum {
    TRANSCODED("transcoded"),
    
    PASSTHROUGH("passthrough");

    private String value;

    TranscoderTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TranscoderTypeEnum fromValue(String text) {
      for (TranscoderTypeEnum b : TranscoderTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TranscoderTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TranscoderTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TranscoderTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TranscoderTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("transcoder_type")
  private TranscoderTypeEnum transcoderType = null;

  @SerializedName("updated_at")
  private OffsetDateTime updatedAt = null;

  @SerializedName("use_stream_source")
  private Boolean useStreamSource = null;

  public LiveStream aspectRatioHeight(Integer aspectRatioHeight) {
    this.aspectRatioHeight = aspectRatioHeight;
    return this;
  }

   /**
   * The height, in pixels, of the video source. Should correspond to a widescreen (16:9) or standard (4:3) aspect ratio and be divisible by 8.
   * @return aspectRatioHeight
  **/
  @ApiModelProperty(example = "", value = "The height, in pixels, of the video source. Should correspond to a widescreen (16:9) or standard (4:3) aspect ratio and be divisible by 8.")
  public Integer getAspectRatioHeight() {
    return aspectRatioHeight;
  }

  public void setAspectRatioHeight(Integer aspectRatioHeight) {
    this.aspectRatioHeight = aspectRatioHeight;
  }

  public LiveStream aspectRatioWidth(Integer aspectRatioWidth) {
    this.aspectRatioWidth = aspectRatioWidth;
    return this;
  }

   /**
   * The width, in pixels, of the video source. Should correspond to a widescreen (16:9) or standard (4:3) aspect ratio and be divisible by 8.
   * @return aspectRatioWidth
  **/
  @ApiModelProperty(example = "", value = "The width, in pixels, of the video source. Should correspond to a widescreen (16:9) or standard (4:3) aspect ratio and be divisible by 8.")
  public Integer getAspectRatioWidth() {
    return aspectRatioWidth;
  }

  public void setAspectRatioWidth(Integer aspectRatioWidth) {
    this.aspectRatioWidth = aspectRatioWidth;
  }

  public LiveStream billingMode(BillingModeEnum billingMode) {
    this.billingMode = billingMode;
    return this;
  }

   /**
   * The billing mode for the stream. The default is &lt;strong&gt;pay_as_you_go&lt;/strong&gt;.
   * @return billingMode
  **/
  @ApiModelProperty(example = "", value = "The billing mode for the stream. The default is <strong>pay_as_you_go</strong>.")
  public BillingModeEnum getBillingMode() {
    return billingMode;
  }

  public void setBillingMode(BillingModeEnum billingMode) {
    this.billingMode = billingMode;
  }

  public LiveStream broadcastLocation(BroadcastLocationEnum broadcastLocation) {
    this.broadcastLocation = broadcastLocation;
    return this;
  }

   /**
   * The location of your stream. Choose a location as close as possible to your video source.
   * @return broadcastLocation
  **/
  @ApiModelProperty(example = "", value = "The location of your stream. Choose a location as close as possible to your video source.")
  public BroadcastLocationEnum getBroadcastLocation() {
    return broadcastLocation;
  }

  public void setBroadcastLocation(BroadcastLocationEnum broadcastLocation) {
    this.broadcastLocation = broadcastLocation;
  }

  public LiveStream closedCaptionType(ClosedCaptionTypeEnum closedCaptionType) {
    this.closedCaptionType = closedCaptionType;
    return this;
  }

   /**
   * The type of closed caption data being passed from the source. The default, &lt;strong&gt;none&lt;/strong&gt;, indicates that no data is being provided. &lt;strong&gt;cea&lt;/strong&gt; indicates that a CEA closed captioning data stream is being provided. &lt;strong&gt;on_text&lt;/strong&gt; indicates that an onTextData closed captioning data stream is being provided. &lt;strong&gt;both&lt;/strong&gt; indicates that both CEA and onTextData closed captioning data streams are being provided.
   * @return closedCaptionType
  **/
  @ApiModelProperty(example = "", value = "The type of closed caption data being passed from the source. The default, <strong>none</strong>, indicates that no data is being provided. <strong>cea</strong> indicates that a CEA closed captioning data stream is being provided. <strong>on_text</strong> indicates that an onTextData closed captioning data stream is being provided. <strong>both</strong> indicates that both CEA and onTextData closed captioning data streams are being provided.")
  public ClosedCaptionTypeEnum getClosedCaptionType() {
    return closedCaptionType;
  }

  public void setClosedCaptionType(ClosedCaptionTypeEnum closedCaptionType) {
    this.closedCaptionType = closedCaptionType;
  }

  public LiveStream connectionCode(String connectionCode) {
    this.connectionCode = connectionCode;
    return this;
  }

   /**
   * A six-character, alphanumeric string that allows certain encoders, including Wowza Streaming Engine and the Wowza GoCoder app, to connect with Wowza Streaming Cloud. The code can be used once and expires 24 hours after it&#39;s created.
   * @return connectionCode
  **/
  @ApiModelProperty(example = "", value = "A six-character, alphanumeric string that allows certain encoders, including Wowza Streaming Engine and the Wowza GoCoder app, to connect with Wowza Streaming Cloud. The code can be used once and expires 24 hours after it's created.")
  public String getConnectionCode() {
    return connectionCode;
  }

  public void setConnectionCode(String connectionCode) {
    this.connectionCode = connectionCode;
  }

  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public String getPassword() {
    return password;
  }

  public void setDisableAuthentication(Boolean auth) {
    this.disableAuthentication = auth;
  }

  public Boolean getDisableAuthentication() {
    return disableAuthentication;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public LiveStream connectionCodeExpiresAt(OffsetDateTime connectionCodeExpiresAt) {
    this.connectionCodeExpiresAt = connectionCodeExpiresAt;
    return this;
  }

   /**
   * The date and time that the &lt;em&gt;connection_code&lt;/em&gt; expires.
   * @return connectionCodeExpiresAt
  **/
  @ApiModelProperty(example = "", value = "The date and time that the <em>connection_code</em> expires.")
  public OffsetDateTime getConnectionCodeExpiresAt() {
    return connectionCodeExpiresAt;
  }

  public void setConnectionCodeExpiresAt(OffsetDateTime connectionCodeExpiresAt) {
    this.connectionCodeExpiresAt = connectionCodeExpiresAt;
  }

  public LiveStream createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The date and time that the live stream was created.
   * @return createdAt
  **/
  @ApiModelProperty(example = "", value = "The date and time that the live stream was created.")
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public LiveStream deliveryMethod(DeliveryMethodEnum deliveryMethod) {
    this.deliveryMethod = deliveryMethod;
    return this;
  }

   /**
   * The type of connection between the video source and the transcoder. The default, &lt;strong&gt;push&lt;/strong&gt;, instructs the source to push the stream to the transcoder. &lt;strong&gt;pull&lt;/strong&gt; instructs the transcoder to pull the video from the source. &lt;strong&gt;cdn&lt;/strong&gt; uses a stream source to deliver the stream to the transcoder.
   * @return deliveryMethod
  **/
  @ApiModelProperty(example = "", value = "The type of connection between the video source and the transcoder. The default, <strong>push</strong>, instructs the source to push the stream to the transcoder. <strong>pull</strong> instructs the transcoder to pull the video from the source. <strong>cdn</strong> uses a stream source to deliver the stream to the transcoder.")
  public DeliveryMethodEnum getDeliveryMethod() {
    return deliveryMethod;
  }

  public void setDeliveryMethod(DeliveryMethodEnum deliveryMethod) {
    this.deliveryMethod = deliveryMethod;
  }

  public LiveStream deliveryProtocols(List<String> deliveryProtocols) {
    this.deliveryProtocols = deliveryProtocols;
    return this;
  }

  public LiveStream addDeliveryProtocolsItem(String deliveryProtocolsItem) {
    if (this.deliveryProtocols == null) {
      this.deliveryProtocols = new ArrayList<String>();
    }
    this.deliveryProtocols.add(deliveryProtocolsItem);
    return this;
  }

   /**
   * An array of direct delivery protocols enabled for this live stream. By default, &lt;strong&gt;rtmp&lt;/strong&gt;, &lt;strong&gt;rtsp&lt;/strong&gt;, and &lt;strong&gt;wowz&lt;/strong&gt; are enabled.
   * @return deliveryProtocols
  **/
  @ApiModelProperty(example = "\"\"", value = "An array of direct delivery protocols enabled for this live stream. By default, <strong>rtmp</strong>, <strong>rtsp</strong>, and <strong>wowz</strong> are enabled.")
  public List<String> getDeliveryProtocols() {
    return deliveryProtocols;
  }

  public void setDeliveryProtocols(List<String> deliveryProtocols) {
    this.deliveryProtocols = deliveryProtocols;
  }

  public LiveStream deliveryType(DeliveryTypeEnum deliveryType) {
    this.deliveryType = deliveryType;
    return this;
  }

   /**
   * For streams whose &lt;em&gt;encoder&lt;/em&gt; is &lt;strong&gt;wowza_streaming_engine&lt;/strong&gt;. The default is &lt;strong&gt;multi-bitrate&lt;/strong&gt;, which means you&#39;re sending one or more bitrate renditions from Wowza Streaming Engine directly to a Wowza CDN target without transcoding in Wowza Streaming Cloud. The value &lt;strong&gt;single-bitrate&lt;/strong&gt; means you&#39;re sending a single source stream to Wowza Streaming Cloud for transcoding and/or to deliver the source stream to multiple stream targets in Wowza Streaming Cloud.
   * @return deliveryType
  **/
  @ApiModelProperty(example = "", value = "For streams whose <em>encoder</em> is <strong>wowza_streaming_engine</strong>. The default is <strong>multi-bitrate</strong>, which means you're sending one or more bitrate renditions from Wowza Streaming Engine directly to a Wowza CDN target without transcoding in Wowza Streaming Cloud. The value <strong>single-bitrate</strong> means you're sending a single source stream to Wowza Streaming Cloud for transcoding and/or to deliver the source stream to multiple stream targets in Wowza Streaming Cloud.")
  public DeliveryTypeEnum getDeliveryType() {
    return deliveryType;
  }

  public void setDeliveryType(DeliveryTypeEnum deliveryType) {
    this.deliveryType = deliveryType;
  }

  public LiveStream directPlaybackUrls(HashMap<String,List<PlaybackUrl>> directPlaybackUrls) {
    this.directPlaybackUrls = directPlaybackUrls;
    return this;
  }

  public LiveStream addDirectPlaybackUrlsItem(String name,PlaybackUrl directPlaybackUrlsItem) {
    if (this.directPlaybackUrls == null) {
      this.directPlaybackUrls = new HashMap<String,List<PlaybackUrl>>();
    }
	if ( !this.directPlaybackUrls.containsKey(name) )
		{
		List<PlaybackUrl> newList = new ArrayList<PlaybackUrl>();
		newList.add(directPlaybackUrlsItem);
    		this.directPlaybackUrls.put(name,newList);
		}
	else
		{
		List<PlaybackUrl> current = this.directPlaybackUrls.get(name);
		current.add(directPlaybackUrlsItem);
		this.directPlaybackUrls.put(name,current);
		}
    return this;
  }

   /**
   * An array of direct playback URLs for the live stream&#39;s delivery protocols. Each protocol has a URL for the source and a URL for each output rendition.
   * @return directPlaybackUrls
  **/
  @ApiModelProperty(example = "\"\"", value = "An array of direct playback URLs for the live stream's delivery protocols. Each protocol has a URL for the source and a URL for each output rendition.")
  public HashMap<String,List<PlaybackUrl>> getDirectPlaybackUrls() {
    return directPlaybackUrls;
  }

  public void setDirectPlaybackUrls(HashMap<String,List<PlaybackUrl>> directPlaybackUrls) {
    this.directPlaybackUrls = directPlaybackUrls;
  }

  public LiveStream encoder(EncoderEnum encoder) {
    this.encoder = encoder;
    return this;
  }

   /**
   * The video source for the live stream. Choose the type of camera or encoder you&#39;re using to connect to the Wowza Streaming Cloud transcoder. If your specific device isn&#39;t listed, choose &lt;strong&gt;ipcamera&lt;/strong&gt;, &lt;strong&gt;other_rtmp&lt;/strong&gt;, or &lt;strong&gt;other_rtsp&lt;/strong&gt;.
   * @return encoder
  **/
  @ApiModelProperty(example = "", value = "The video source for the live stream. Choose the type of camera or encoder you're using to connect to the Wowza Streaming Cloud transcoder. If your specific device isn't listed, choose <strong>ipcamera</strong>, <strong>other_rtmp</strong>, or <strong>other_rtsp</strong>.")
  public EncoderEnum getEncoder() {
    return encoder;
  }

  public void setEncoder(EncoderEnum encoder) {
    this.encoder = encoder;
  }

  public LiveStream hostedPage(Boolean hostedPage) {
    this.hostedPage = hostedPage;
    return this;
  }

   /**
   * A web page hosted by Wowza Streaming Cloud that includes a player for the live stream. The default, &lt;strong&gt;true&lt;/strong&gt;, creates a hosted page. Specify &lt;strong&gt;false&lt;/strong&gt; to not create a hosted web page.
   * @return hostedPage
  **/
  @ApiModelProperty(value = "A web page hosted by Wowza Streaming Cloud that includes a player for the live stream. The default, <strong>true</strong>, creates a hosted page. Specify <strong>false</strong> to not create a hosted web page.")
  public Boolean isHostedPage() {
    return hostedPage;
  }

  public void setHostedPage(Boolean hostedPage) {
    this.hostedPage = hostedPage;
  }

  public LiveStream hostedPageDescription(String hostedPageDescription) {
    this.hostedPageDescription = hostedPageDescription;
    return this;
  }

   /**
   * A description that appears on the hosted page below the player. Can&#39;t include custom HTML, JavaScript, or other tags.
   * @return hostedPageDescription
  **/
  @ApiModelProperty(example = "", value = "A description that appears on the hosted page below the player. Can't include custom HTML, JavaScript, or other tags.")
  public String getHostedPageDescription() {
    return hostedPageDescription;
  }

  public void setHostedPageDescription(String hostedPageDescription) {
    this.hostedPageDescription = hostedPageDescription;
  }

  public LiveStream hostedPageLogoImageUrl(String hostedPageLogoImageUrl) {
    this.hostedPageLogoImageUrl = hostedPageLogoImageUrl;
    return this;
  }

   /**
   * The path to a GIF, JPEG, or PNG logo file that appears in the upper-left corner of the hosted page. Logo file must be 2.5 MB or smaller.
   * @return hostedPageLogoImageUrl
  **/
  @ApiModelProperty(example = "", value = "The path to a GIF, JPEG, or PNG logo file that appears in the upper-left corner of the hosted page. Logo file must be 2.5 MB or smaller.")
  public String getHostedPageLogoImageUrl() {
    return hostedPageLogoImageUrl;
  }

  public void setHostedPageLogoImageUrl(String hostedPageLogoImageUrl) {
    this.hostedPageLogoImageUrl = hostedPageLogoImageUrl;
  }

  public LiveStream hostedPageSharingIcons(Boolean hostedPageSharingIcons) {
    this.hostedPageSharingIcons = hostedPageSharingIcons;
    return this;
  }

   /**
   * Icons that let viewers share the stream on Facebook, Google+, Twitter, and by email. The default, &lt;strong&gt;true&lt;/strong&gt;, includes sharing icons on the hosted page. Specify &lt;strong&gt;false&lt;/strong&gt; to omit sharing icons.
   * @return hostedPageSharingIcons
  **/
  @ApiModelProperty(value = "Icons that let viewers share the stream on Facebook, Google+, Twitter, and by email. The default, <strong>true</strong>, includes sharing icons on the hosted page. Specify <strong>false</strong> to omit sharing icons.")
  public Boolean isHostedPageSharingIcons() {
    return hostedPageSharingIcons;
  }

  public void setHostedPageSharingIcons(Boolean hostedPageSharingIcons) {
    this.hostedPageSharingIcons = hostedPageSharingIcons;
  }

  public LiveStream hostedPageTitle(String hostedPageTitle) {
    this.hostedPageTitle = hostedPageTitle;
    return this;
  }

   /**
   * A title for the page that appears above the player. Can&#39;t include custom HTML, JavaScript, or other tags.
   * @return hostedPageTitle
  **/
  @ApiModelProperty(example = "", value = "A title for the page that appears above the player. Can't include custom HTML, JavaScript, or other tags.")
  public String getHostedPageTitle() {
    return hostedPageTitle;
  }

  public void setHostedPageTitle(String hostedPageTitle) {
    this.hostedPageTitle = hostedPageTitle;
  }

  public LiveStream hostedPageUrl(String hostedPageUrl) {
    this.hostedPageUrl = hostedPageUrl;
    return this;
  }

   /**
   * The URL of the Wowza Streaming Cloud-hosted webpage that viewers can visit to watch the stream.
   * @return hostedPageUrl
  **/
  @ApiModelProperty(example = "", value = "The URL of the Wowza Streaming Cloud-hosted webpage that viewers can visit to watch the stream.")
  public String getHostedPageUrl() {
    return hostedPageUrl;
  }

  public void setHostedPageUrl(String hostedPageUrl) {
    this.hostedPageUrl = hostedPageUrl;
  }

  public LiveStream id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The unique alphanumeric string that identifies the live stream.
   * @return id
  **/
  @ApiModelProperty(example = "", value = "The unique alphanumeric string that identifies the live stream.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public LiveStream lowLatency(Boolean lowLatency) {
    this.lowLatency = lowLatency;
    return this;
  }

   /**
   * For streams whose &lt;em&gt;target_delivery_protocol&lt;/em&gt; is &lt;strong&gt;hls-https&lt;/strong&gt;. If &lt;strong&gt;true&lt;/strong&gt;, turns off incoming and sort packet buffers and delivers smaller video packets to the player, which can reduce latency as long as networks can handle the increased overhead. The default is &lt;strong&gt;false&lt;/strong&gt;. &lt;br /&gt;&lt;br /&gt;This parameter only affects streams played over a target whose &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;WowzaStreamTarget&lt;/strong&gt; and whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;. It does &lt;em&gt;not&lt;/em&gt; reduce latency in streams played over a hosted page and is unrelated to Wowza ultra low latency stream targets.
   * @return lowLatency
  **/
  @ApiModelProperty(value = "For streams whose <em>target_delivery_protocol</em> is <strong>hls-https</strong>. If <strong>true</strong>, turns off incoming and sort packet buffers and delivers smaller video packets to the player, which can reduce latency as long as networks can handle the increased overhead. The default is <strong>false</strong>. <br /><br />This parameter only affects streams played over a target whose <em>type</em> is <strong>WowzaStreamTarget</strong> and whose <em>provider</em> is <strong>akamai_cupertino</strong>. It does <em>not</em> reduce latency in streams played over a hosted page and is unrelated to Wowza ultra low latency stream targets.")
  public Boolean isLowLatency() {
    return lowLatency;
  }

  public void setLowLatency(Boolean lowLatency) {
    this.lowLatency = lowLatency;
  }

  public LiveStream name(String name) {
    this.name = name;
    return this;
  }

   /**
   * A descriptive name for the live stream. Maximum 200 characters.
   * @return name
  **/
  @ApiModelProperty(example = "", value = "A descriptive name for the live stream. Maximum 200 characters.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public LiveStream playerCountdown(Boolean playerCountdown) {
    this.playerCountdown = playerCountdown;
    return this;
  }

   /**
   * A clock that appears in the player before the event and counts down to the start of the stream. Specify &lt;strong&gt;true&lt;/strong&gt; to display the countdown clock. The default is &lt;strong&gt;false&lt;/strong&gt;.
   * @return playerCountdown
  **/
  @ApiModelProperty(value = "A clock that appears in the player before the event and counts down to the start of the stream. Specify <strong>true</strong> to display the countdown clock. The default is <strong>false</strong>.")
  public Boolean isPlayerCountdown() {
    return playerCountdown;
  }

  public void setPlayerCountdown(Boolean playerCountdown) {
    this.playerCountdown = playerCountdown;
  }

  public LiveStream playerCountdownAt(OffsetDateTime playerCountdownAt) {
    this.playerCountdownAt = playerCountdownAt;
    return this;
  }

   /**
   * The date and time that the event starts, used by the countdown clock. Specify &lt;strong&gt;YYYY-MM-DD HH:MM:SS&lt;/strong&gt;, where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC.
   * @return playerCountdownAt
  **/
  @ApiModelProperty(example = "", value = "The date and time that the event starts, used by the countdown clock. Specify <strong>YYYY-MM-DD HH:MM:SS</strong>, where <strong>HH</strong> is a 24-hour clock in UTC.")
  public OffsetDateTime getPlayerCountdownAt() {
    return playerCountdownAt;
  }

  public void setPlayerCountdownAt(OffsetDateTime playerCountdownAt) {
    this.playerCountdownAt = playerCountdownAt;
  }

  public LiveStream playerEmbedCode(String playerEmbedCode) {
    this.playerEmbedCode = playerEmbedCode;
    return this;
  }

   /**
   * The HTML code that can be used in an external webpage to host the Wowza Streaming Cloud player.
   * @return playerEmbedCode
  **/
  @ApiModelProperty(example = "", value = "The HTML code that can be used in an external webpage to host the Wowza Streaming Cloud player.")
  public String getPlayerEmbedCode() {
    return playerEmbedCode;
  }

  public void setPlayerEmbedCode(String playerEmbedCode) {
    this.playerEmbedCode = playerEmbedCode;
  }

  public LiveStream playerHdsPlaybackUrl(String playerHdsPlaybackUrl) {
    this.playerHdsPlaybackUrl = playerHdsPlaybackUrl;
    return this;
  }

   /**
   * The address that can be used to configure playback of the stream using the Adobe HDS protocol.
   * @return playerHdsPlaybackUrl
  **/
  @ApiModelProperty(example = "", value = "The address that can be used to configure playback of the stream using the Adobe HDS protocol.")
  public String getPlayerHdsPlaybackUrl() {
    return playerHdsPlaybackUrl;
  }

  public void setPlayerHdsPlaybackUrl(String playerHdsPlaybackUrl) {
    this.playerHdsPlaybackUrl = playerHdsPlaybackUrl;
  }

  public LiveStream playerHlsPlaybackUrl(String playerHlsPlaybackUrl) {
    this.playerHlsPlaybackUrl = playerHlsPlaybackUrl;
    return this;
  }

   /**
   * The address that can be used to configure playback of the stream using the Apple HLS protocol.
   * @return playerHlsPlaybackUrl
  **/
  @ApiModelProperty(example = "", value = "The address that can be used to configure playback of the stream using the Apple HLS protocol.")
  public String getPlayerHlsPlaybackUrl() {
    return playerHlsPlaybackUrl;
  }

  public void setPlayerHlsPlaybackUrl(String playerHlsPlaybackUrl) {
    this.playerHlsPlaybackUrl = playerHlsPlaybackUrl;
  }

  public LiveStream playerId(String playerId) {
    this.playerId = playerId;
    return this;
  }

   /**
   * The unique alphanumeric string that identifies the player.
   * @return playerId
  **/
  @ApiModelProperty(example = "", value = "The unique alphanumeric string that identifies the player.")
  public String getPlayerId() {
    return playerId;
  }

  public void setPlayerId(String playerId) {
    this.playerId = playerId;
  }

  public LiveStream playerLogoImageUrl(String playerLogoImageUrl) {
    this.playerLogoImageUrl = playerLogoImageUrl;
    return this;
  }

   /**
   * The path to a GIF, JPEG, or PNG logo file that appears partially transparent in a corner of the player throughout playback. Logo file must be 2.5 MB or smaller.
   * @return playerLogoImageUrl
  **/
  @ApiModelProperty(example = "", value = "The path to a GIF, JPEG, or PNG logo file that appears partially transparent in a corner of the player throughout playback. Logo file must be 2.5 MB or smaller.")
  public String getPlayerLogoImageUrl() {
    return playerLogoImageUrl;
  }

  public void setPlayerLogoImageUrl(String playerLogoImageUrl) {
    this.playerLogoImageUrl = playerLogoImageUrl;
  }

  public LiveStream playerLogoPosition(PlayerLogoPositionEnum playerLogoPosition) {
    this.playerLogoPosition = playerLogoPosition;
    return this;
  }

   /**
   * The corner of the player in which you want the player logo to appear. The default is &lt;strong&gt;top-left&lt;/strong&gt;.
   * @return playerLogoPosition
  **/
  @ApiModelProperty(example = "", value = "The corner of the player in which you want the player logo to appear. The default is <strong>top-left</strong>.")
  public PlayerLogoPositionEnum getPlayerLogoPosition() {
    return playerLogoPosition;
  }

  public void setPlayerLogoPosition(PlayerLogoPositionEnum playerLogoPosition) {
    this.playerLogoPosition = playerLogoPosition;
  }

  public LiveStream playerResponsive(Boolean playerResponsive) {
    this.playerResponsive = playerResponsive;
    return this;
  }

   /**
   * A player whose size adjusts according to the device on which it&#39;s being viewed. If &lt;strong&gt;true&lt;/strong&gt;, creates a responsive player. If &lt;strong&gt;false&lt;/strong&gt;, specify a &lt;em&gt;player_width&lt;/em&gt;.
   * @return playerResponsive
  **/
  @ApiModelProperty(value = "A player whose size adjusts according to the device on which it's being viewed. If <strong>true</strong>, creates a responsive player. If <strong>false</strong>, specify a <em>player_width</em>.")
  public Boolean isPlayerResponsive() {
    return playerResponsive;
  }

  public void setPlayerResponsive(Boolean playerResponsive) {
    this.playerResponsive = playerResponsive;
  }

  public LiveStream playerType(String playerType) {
    this.playerType = playerType;
    return this;
  }

   /**
   * The player you want to use. Valid values are &lt;strong&gt;original_html5&lt;/strong&gt;, which provides HTML5 playback and falls back to Flash on older browsers, and &lt;strong&gt;wowza_player&lt;/strong&gt;, which provides HTML5 playback over Apple HLS. &lt;strong&gt;wowza_player&lt;/strong&gt; requires that &lt;strong&gt;target_delivery_protocol&lt;/strong&gt; be &lt;strong&gt;hls-https&lt;/strong&gt; and &lt;strong&gt;closed_caption_type&lt;/strong&gt; be &lt;strong&gt;none&lt;/strong&gt;. The default is &lt;strong&gt;original_html5&lt;/strong&gt;.
   * @return playerType
  **/
  @ApiModelProperty(example = "", value = "The player you want to use. Valid values are <strong>original_html5</strong>, which provides HTML5 playback and falls back to Flash on older browsers, and <strong>wowza_player</strong>, which provides HTML5 playback over Apple HLS. <strong>wowza_player</strong> requires that <strong>target_delivery_protocol</strong> be <strong>hls-https</strong> and <strong>closed_caption_type</strong> be <strong>none</strong>. The default is <strong>original_html5</strong>.")
  public String getPlayerType() {
    return playerType;
  }

  public void setPlayerType(String playerType) {
    this.playerType = playerType;
  }

  public LiveStream playerVideoPosterImageUrl(String playerVideoPosterImageUrl) {
    this.playerVideoPosterImageUrl = playerVideoPosterImageUrl;
    return this;
  }

   /**
   * The path to a GIF, JPEG, or PNG poster image that appears in the player before the stream begins. Poster image files must be 2.5 MB or smaller.
   * @return playerVideoPosterImageUrl
  **/
  @ApiModelProperty(example = "", value = "The path to a GIF, JPEG, or PNG poster image that appears in the player before the stream begins. Poster image files must be 2.5 MB or smaller.")
  public String getPlayerVideoPosterImageUrl() {
    return playerVideoPosterImageUrl;
  }

  public void setPlayerVideoPosterImageUrl(String playerVideoPosterImageUrl) {
    this.playerVideoPosterImageUrl = playerVideoPosterImageUrl;
  }

  public LiveStream playerWidth(Integer playerWidth) {
    this.playerWidth = playerWidth;
    return this;
  }

   /**
   * The width, in pixels, of a fixed-size player. The default is &lt;strong&gt;640&lt;/strong&gt;.
   * @return playerWidth
  **/
  @ApiModelProperty(example = "", value = "The width, in pixels, of a fixed-size player. The default is <strong>640</strong>.")
  public Integer getPlayerWidth() {
    return playerWidth;
  }

  public void setPlayerWidth(Integer playerWidth) {
    this.playerWidth = playerWidth;
  }

  public LiveStream recording(Boolean recording) {
    this.recording = recording;
    return this;
  }

   /**
   * If &lt;strong&gt;true&lt;/strong&gt;, creates a recording of the live stream. The default is &lt;strong&gt;false&lt;/strong&gt;.
   * @return recording
  **/
  @ApiModelProperty(value = "If <strong>true</strong>, creates a recording of the live stream. The default is <strong>false</strong>.")
  public Boolean isRecording() {
    return recording;
  }

  public void setRecording(Boolean recording) {
    this.recording = recording;
  }

  public LiveStream sourceConnectionInformation(Object sourceConnectionInformation) {
    this.sourceConnectionInformation = sourceConnectionInformation;
    return this;
  }

   /**
   * Details that you can use to manually configure and connect a video source to the live stream.
   * @return sourceConnectionInformation
  **/
  @ApiModelProperty(example = "\"\"", value = "Details that you can use to manually configure and connect a video source to the live stream.")
  public Object getSourceConnectionInformation() {
    return sourceConnectionInformation;
  }

  public void setSourceConnectionInformation(Object sourceConnectionInformation) {
    this.sourceConnectionInformation = sourceConnectionInformation;
  }

  public LiveStream streamSourceId(String streamSourceId) {
    this.streamSourceId = streamSourceId;
    return this;
  }

   /**
   * The unique alphanumeric string that identifies the stream source, if a stream source is used.
   * @return streamSourceId
  **/
  @ApiModelProperty(example = "", value = "The unique alphanumeric string that identifies the stream source, if a stream source is used.")
  public String getStreamSourceId() {
    return streamSourceId;
  }

  public void setStreamSourceId(String streamSourceId) {
    this.streamSourceId = streamSourceId;
  }

  public LiveStream streamTargets(List<StreamTargetsId> streamTargets) {
    this.streamTargets = streamTargets;
    return this;
  }

  public LiveStream addStreamTargetsItem(StreamTargetsId streamTargetsItem) {
    if (this.streamTargets == null) {
      this.streamTargets = new ArrayList<StreamTargetsId>();
    }
    this.streamTargets.add(streamTargetsItem);
    return this;
  }

   /**
   * An array of unique alphanumeric strings that identify the stream targets used by the live stream.
   * @return streamTargets
  **/
  @ApiModelProperty(example = "\"\"", value = "An array of unique alphanumeric strings that identify the stream targets used by the live stream.")
  public List<StreamTargetsId> getStreamTargets() {
    return streamTargets;
  }

  public void setStreamTargets(List<StreamTargetsId> streamTargets) {
    this.streamTargets = streamTargets;
  }

  public LiveStream targetDeliveryProtocol(TargetDeliveryProtocolEnum targetDeliveryProtocol) {
    this.targetDeliveryProtocol = targetDeliveryProtocol;
    return this;
  }

   /**
   * The type of stream being delivered from Wowza Streaming Cloud. The default is &lt;strong&gt;hls-https&lt;/strong&gt;.
   * @return targetDeliveryProtocol
  **/
  @ApiModelProperty(example = "", value = "The type of stream being delivered from Wowza Streaming Cloud. The default is <strong>hls-https</strong>.")
  public TargetDeliveryProtocolEnum getTargetDeliveryProtocol() {
    return targetDeliveryProtocol;
  }

  public void setTargetDeliveryProtocol(TargetDeliveryProtocolEnum targetDeliveryProtocol) {
    this.targetDeliveryProtocol = targetDeliveryProtocol;
  }

  public LiveStream transcoderType(TranscoderTypeEnum transcoderType) {
    this.transcoderType = transcoderType;
    return this;
  }

   /**
   * The type of transcoder, either &lt;strong&gt;transcoded&lt;/strong&gt; for streams that are transcoded into adaptive bitrate renditions or &lt;strong&gt;passthrough&lt;/strong&gt; for streams that aren&#39;t processed by the transcoder. The default is &lt;strong&gt;transcoded&lt;/strong&gt;.
   * @return transcoderType
  **/
  @ApiModelProperty(example = "", value = "The type of transcoder, either <strong>transcoded</strong> for streams that are transcoded into adaptive bitrate renditions or <strong>passthrough</strong> for streams that aren't processed by the transcoder. The default is <strong>transcoded</strong>.")
  public TranscoderTypeEnum getTranscoderType() {
    return transcoderType;
  }

  public void setTranscoderType(TranscoderTypeEnum transcoderType) {
    this.transcoderType = transcoderType;
  }

  public LiveStream updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * The date and time that the live stream was updated.
   * @return updatedAt
  **/
  @ApiModelProperty(example = "", value = "The date and time that the live stream was updated.")
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public LiveStream useStreamSource(Boolean useStreamSource) {
    this.useStreamSource = useStreamSource;
    return this;
  }

   /**
   * If &lt;strong&gt;true&lt;/strong&gt;, uses a stream source to deliver the stream to Wowza Streaming Cloud. The default, &lt;strong&gt;false&lt;/strong&gt;, pushes directly to Wowza Streaming Cloud.
   * @return useStreamSource
  **/
  @ApiModelProperty(value = "If <strong>true</strong>, uses a stream source to deliver the stream to Wowza Streaming Cloud. The default, <strong>false</strong>, pushes directly to Wowza Streaming Cloud.")
  public Boolean isUseStreamSource() {
    return useStreamSource;
  }

  public void setUseStreamSource(Boolean useStreamSource) {
    this.useStreamSource = useStreamSource;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveStream liveStream = (LiveStream) o;
    return Objects.equals(this.aspectRatioHeight, liveStream.aspectRatioHeight) &&
        Objects.equals(this.aspectRatioWidth, liveStream.aspectRatioWidth) &&
        Objects.equals(this.billingMode, liveStream.billingMode) &&
        Objects.equals(this.broadcastLocation, liveStream.broadcastLocation) &&
        Objects.equals(this.closedCaptionType, liveStream.closedCaptionType) &&
        Objects.equals(this.connectionCode, liveStream.connectionCode) &&
        Objects.equals(this.connectionCodeExpiresAt, liveStream.connectionCodeExpiresAt) &&
        Objects.equals(this.createdAt, liveStream.createdAt) &&
        Objects.equals(this.deliveryMethod, liveStream.deliveryMethod) &&
        Objects.equals(this.deliveryProtocols, liveStream.deliveryProtocols) &&
        Objects.equals(this.deliveryType, liveStream.deliveryType) &&
        Objects.equals(this.directPlaybackUrls, liveStream.directPlaybackUrls) &&
        Objects.equals(this.encoder, liveStream.encoder) &&
        Objects.equals(this.hostedPage, liveStream.hostedPage) &&
        Objects.equals(this.hostedPageDescription, liveStream.hostedPageDescription) &&
        Objects.equals(this.hostedPageLogoImageUrl, liveStream.hostedPageLogoImageUrl) &&
        Objects.equals(this.hostedPageSharingIcons, liveStream.hostedPageSharingIcons) &&
        Objects.equals(this.hostedPageTitle, liveStream.hostedPageTitle) &&
        Objects.equals(this.hostedPageUrl, liveStream.hostedPageUrl) &&
        Objects.equals(this.id, liveStream.id) &&
        Objects.equals(this.lowLatency, liveStream.lowLatency) &&
        Objects.equals(this.name, liveStream.name) &&
        Objects.equals(this.playerCountdown, liveStream.playerCountdown) &&
        Objects.equals(this.playerCountdownAt, liveStream.playerCountdownAt) &&
        Objects.equals(this.playerEmbedCode, liveStream.playerEmbedCode) &&
        Objects.equals(this.playerHdsPlaybackUrl, liveStream.playerHdsPlaybackUrl) &&
        Objects.equals(this.playerHlsPlaybackUrl, liveStream.playerHlsPlaybackUrl) &&
        Objects.equals(this.playerId, liveStream.playerId) &&
        Objects.equals(this.playerLogoImageUrl, liveStream.playerLogoImageUrl) &&
        Objects.equals(this.playerLogoPosition, liveStream.playerLogoPosition) &&
        Objects.equals(this.playerResponsive, liveStream.playerResponsive) &&
        Objects.equals(this.playerType, liveStream.playerType) &&
        Objects.equals(this.playerVideoPosterImageUrl, liveStream.playerVideoPosterImageUrl) &&
        Objects.equals(this.playerWidth, liveStream.playerWidth) &&
        Objects.equals(this.recording, liveStream.recording) &&
        Objects.equals(this.sourceConnectionInformation, liveStream.sourceConnectionInformation) &&
        Objects.equals(this.streamSourceId, liveStream.streamSourceId) &&
        Objects.equals(this.streamTargets, liveStream.streamTargets) &&
        Objects.equals(this.targetDeliveryProtocol, liveStream.targetDeliveryProtocol) &&
        Objects.equals(this.transcoderType, liveStream.transcoderType) &&
        Objects.equals(this.updatedAt, liveStream.updatedAt) &&
        Objects.equals(this.useStreamSource, liveStream.useStreamSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aspectRatioHeight, aspectRatioWidth, billingMode, broadcastLocation, closedCaptionType, connectionCode, connectionCodeExpiresAt, createdAt, deliveryMethod, deliveryProtocols, deliveryType, directPlaybackUrls, encoder, hostedPage, hostedPageDescription, hostedPageLogoImageUrl, hostedPageSharingIcons, hostedPageTitle, hostedPageUrl, id, lowLatency, name, playerCountdown, playerCountdownAt, playerEmbedCode, playerHdsPlaybackUrl, playerHlsPlaybackUrl, playerId, playerLogoImageUrl, playerLogoPosition, playerResponsive, playerType, playerVideoPosterImageUrl, playerWidth, recording, sourceConnectionInformation, streamSourceId, streamTargets, targetDeliveryProtocol, transcoderType, updatedAt, useStreamSource);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveStream {\n");
    
    sb.append("    aspectRatioHeight: ").append(toIndentedString(aspectRatioHeight)).append("\n");
    sb.append("    aspectRatioWidth: ").append(toIndentedString(aspectRatioWidth)).append("\n");
    sb.append("    billingMode: ").append(toIndentedString(billingMode)).append("\n");
    sb.append("    broadcastLocation: ").append(toIndentedString(broadcastLocation)).append("\n");
    sb.append("    closedCaptionType: ").append(toIndentedString(closedCaptionType)).append("\n");
    sb.append("    connectionCode: ").append(toIndentedString(connectionCode)).append("\n");
    sb.append("    connectionCodeExpiresAt: ").append(toIndentedString(connectionCodeExpiresAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deliveryMethod: ").append(toIndentedString(deliveryMethod)).append("\n");
    sb.append("    deliveryProtocols: ").append(toIndentedString(deliveryProtocols)).append("\n");
    sb.append("    deliveryType: ").append(toIndentedString(deliveryType)).append("\n");
    sb.append("    directPlaybackUrls: ").append(toIndentedString(directPlaybackUrls)).append("\n");
    sb.append("    encoder: ").append(toIndentedString(encoder)).append("\n");
    sb.append("    hostedPage: ").append(toIndentedString(hostedPage)).append("\n");
    sb.append("    hostedPageDescription: ").append(toIndentedString(hostedPageDescription)).append("\n");
    sb.append("    hostedPageLogoImageUrl: ").append(toIndentedString(hostedPageLogoImageUrl)).append("\n");
    sb.append("    hostedPageSharingIcons: ").append(toIndentedString(hostedPageSharingIcons)).append("\n");
    sb.append("    hostedPageTitle: ").append(toIndentedString(hostedPageTitle)).append("\n");
    sb.append("    hostedPageUrl: ").append(toIndentedString(hostedPageUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lowLatency: ").append(toIndentedString(lowLatency)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    playerCountdown: ").append(toIndentedString(playerCountdown)).append("\n");
    sb.append("    playerCountdownAt: ").append(toIndentedString(playerCountdownAt)).append("\n");
    sb.append("    playerEmbedCode: ").append(toIndentedString(playerEmbedCode)).append("\n");
    sb.append("    playerHdsPlaybackUrl: ").append(toIndentedString(playerHdsPlaybackUrl)).append("\n");
    sb.append("    playerHlsPlaybackUrl: ").append(toIndentedString(playerHlsPlaybackUrl)).append("\n");
    sb.append("    playerId: ").append(toIndentedString(playerId)).append("\n");
    sb.append("    playerLogoImageUrl: ").append(toIndentedString(playerLogoImageUrl)).append("\n");
    sb.append("    playerLogoPosition: ").append(toIndentedString(playerLogoPosition)).append("\n");
    sb.append("    playerResponsive: ").append(toIndentedString(playerResponsive)).append("\n");
    sb.append("    playerType: ").append(toIndentedString(playerType)).append("\n");
    sb.append("    playerVideoPosterImageUrl: ").append(toIndentedString(playerVideoPosterImageUrl)).append("\n");
    sb.append("    playerWidth: ").append(toIndentedString(playerWidth)).append("\n");
    sb.append("    recording: ").append(toIndentedString(recording)).append("\n");
    sb.append("    sourceConnectionInformation: ").append(toIndentedString(sourceConnectionInformation)).append("\n");
    sb.append("    streamSourceId: ").append(toIndentedString(streamSourceId)).append("\n");
    sb.append("    streamTargets: ").append(toIndentedString(streamTargets)).append("\n");
    sb.append("    targetDeliveryProtocol: ").append(toIndentedString(targetDeliveryProtocol)).append("\n");
    sb.append("    transcoderType: ").append(toIndentedString(transcoderType)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    useStreamSource: ").append(toIndentedString(useStreamSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

