/*
 * This code and all components Â© 2015 - 2019 Wowza Media Systems, LLC. All rights reserved.
 * This code is licensed pursuant to the BSD 3-Clause License.
 * 
 * Wowza Streaming Cloud REST API Reference Documentation
 *
 * OpenAPI spec version: v1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wowza.cloudsdk.client.api;

import com.wowza.cloudsdk.client.ApiCallback;
import com.wowza.cloudsdk.client.ApiClient;
import com.wowza.cloudsdk.client.ApiException;
import com.wowza.cloudsdk.client.ApiResponse;
import com.wowza.cloudsdk.client.Configuration;
import com.wowza.cloudsdk.client.Pair;
import com.wowza.cloudsdk.client.ProgressRequestBody;
import com.wowza.cloudsdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.wowza.cloudsdk.client.model.Transcoder;
import com.wowza.cloudsdk.client.model.TranscoderCreateStreamTargetState;
import com.wowza.cloudsdk.client.model.TranscoderState;
import com.wowza.cloudsdk.client.model.Recording;
import com.wowza.cloudsdk.client.model.Schedule;
import com.wowza.cloudsdk.client.model.LiveStreamThumbnail;
import com.wowza.cloudsdk.client.model.ShmMetrics;
import com.wowza.cloudsdk.client.model.Uptime;
import com.wowza.cloudsdk.client.model.LimitsResponse;
import com.wowza.cloudsdk.client.model.Output;
import com.wowza.cloudsdk.client.model.StreamTargetState;
import com.wowza.cloudsdk.client.model.StreamTargetsState;
import com.wowza.cloudsdk.client.model.TranscoderStreamTargetState;
import com.wowza.cloudsdk.client.model.TranscoderProperty;
import com.wowza.cloudsdk.client.model.OutputCreateInput;
import com.wowza.cloudsdk.client.model.OutputStreamTarget;
import com.wowza.cloudsdk.client.model.OutputStreamTargetCreateInput;
import com.wowza.cloudsdk.client.model.OutputStreamTargetCreateInput;
import com.wowza.cloudsdk.client.model.OutputCreateInput;
import com.wowza.cloudsdk.client.model.Outputs;
import com.wowza.cloudsdk.client.model.Schedules;
import com.wowza.cloudsdk.client.model.TranscoderCreateState;
import com.wowza.cloudsdk.client.model.TranscoderCreateInput;
import com.wowza.cloudsdk.client.model.TranscoderCreateThumbnail;
import com.wowza.cloudsdk.client.model.TranscoderCreateShmMetrics;
import com.wowza.cloudsdk.client.model.TranscoderCreateRecordings;
import com.wowza.cloudsdk.client.model.TranscoderCreateUptime;
import com.wowza.cloudsdk.client.model.StreamTargetCreateState;
import com.wowza.cloudsdk.client.model.OutputStreamTargetInput;
import com.wowza.cloudsdk.client.model.OutputStreamTargets;
import com.wowza.cloudsdk.client.model.TranscoderProperties;
import com.wowza.cloudsdk.client.model.TranscoderPropertyCreateInput;
import com.wowza.cloudsdk.client.model.TranscoderCreateInput;
import com.wowza.cloudsdk.client.model.IndexTranscoder;
import com.wowza.cloudsdk.client.model.Transcoders;
import com.wowza.cloudsdk.client.model.Uptimes;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TranscodersApi {
    private ApiClient apiClient;

    public TranscodersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TranscodersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createTranscoder
     * @param transcoder Provide the details of the transcoder to create in the body of the request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTranscoderCall(TranscoderCreateInput transcoder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = transcoder;

        // create path and map variables
        String localVarPath = "/transcoders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTranscoderValidateBeforeCall(TranscoderCreateInput transcoder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcoder' is set
        if (transcoder == null) {
            throw new ApiException("Missing the required parameter 'transcoder' when calling createTranscoder(Async)");
        }
        

        com.squareup.okhttp.Call call = createTranscoderCall(transcoder, progressListener, progressRequestListener);
        return call;

    }
    /**
     * Create a transcoder
     * This operation creates a transcoder.
     * @param transcoder Provide the details of the transcoder to create in the body of the request. (required)
     * @return Transcoder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Transcoder createTranscoder(Transcoder transcoder) throws ApiException {
	TranscoderCreateInput transcoderInput = new TranscoderCreateInput();
	transcoderInput.setTranscoder(transcoder);
        TranscoderCreateInput resp = createTranscoderTransport(transcoderInput);
        return resp.getTranscoder();
    }

    /**
     * Create a transcoder - Transport wrapped
     * This operation creates a transcoder.
     * @param transcoder Provide the details of the transcoder to create in the body of the request. (required)
     * @return TranscoderCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TranscoderCreateInput createTranscoderTransport(TranscoderCreateInput transcoder) throws ApiException {
        ApiResponse<TranscoderCreateInput> resp = createTranscoderWithHttpInfo(transcoder);
        return resp.getData();
    }

    /**
     * Create a transcoder
     * This operation creates a transcoder.
     * @param transcoder Provide the details of the transcoder to create in the body of the request. (required)
     * @return ApiResponse&lt;Transcoder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TranscoderCreateInput> createTranscoderWithHttpInfo(TranscoderCreateInput transcoder) throws ApiException {
        com.squareup.okhttp.Call call = createTranscoderValidateBeforeCall(transcoder, null, null);
        Type localVarReturnType = new TypeToken<TranscoderCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a transcoder (asynchronously)
     * This operation creates a transcoder.
     * @param transcoder Provide the details of the transcoder to create in the body of the request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTranscoderAsync(TranscoderCreateInput transcoder, final ApiCallback<TranscoderCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTranscoderValidateBeforeCall(transcoder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TranscoderCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createTranscoderOutput
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param output Provide the details of the output rendition to create in the body of the request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTranscoderOutputCall(String transcoderId, OutputCreateInput output, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = output;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs"
            .replaceAll("\\{" + "transcoder_id" + "\\}", apiClient.escapeString(transcoderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTranscoderOutputValidateBeforeCall(String transcoderId, OutputCreateInput output, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling createTranscoderOutput(Async)");
        }
        
        // verify the required parameter 'output' is set
        if (output == null) {
            throw new ApiException("Missing the required parameter 'output' when calling createTranscoderOutput(Async)");
        }
        

        com.squareup.okhttp.Call call = createTranscoderOutputCall(transcoderId, output, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an output
     * This operation creates an output rendition for a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param output Provide the details of the output rendition to create in the body of the request. (required)
     * @return Output
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Output createTranscoderOutput(String transcoderId, Output output) throws ApiException {
	OutputCreateInput input = new OutputCreateInput();
	input.setOutput(output);
        OutputCreateInput resp = createTranscoderOutputTransport(transcoderId, input);
        return resp.getOutput();
    }

    /**
     * Create an output - Transport wrapped
     * This operation creates an output rendition for a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param output Provide the details of the output rendition to create in the body of the request. (required)
     * @return OutputCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OutputCreateInput createTranscoderOutputTransport(String transcoderId, OutputCreateInput output) throws ApiException {
        ApiResponse<OutputCreateInput> resp = createTranscoderOutputWithHttpInfo(transcoderId, output);
        return resp.getData();
    }

    /**
     * Create an output
     * This operation creates an output rendition for a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param output Provide the details of the output rendition to create in the body of the request. (required)
     * @return ApiResponse&lt;Output&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OutputCreateInput> createTranscoderOutputWithHttpInfo(String transcoderId, OutputCreateInput output) throws ApiException {
        com.squareup.okhttp.Call call = createTranscoderOutputValidateBeforeCall(transcoderId, output, null, null);
        Type localVarReturnType = new TypeToken<OutputCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an output (asynchronously)
     * This operation creates an output rendition for a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param output Provide the details of the output rendition to create in the body of the request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTranscoderOutputAsync(String transcoderId, OutputCreateInput output, final ApiCallback<OutputCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTranscoderOutputValidateBeforeCall(transcoderId, output, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OutputCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createTranscoderOutputOutputStreamTarget
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param outputStreamTarget Provide the details of the output stream target to create in the body of the request. Ultra low latency stream targets can&#39;t be added to output renditions. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTranscoderOutputOutputStreamTargetCall(String transcoderId, String outputId, OutputStreamTargetCreateInput outputStreamTarget, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = outputStreamTarget;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets"
            .replaceAll("\\{" + "transcoder_id" + "\\}", apiClient.escapeString(transcoderId.toString()))
            .replaceAll("\\{" + "output_id" + "\\}", apiClient.escapeString(outputId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTranscoderOutputOutputStreamTargetValidateBeforeCall(String transcoderId, String outputId, OutputStreamTargetCreateInput outputStreamTarget, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling createTranscoderOutputOutputStreamTarget(Async)");
        }
        
        // verify the required parameter 'outputId' is set
        if (outputId == null) {
            throw new ApiException("Missing the required parameter 'outputId' when calling createTranscoderOutputOutputStreamTarget(Async)");
        }
        
        // verify the required parameter 'outputStreamTarget' is set
        if (outputStreamTarget == null) {
            throw new ApiException("Missing the required parameter 'outputStreamTarget' when calling createTranscoderOutputOutputStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = createTranscoderOutputOutputStreamTargetCall(transcoderId, outputId, outputStreamTarget, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an output stream target 
     * This operation creates an output stream target. Ultra low latency stream targets can&#39;t be added to output renditions.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param outputStreamTarget Provide the details of the output stream target to create in the body of the request. Ultra low latency stream targets can&#39;t be added to output renditions. (required)
     * @return OutputStreamTarget
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OutputStreamTarget createTranscoderOutputOutputStreamTarget(String transcoderId, String outputId, OutputStreamTarget outputStreamTarget) throws ApiException {
	OutputStreamTargetCreateInput input = new OutputStreamTargetCreateInput();
	input.setOutputStreamTarget(outputStreamTarget);
        OutputStreamTargetCreateInput resp = createTranscoderOutputOutputStreamTargetTransport(transcoderId, outputId, input);
        return resp.getOutputStreamTarget();
    }

    /**
     * Create an output stream target - Transport wrapped
     * This operation creates an output stream target. Ultra low latency stream targets can&#39;t be added to output renditions.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param outputStreamTarget Provide the details of the output stream target to create in the body of the request. Ultra low latency stream targets can&#39;t be added to output renditions. (required)
     * @return OutputStreamTargetCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OutputStreamTargetCreateInput createTranscoderOutputOutputStreamTargetTransport(String transcoderId, String outputId, OutputStreamTargetCreateInput outputStreamTarget) throws ApiException {
        ApiResponse<OutputStreamTargetCreateInput> resp = createTranscoderOutputOutputStreamTargetWithHttpInfo(transcoderId, outputId, outputStreamTarget);
        return resp.getData();
    }

    /**
     * Create an output stream target
     * This operation creates an output stream target. Ultra low latency stream targets can&#39;t be added to output renditions.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param outputStreamTarget Provide the details of the output stream target to create in the body of the request. Ultra low latency stream targets can&#39;t be added to output renditions. (required)
     * @return ApiResponse&lt;OutputStreamTarget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OutputStreamTargetCreateInput> createTranscoderOutputOutputStreamTargetWithHttpInfo(String transcoderId, String outputId, OutputStreamTargetCreateInput outputStreamTarget) throws ApiException {
        com.squareup.okhttp.Call call = createTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, outputStreamTarget, null, null);
        Type localVarReturnType = new TypeToken<OutputStreamTargetCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an output stream target (asynchronously)
     * This operation creates an output stream target. Ultra low latency stream targets can&#39;t be added to output renditions.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param outputStreamTarget Provide the details of the output stream target to create in the body of the request. Ultra low latency stream targets can&#39;t be added to output renditions. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTranscoderOutputOutputStreamTargetAsync(String transcoderId, String outputId, OutputStreamTargetCreateInput outputStreamTarget, final ApiCallback<OutputStreamTargetCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, outputStreamTarget, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OutputStreamTargetCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createTranscoderProperty
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param property Provide the details of the property to configure in the body of the request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createTranscoderPropertyCall(String transcoderId, TranscoderPropertyCreateInput property, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = property;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/properties"
            .replaceAll("\\{" + "transcoder_id" + "\\}", apiClient.escapeString(transcoderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createTranscoderPropertyValidateBeforeCall(String transcoderId, TranscoderPropertyCreateInput property, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling createTranscoderProperty(Async)");
        }
        
        // verify the required parameter 'property' is set
        if (property == null) {
            throw new ApiException("Missing the required parameter 'property' when calling createTranscoderProperty(Async)");
        }
        

        com.squareup.okhttp.Call call = createTranscoderPropertyCall(transcoderId, property, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Configure a property for a transcoder 
     * This operation configures a property for a transcoder. For more information see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-set-advanced-properties-by-using-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Set advanced properties with the Wowza Streaming Cloud REST API&lt;/a&gt;.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param property Provide the details of the property to configure in the body of the request. (required)
     * @return TranscoderProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TranscoderProperty createTranscoderProperty(String transcoderId, TranscoderProperty property) throws ApiException {
	TranscoderPropertyCreateInput input = new TranscoderPropertyCreateInput();
	input.setTranscoderProperty(property);
        TranscoderPropertyCreateInput resp = createTranscoderPropertyTransport(transcoderId, input);
        return resp.getTranscoderProperty();
    }

    /**
     * Configure a property for a transcoder - Transport wrapped
     * This operation configures a property for a transcoder. For more information see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-set-advanced-properties-by-using-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Set advanced properties with the Wowza Streaming Cloud REST API&lt;/a&gt;.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param property Provide the details of the property to configure in the body of the request. (required)
     * @return TranscoderPropertyCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TranscoderPropertyCreateInput createTranscoderPropertyTransport(String transcoderId, TranscoderPropertyCreateInput property) throws ApiException {
        ApiResponse<TranscoderPropertyCreateInput> resp = createTranscoderPropertyWithHttpInfo(transcoderId, property);
        return resp.getData();
    }

    /**
     * Configure a property for a transcoder
     * This operation configures a property for a transcoder. For more information see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-set-advanced-properties-by-using-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Set advanced properties with the Wowza Streaming Cloud REST API&lt;/a&gt;.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param property Provide the details of the property to configure in the body of the request. (required)
     * @return ApiResponse&lt;TranscoderProperty&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TranscoderPropertyCreateInput> createTranscoderPropertyWithHttpInfo(String transcoderId, TranscoderPropertyCreateInput property) throws ApiException {
        com.squareup.okhttp.Call call = createTranscoderPropertyValidateBeforeCall(transcoderId, property, null, null);
        Type localVarReturnType = new TypeToken<TranscoderPropertyCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Configure a property for a transcoder (asynchronously)
     * This operation configures a property for a transcoder. For more information see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-set-advanced-properties-by-using-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Set advanced properties with the Wowza Streaming Cloud REST API&lt;/a&gt;.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param property Provide the details of the property to configure in the body of the request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createTranscoderPropertyAsync(String transcoderId, TranscoderPropertyCreateInput property, final ApiCallback<TranscoderPropertyCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createTranscoderPropertyValidateBeforeCall(transcoderId, property, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TranscoderPropertyCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteTranscoder
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTranscoderCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTranscoderValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTranscoder(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTranscoderCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a transcoder
     * This operation deletes a transcoder, including all of its assigned output renditions and stream targets.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTranscoder(String id) throws ApiException {
        deleteTranscoderWithHttpInfo(id);
    }

    /**
     * Delete a transcoder
     * This operation deletes a transcoder, including all of its assigned output renditions and stream targets.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTranscoderWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteTranscoderValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a transcoder (asynchronously)
     * This operation deletes a transcoder, including all of its assigned output renditions and stream targets.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTranscoderAsync(String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTranscoderValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteTranscoderOutput
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTranscoderOutputCall(String transcoderId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs/{id}"
            .replaceAll("\\{" + "transcoder_id" + "\\}", apiClient.escapeString(transcoderId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTranscoderOutputValidateBeforeCall(String transcoderId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling deleteTranscoderOutput(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTranscoderOutput(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTranscoderOutputCall(transcoderId, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an output
     * This operation deletes an output, including all of its assigned targets.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTranscoderOutput(String transcoderId, String id) throws ApiException {
        deleteTranscoderOutputWithHttpInfo(transcoderId, id);
    }

    /**
     * Delete an output
     * This operation deletes an output, including all of its assigned targets.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTranscoderOutputWithHttpInfo(String transcoderId, String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteTranscoderOutputValidateBeforeCall(transcoderId, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an output (asynchronously)
     * This operation deletes an output, including all of its assigned targets.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTranscoderOutputAsync(String transcoderId, String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTranscoderOutputValidateBeforeCall(transcoderId, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteTranscoderOutputOutputStreamTarget
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTranscoderOutputOutputStreamTargetCall(String transcoderId, String outputId, String streamTargetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{stream_target_id}"
            .replaceAll("\\{" + "transcoder_id" + "\\}", apiClient.escapeString(transcoderId.toString()))
            .replaceAll("\\{" + "output_id" + "\\}", apiClient.escapeString(outputId.toString()))
            .replaceAll("\\{" + "stream_target_id" + "\\}", apiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTranscoderOutputOutputStreamTargetValidateBeforeCall(String transcoderId, String outputId, String streamTargetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling deleteTranscoderOutputOutputStreamTarget(Async)");
        }
        
        // verify the required parameter 'outputId' is set
        if (outputId == null) {
            throw new ApiException("Missing the required parameter 'outputId' when calling deleteTranscoderOutputOutputStreamTarget(Async)");
        }
        
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling deleteTranscoderOutputOutputStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTranscoderOutputOutputStreamTargetCall(transcoderId, outputId, streamTargetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an output stream target
     * This operation deletes an output stream target, including all of its assigned targets.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTranscoderOutputOutputStreamTarget(String transcoderId, String outputId, String streamTargetId) throws ApiException {
        deleteTranscoderOutputOutputStreamTargetWithHttpInfo(transcoderId, outputId, streamTargetId);
    }

    /**
     * Delete an output stream target
     * This operation deletes an output stream target, including all of its assigned targets.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTranscoderOutputOutputStreamTargetWithHttpInfo(String transcoderId, String outputId, String streamTargetId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, streamTargetId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an output stream target (asynchronously)
     * This operation deletes an output stream target, including all of its assigned targets.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTranscoderOutputOutputStreamTargetAsync(String transcoderId, String outputId, String streamTargetId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, streamTargetId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteTranscoderProperty
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique string that identifies the transcoder property. The string contains the section and the key, connected by a dash. For example, cupertino-cupertinoProgramDateTimeOffset. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTranscoderPropertyCall(String transcoderId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/properties/{id}"
            .replaceAll("\\{" + "transcoder_id" + "\\}", apiClient.escapeString(transcoderId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTranscoderPropertyValidateBeforeCall(String transcoderId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling deleteTranscoderProperty(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTranscoderProperty(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteTranscoderPropertyCall(transcoderId, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a transcoder&#39;s property
     * This operation deletes a specific property from a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique string that identifies the transcoder property. The string contains the section and the key, connected by a dash. For example, cupertino-cupertinoProgramDateTimeOffset. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTranscoderProperty(String transcoderId, String id) throws ApiException {
        deleteTranscoderPropertyWithHttpInfo(transcoderId, id);
    }

    /**
     * Delete a transcoder&#39;s property
     * This operation deletes a specific property from a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique string that identifies the transcoder property. The string contains the section and the key, connected by a dash. For example, cupertino-cupertinoProgramDateTimeOffset. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTranscoderPropertyWithHttpInfo(String transcoderId, String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteTranscoderPropertyValidateBeforeCall(transcoderId, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a transcoder&#39;s property (asynchronously)
     * This operation deletes a specific property from a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique string that identifies the transcoder property. The string contains the section and the key, connected by a dash. For example, cupertino-cupertinoProgramDateTimeOffset. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTranscoderPropertyAsync(String transcoderId, String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTranscoderPropertyValidateBeforeCall(transcoderId, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for disableAllStreamTargetsTranscoder
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call disableAllStreamTargetsTranscoderCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{id}/disable_all_stream_targets"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call disableAllStreamTargetsTranscoderValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling disableAllStreamTargetsTranscoder(Async)");
        }
        

        com.squareup.okhttp.Call call = disableAllStreamTargetsTranscoderCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Disable a transcoder&#39;s stream targets
     * This operation disables all of the stream targets assigned to a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return StreamTargetsState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
   public StreamTargetsState disableAllStreamTargetsTranscoder(String id) throws ApiException {
        TranscoderCreateStreamTargetState resp = disableAllStreamTargetsTranscoderTransport(id);
        TranscoderStreamTargetState respTarget = resp.getTranscoderStreamTargetState();
        return respTarget.getStreamTargetState();
    }

    /**
     * Disable a transcoder&#39;s stream targets - Transport wrapped
     * This operation disables all of the stream targets assigned to a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return TranscoderCreateStreamTargetState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TranscoderCreateStreamTargetState disableAllStreamTargetsTranscoderTransport(String id) throws ApiException {
        ApiResponse<TranscoderCreateStreamTargetState> resp = disableAllStreamTargetsTranscoderWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Disable a transcoder&#39;s stream targets
     * This operation disables all of the stream targets assigned to a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;TranscoderCreateStreamTargetState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TranscoderCreateStreamTargetState> disableAllStreamTargetsTranscoderWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = disableAllStreamTargetsTranscoderValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<TranscoderCreateStreamTargetState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Disable a transcoder&#39;s stream targets (asynchronously)
     * This operation disables all of the stream targets assigned to a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call disableAllStreamTargetsTranscoderAsync(String id, final ApiCallback<TranscoderCreateStreamTargetState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = disableAllStreamTargetsTranscoderValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TranscoderCreateStreamTargetState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for disableTranscoderOutputOutputStreamTarget
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call disableTranscoderOutputOutputStreamTargetCall(String transcoderId, String outputId, String streamTargetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{stream_target_id}/disable"
            .replaceAll("\\{" + "transcoder_id" + "\\}", apiClient.escapeString(transcoderId.toString()))
            .replaceAll("\\{" + "output_id" + "\\}", apiClient.escapeString(outputId.toString()))
            .replaceAll("\\{" + "stream_target_id" + "\\}", apiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call disableTranscoderOutputOutputStreamTargetValidateBeforeCall(String transcoderId, String outputId, String streamTargetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling disableTranscoderOutputOutputStreamTarget(Async)");
        }
        
        // verify the required parameter 'outputId' is set
        if (outputId == null) {
            throw new ApiException("Missing the required parameter 'outputId' when calling disableTranscoderOutputOutputStreamTarget(Async)");
        }
        
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling disableTranscoderOutputOutputStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = disableTranscoderOutputOutputStreamTargetCall(transcoderId, outputId, streamTargetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Disable an output stream target - Transport wrapped
     * This operation disables an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return StreamTargetState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetState disableTranscoderOutputOutputStreamTarget(String transcoderId, String outputId, String streamTargetId) throws ApiException {
        StreamTargetCreateState resp = disableTranscoderOutputOutputStreamTargetTransport(transcoderId, outputId, streamTargetId);
        return resp.getStreamTargetState();
    }

    /**
     * Disable an output stream target - Transport wrapped
     * This operation disables an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return StreamTargetCreateState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetCreateState disableTranscoderOutputOutputStreamTargetTransport(String transcoderId, String outputId, String streamTargetId) throws ApiException {
        ApiResponse<StreamTargetCreateState> resp = disableTranscoderOutputOutputStreamTargetWithHttpInfo(transcoderId, outputId, streamTargetId);
        return resp.getData();
    }

    /**
     * Disable an output stream target
     * This operation disables an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;StreamTargetState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamTargetCreateState> disableTranscoderOutputOutputStreamTargetWithHttpInfo(String transcoderId, String outputId, String streamTargetId) throws ApiException {
        com.squareup.okhttp.Call call = disableTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, streamTargetId, null, null);
        Type localVarReturnType = new TypeToken<StreamTargetCreateState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Disable an output stream target (asynchronously)
     * This operation disables an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call disableTranscoderOutputOutputStreamTargetAsync(String transcoderId, String outputId, String streamTargetId, final ApiCallback<StreamTargetCreateState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = disableTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, streamTargetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamTargetCreateState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for enableAllStreamTargetsTranscoder
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call enableAllStreamTargetsTranscoderCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{id}/enable_all_stream_targets"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call enableAllStreamTargetsTranscoderValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling enableAllStreamTargetsTranscoder(Async)");
        }
        

        com.squareup.okhttp.Call call = enableAllStreamTargetsTranscoderCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Enable a transcoder&#39;s stream targets
     * This operation enables all of the stream targets assigned to a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return StreamTargetsState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetsState enableAllStreamTargetsTranscoder(String id) throws ApiException {
        TranscoderCreateStreamTargetState resp = enableAllStreamTargetsTranscoderTransport(id);
	TranscoderStreamTargetState respTarget = resp.getTranscoderStreamTargetState();
	return respTarget.getStreamTargetState();
    }

    /**
     * Enable a transcoder&#39;s stream targets - Transport wrapped
     * This operation enables all of the stream targets assigned to a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return TranscoderCreateStreamTargetState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TranscoderCreateStreamTargetState enableAllStreamTargetsTranscoderTransport(String id) throws ApiException {
        ApiResponse<TranscoderCreateStreamTargetState> resp = enableAllStreamTargetsTranscoderWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Enable a transcoder&#39;s stream targets
     * This operation enables all of the stream targets assigned to a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;TranscoderCreateStreamTargetState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TranscoderCreateStreamTargetState> enableAllStreamTargetsTranscoderWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = enableAllStreamTargetsTranscoderValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<TranscoderCreateStreamTargetState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Enable a transcoder&#39;s stream targets (asynchronously)
     * This operation enables all of the stream targets assigned to a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call enableAllStreamTargetsTranscoderAsync(String id, final ApiCallback<TranscoderCreateStreamTargetState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = enableAllStreamTargetsTranscoderValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TranscoderCreateStreamTargetState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for enableTranscoderOutputOutputStreamTarget
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call enableTranscoderOutputOutputStreamTargetCall(String transcoderId, String outputId, String streamTargetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{stream_target_id}/enable"
            .replaceAll("\\{" + "transcoder_id" + "\\}", apiClient.escapeString(transcoderId.toString()))
            .replaceAll("\\{" + "output_id" + "\\}", apiClient.escapeString(outputId.toString()))
            .replaceAll("\\{" + "stream_target_id" + "\\}", apiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call enableTranscoderOutputOutputStreamTargetValidateBeforeCall(String transcoderId, String outputId, String streamTargetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling enableTranscoderOutputOutputStreamTarget(Async)");
        }
        
        // verify the required parameter 'outputId' is set
        if (outputId == null) {
            throw new ApiException("Missing the required parameter 'outputId' when calling enableTranscoderOutputOutputStreamTarget(Async)");
        }
        
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling enableTranscoderOutputOutputStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = enableTranscoderOutputOutputStreamTargetCall(transcoderId, outputId, streamTargetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Enable an output stream target
     * This operation enables an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return StreamTargetState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetState enableTranscoderOutputOutputStreamTarget(String transcoderId, String outputId, String streamTargetId) throws ApiException {
        StreamTargetCreateState resp = enableTranscoderOutputOutputStreamTargetTransport(transcoderId, outputId, streamTargetId);
        return resp.getStreamTargetState();
    }

    /**
     * Enable an output stream target - Transport wrapped 
     * This operation enables an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return StreamTargetCreateState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetCreateState enableTranscoderOutputOutputStreamTargetTransport(String transcoderId, String outputId, String streamTargetId) throws ApiException {
        ApiResponse<StreamTargetCreateState> resp = enableTranscoderOutputOutputStreamTargetWithHttpInfo(transcoderId, outputId, streamTargetId);
        return resp.getData();
    }

    /**
     * Enable an output stream target
     * This operation enables an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;StreamTargetState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamTargetCreateState> enableTranscoderOutputOutputStreamTargetWithHttpInfo(String transcoderId, String outputId, String streamTargetId) throws ApiException {
        com.squareup.okhttp.Call call = enableTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, streamTargetId, null, null);
        Type localVarReturnType = new TypeToken<StreamTargetCreateState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Enable an output stream target (asynchronously)
     * This operation enables an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call enableTranscoderOutputOutputStreamTargetAsync(String transcoderId, String outputId, String streamTargetId, final ApiCallback<StreamTargetCreateState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = enableTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, streamTargetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamTargetCreateState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for indexUptimes
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexUptimesCall(String transcoderId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/uptimes"
            .replaceAll("\\{" + "transcoder_id" + "\\}", apiClient.escapeString(transcoderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexUptimesValidateBeforeCall(String transcoderId, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling indexUptimes(Async)");
        }
        

        com.squareup.okhttp.Call call = indexUptimesCall(transcoderId, page, perPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch all uptime records for a transcoder
     * This operation shows all of the uptime records for a specific transcoder. An &lt;em&gt;uptime record&lt;/em&gt; identifies a specific transcoding session.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @return List
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Uptime> indexUptimes(String transcoderId, Integer page, Integer perPage) throws ApiException {
        Uptimes resp = indexUptimesTransport(transcoderId, page, perPage);
        return resp.getUptimes();
    }

    /**
     * Fetch all uptime records for a transcoder - Transport wrapped
     * This operation shows all of the uptime records for a specific transcoder. An &lt;em&gt;uptime record&lt;/em&gt; identifies a specific transcoding session.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @return Uptimes
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Uptimes indexUptimesTransport(String transcoderId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Uptimes> resp = indexUptimesWithHttpInfo(transcoderId, page, perPage);
        return resp.getData();
    }

    /**
     * Fetch all uptime records for a transcoder
     * This operation shows all of the uptime records for a specific transcoder. An &lt;em&gt;uptime record&lt;/em&gt; identifies a specific transcoding session.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @return ApiResponse&lt;Uptimes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Uptimes> indexUptimesWithHttpInfo(String transcoderId, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = indexUptimesValidateBeforeCall(transcoderId, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<Uptimes>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch all uptime records for a transcoder (asynchronously)
     * This operation shows all of the uptime records for a specific transcoder. An &lt;em&gt;uptime record&lt;/em&gt; identifies a specific transcoding session.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexUptimesAsync(String transcoderId, Integer page, Integer perPage, final ApiCallback<Uptimes> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexUptimesValidateBeforeCall(transcoderId, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Uptimes>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTranscoderOutputOutputStreamTargets
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTranscoderOutputOutputStreamTargetsCall(String transcoderId, String outputId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets"
            .replaceAll("\\{" + "transcoder_id" + "\\}", apiClient.escapeString(transcoderId.toString()))
            .replaceAll("\\{" + "output_id" + "\\}", apiClient.escapeString(outputId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTranscoderOutputOutputStreamTargetsValidateBeforeCall(String transcoderId, String outputId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling listTranscoderOutputOutputStreamTargets(Async)");
        }
        
        // verify the required parameter 'outputId' is set
        if (outputId == null) {
            throw new ApiException("Missing the required parameter 'outputId' when calling listTranscoderOutputOutputStreamTargets(Async)");
        }
        

        com.squareup.okhttp.Call call = listTranscoderOutputOutputStreamTargetsCall(transcoderId, outputId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch all output stream targets of an output of a transcoder
     * This operation shows the details of all of the output stream targets of an output of a transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @return List
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OutputStreamTarget> listTranscoderOutputOutputStreamTargets(String transcoderId, String outputId) throws ApiException {
        OutputStreamTargets resp = listTranscoderOutputOutputStreamTargetsTransport(transcoderId, outputId);
        return resp.getOutputStreamTargets();
    }

    /**
     * Fetch all output stream targets of an output of a transcoder - Transport wrapped
     * This operation shows the details of all of the output stream targets of an output of a transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @return OutputStreamTargets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OutputStreamTargets listTranscoderOutputOutputStreamTargetsTransport(String transcoderId, String outputId) throws ApiException {
        ApiResponse<OutputStreamTargets> resp = listTranscoderOutputOutputStreamTargetsWithHttpInfo(transcoderId, outputId);
        return resp.getData();
    }

    /**
     * Fetch all output stream targets of an output of a transcoder
     * This operation shows the details of all of the output stream targets of an output of a transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @return ApiResponse&lt;OutputStreamTarget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OutputStreamTargets> listTranscoderOutputOutputStreamTargetsWithHttpInfo(String transcoderId, String outputId) throws ApiException {
        com.squareup.okhttp.Call call = listTranscoderOutputOutputStreamTargetsValidateBeforeCall(transcoderId, outputId, null, null);
        Type localVarReturnType = new TypeToken<OutputStreamTargets>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch all output stream targets of an output of a transcoder (asynchronously)
     * This operation shows the details of all of the output stream targets of an output of a transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTranscoderOutputOutputStreamTargetsAsync(String transcoderId, String outputId, final ApiCallback<OutputStreamTargets> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTranscoderOutputOutputStreamTargetsValidateBeforeCall(transcoderId, outputId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OutputStreamTargets>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTranscoderOutputs
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTranscoderOutputsCall(String transcoderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs"
            .replaceAll("\\{" + "transcoder_id" + "\\}", apiClient.escapeString(transcoderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTranscoderOutputsValidateBeforeCall(String transcoderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling listTranscoderOutputs(Async)");
        }
        

        com.squareup.okhttp.Call call = listTranscoderOutputsCall(transcoderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch all outputs of a transcoder
     * This operation shows the details of all of the output renditions of a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @return List
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Output> listTranscoderOutputs(String transcoderId) throws ApiException {
        Outputs resp = listTranscoderOutputsTransport(transcoderId);
        return resp.getOutputs();
    }

    /**
     * Fetch all outputs of a transcoder - Transport wrapped
     * This operation shows the details of all of the output renditions of a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @return Outputs
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Outputs listTranscoderOutputsTransport(String transcoderId) throws ApiException {
        ApiResponse<Outputs> resp = listTranscoderOutputsWithHttpInfo(transcoderId);
        return resp.getData();
    }

    /**
     * Fetch all outputs of a transcoder
     * This operation shows the details of all of the output renditions of a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;Outputs&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Outputs> listTranscoderOutputsWithHttpInfo(String transcoderId) throws ApiException {
        com.squareup.okhttp.Call call = listTranscoderOutputsValidateBeforeCall(transcoderId, null, null);
        Type localVarReturnType = new TypeToken<Outputs>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch all outputs of a transcoder (asynchronously)
     * This operation shows the details of all of the output renditions of a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTranscoderOutputsAsync(String transcoderId, final ApiCallback<Outputs> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTranscoderOutputsValidateBeforeCall(transcoderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Outputs>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTranscoderProperties
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTranscoderPropertiesCall(String transcoderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/properties"
            .replaceAll("\\{" + "transcoder_id" + "\\}", apiClient.escapeString(transcoderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTranscoderPropertiesValidateBeforeCall(String transcoderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling listTranscoderProperties(Async)");
        }
        

        com.squareup.okhttp.Call call = listTranscoderPropertiesCall(transcoderId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch a transcoder&#39;s properties
     * This operation shows all of the properties of a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @return List
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<TranscoderProperty> listTranscoderProperties(String transcoderId) throws ApiException {
        TranscoderProperties resp = listTranscoderPropertiesTransport(transcoderId);
        return resp.getProperties();
    }

    /**
     * Fetch a transcoder&#39;s properties - Transport wrapped
     * This operation shows all of the properties of a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @return TranscoderProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TranscoderProperties listTranscoderPropertiesTransport(String transcoderId) throws ApiException {
        ApiResponse<TranscoderProperties> resp = listTranscoderPropertiesWithHttpInfo(transcoderId);
        return resp.getData();
    }

    /**
     * Fetch a transcoder&#39;s properties
     * This operation shows all of the properties of a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;TranscoderProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TranscoderProperties> listTranscoderPropertiesWithHttpInfo(String transcoderId) throws ApiException {
        com.squareup.okhttp.Call call = listTranscoderPropertiesValidateBeforeCall(transcoderId, null, null);
        Type localVarReturnType = new TypeToken<TranscoderProperties>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch a transcoder&#39;s properties (asynchronously)
     * This operation shows all of the properties of a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTranscoderPropertiesAsync(String transcoderId, final ApiCallback<TranscoderProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTranscoderPropertiesValidateBeforeCall(transcoderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TranscoderProperties>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTranscoderRecordings
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTranscoderRecordingsCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{id}/recordings"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTranscoderRecordingsValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listTranscoderRecordings(Async)");
        }
        

        com.squareup.okhttp.Call call = listTranscoderRecordingsCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch a transcoder&#39;s recordings
     * This operation shows the details of all of the recordings for a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return List
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Recording> listTranscoderRecordings(String id) throws ApiException {
        TranscoderCreateRecordings resp = listTranscoderRecordingsTransport(id);
        return resp.getRecordings();
    }

    /**
     * Fetch a transcoder&#39;s recordings - Transport wrapped
     * This operation shows the details of all of the recordings for a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return TranscoderCreateRecordings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TranscoderCreateRecordings listTranscoderRecordingsTransport(String id) throws ApiException {
        ApiResponse<TranscoderCreateRecordings> resp = listTranscoderRecordingsWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Fetch a transcoder&#39;s recordings
     * This operation shows the details of all of the recordings for a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;Recording&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TranscoderCreateRecordings> listTranscoderRecordingsWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = listTranscoderRecordingsValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<TranscoderCreateRecordings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch a transcoder&#39;s recordings (asynchronously)
     * This operation shows the details of all of the recordings for a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTranscoderRecordingsAsync(String id, final ApiCallback<TranscoderCreateRecordings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTranscoderRecordingsValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TranscoderCreateRecordings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTranscoderSchedules
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTranscoderSchedulesCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{id}/schedules"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTranscoderSchedulesValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listTranscoderSchedules(Async)");
        }
        

        com.squareup.okhttp.Call call = listTranscoderSchedulesCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch transcoder&#39;s schedules
     * This operation shows the details of all of the schedules for a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return List
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Schedule> listTranscoderSchedules(String id) throws ApiException {
        Schedules resp = listTranscoderSchedulesTransport(id);
        return resp.getSchedules();
    }

    /**
     * Fetch transcoder&#39;s schedules - Transport Wrapped
     * This operation shows the details of all of the schedules for a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return Schedule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Schedules listTranscoderSchedulesTransport(String id) throws ApiException {
        ApiResponse<Schedules> resp = listTranscoderSchedulesWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Fetch transcoder&#39;s schedules
     * This operation shows the details of all of the schedules for a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;Schedules&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Schedules> listTranscoderSchedulesWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = listTranscoderSchedulesValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Schedules>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch transcoder&#39;s schedules (asynchronously)
     * This operation shows the details of all of the schedules for a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTranscoderSchedulesAsync(String id, final ApiCallback<Schedules> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTranscoderSchedulesValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Schedules>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listTranscoders
     * @param filter Restricts the data that gets returned by filtering on one or more values associated with a field. Construct a filter using a two-part expression that specifies the field on which to filter and the logic to use to filter. &lt;br /&gt;&lt;br /&gt;Valid filter fields are **created_at**, **id**, **name**, and **state**. &lt;br /&gt;&lt;br /&gt;Valid filter operators are **eq** (equals), which accepts one value, and **in** (equals any of), which accepts a comma-separated string of values. &lt;br /&gt;&lt;br /&gt;Filters use a zero-based index. &lt;br /&gt;&lt;br /&gt;For example:&lt;br /&gt;&lt;br /&gt; **filter[0][field]&#x3D;state&amp;filter[0][eq]&#x3D;stopped** &lt;br /&gt;&lt;br /&gt;For more information and examples, see the technical article [How to get filtered query results with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-get-filtered-query-results-with-the-wowza-streaming-cloud-rest-api). (optional)
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listTranscodersCall(String filter, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("filter", filter));
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listTranscodersValidateBeforeCall(String filter, Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listTranscodersCall(filter, page, perPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch all transcoders
     * This operation shows limited details for all of your transcoders. For detailed information, fetch a single transcoder.
     * @param filter Restricts the data that gets returned by filtering on one or more values associated with a field. Construct a filter using a two-part expression that specifies the field on which to filter and the logic to use to filter. &lt;br /&gt;&lt;br /&gt;Valid filter fields are **created_at**, **id**, **name**, and **state**. &lt;br /&gt;&lt;br /&gt;Valid filter operators are **eq** (equals), which accepts one value, and **in** (equals any of), which accepts a comma-separated string of values. &lt;br /&gt;&lt;br /&gt;Filters use a zero-based index. &lt;br /&gt;&lt;br /&gt;For example:&lt;br /&gt;&lt;br /&gt; **filter[0][field]&#x3D;state&amp;filter[0][eq]&#x3D;stopped** &lt;br /&gt;&lt;br /&gt;For more information and examples, see the technical article [How to get filtered query results with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-get-filtered-query-results-with-the-wowza-streaming-cloud-rest-api). (optional)
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @return List
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IndexTranscoder> listTranscoders(String filter, Integer page, Integer perPage) throws ApiException {
        Transcoders resp = listTranscodersTransport(filter, page, perPage);
        return resp.getTranscoders();
    }

    /**
     * Fetch all transcoders - Transport Wrapped
     * This operation shows limited details for all of your transcoders. For detailed information, fetch a single transcoder.
     * @param filter Restricts the data that gets returned by filtering on one or more values associated with a field. Construct a filter using a two-part expression that specifies the field on which to filter and the logic to use to filter. &lt;br /&gt;&lt;br /&gt;Valid filter fields are **created_at**, **id**, **name**, and **state**. &lt;br /&gt;&lt;br /&gt;Valid filter operators are **eq** (equals), which accepts one value, and **in** (equals any of), which accepts a comma-separated string of values. &lt;br /&gt;&lt;br /&gt;Filters use a zero-based index. &lt;br /&gt;&lt;br /&gt;For example:&lt;br /&gt;&lt;br /&gt; **filter[0][field]&#x3D;state&amp;filter[0][eq]&#x3D;stopped** &lt;br /&gt;&lt;br /&gt;For more information and examples, see the technical article [How to get filtered query results with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-get-filtered-query-results-with-the-wowza-streaming-cloud-rest-api). (optional)
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @return Transcoders
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Transcoders listTranscodersTransport(String filter, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Transcoders> resp = listTranscodersWithHttpInfo(filter, page, perPage);
        return resp.getData();
    }

    /**
     * Fetch all transcoders
     * This operation shows limited details for all of your transcoders. For detailed information, fetch a single transcoder.
     * @param filter Restricts the data that gets returned by filtering on one or more values associated with a field. Construct a filter using a two-part expression that specifies the field on which to filter and the logic to use to filter. &lt;br /&gt;&lt;br /&gt;Valid filter fields are **created_at**, **id**, **name**, and **state**. &lt;br /&gt;&lt;br /&gt;Valid filter operators are **eq** (equals), which accepts one value, and **in** (equals any of), which accepts a comma-separated string of values. &lt;br /&gt;&lt;br /&gt;Filters use a zero-based index. &lt;br /&gt;&lt;br /&gt;For example:&lt;br /&gt;&lt;br /&gt; **filter[0][field]&#x3D;state&amp;filter[0][eq]&#x3D;stopped** &lt;br /&gt;&lt;br /&gt;For more information and examples, see the technical article [How to get filtered query results with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-get-filtered-query-results-with-the-wowza-streaming-cloud-rest-api). (optional)
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @return ApiResponse&lt;Transcoders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Transcoders> listTranscodersWithHttpInfo(String filter, Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = listTranscodersValidateBeforeCall(filter, page, perPage, null, null);
        Type localVarReturnType = new TypeToken<Transcoders>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch all transcoders (asynchronously)
     * This operation shows limited details for all of your transcoders. For detailed information, fetch a single transcoder.
     * @param filter Restricts the data that gets returned by filtering on one or more values associated with a field. Construct a filter using a two-part expression that specifies the field on which to filter and the logic to use to filter. &lt;br /&gt;&lt;br /&gt;Valid filter fields are **created_at**, **id**, **name**, and **state**. &lt;br /&gt;&lt;br /&gt;Valid filter operators are **eq** (equals), which accepts one value, and **in** (equals any of), which accepts a comma-separated string of values. &lt;br /&gt;&lt;br /&gt;Filters use a zero-based index. &lt;br /&gt;&lt;br /&gt;For example:&lt;br /&gt;&lt;br /&gt; **filter[0][field]&#x3D;state&amp;filter[0][eq]&#x3D;stopped** &lt;br /&gt;&lt;br /&gt;For more information and examples, see the technical article [How to get filtered query results with the Wowza Streaming Cloud REST API](https://www.wowza.com/docs/how-to-get-filtered-query-results-with-the-wowza-streaming-cloud-rest-api). (optional)
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listTranscodersAsync(String filter, Integer page, Integer perPage, final ApiCallback<Transcoders> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listTranscodersValidateBeforeCall(filter, page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Transcoders>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resetTranscoder
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resetTranscoderCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{id}/reset"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resetTranscoderValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resetTranscoder(Async)");
        }
        

        com.squareup.okhttp.Call call = resetTranscoderCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Reset a transcoder
     * This operation resets a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return TranscoderState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TranscoderState resetTranscoder(String id) throws ApiException {
	TranscoderCreateState resp = resetTranscoderTransport(id);
        return resp.getTranscoderState();
    }

    /**
     * Reset a transcoder - Transport Wrapped
     * This operation resets a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return TranscoderCreateState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TranscoderCreateState resetTranscoderTransport(String id) throws ApiException {
        ApiResponse<TranscoderCreateState> resp = resetTranscoderWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Reset a transcoder
     * This operation resets a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;TranscoderCreateState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TranscoderCreateState> resetTranscoderWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = resetTranscoderValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<TranscoderCreateState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Reset a transcoder (asynchronously)
     * This operation resets a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resetTranscoderAsync(String id, final ApiCallback<TranscoderCreateState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resetTranscoderValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TranscoderCreateState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for restartTranscoderOutputOutputStreamTarget
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call restartTranscoderOutputOutputStreamTargetCall(String transcoderId, String outputId, String streamTargetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{stream_target_id}/restart"
            .replaceAll("\\{" + "transcoder_id" + "\\}", apiClient.escapeString(transcoderId.toString()))
            .replaceAll("\\{" + "output_id" + "\\}", apiClient.escapeString(outputId.toString()))
            .replaceAll("\\{" + "stream_target_id" + "\\}", apiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call restartTranscoderOutputOutputStreamTargetValidateBeforeCall(String transcoderId, String outputId, String streamTargetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling restartTranscoderOutputOutputStreamTarget(Async)");
        }
        
        // verify the required parameter 'outputId' is set
        if (outputId == null) {
            throw new ApiException("Missing the required parameter 'outputId' when calling restartTranscoderOutputOutputStreamTarget(Async)");
        }
        
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling restartTranscoderOutputOutputStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = restartTranscoderOutputOutputStreamTargetCall(transcoderId, outputId, streamTargetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Restart an output stream target
     * This operation restarts an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return StreamTargetState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetState restartTranscoderOutputOutputStreamTarget(String transcoderId, String outputId, String streamTargetId) throws ApiException {
        StreamTargetCreateState resp = restartTranscoderOutputOutputStreamTargetTransport(transcoderId, outputId, streamTargetId);
        return resp.getStreamTargetState();
    }

    /**
     * Restart an output stream target - Transport Wrapped
     * This operation restarts an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return StreamTargetCreateState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetCreateState restartTranscoderOutputOutputStreamTargetTransport(String transcoderId, String outputId, String streamTargetId) throws ApiException {
        ApiResponse<StreamTargetCreateState> resp = restartTranscoderOutputOutputStreamTargetWithHttpInfo(transcoderId, outputId, streamTargetId);
        return resp.getData();
    }

    /**
     * Restart an output stream target
     * This operation restarts an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;StreamTargetCreateState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamTargetCreateState> restartTranscoderOutputOutputStreamTargetWithHttpInfo(String transcoderId, String outputId, String streamTargetId) throws ApiException {
        com.squareup.okhttp.Call call = restartTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, streamTargetId, null, null);
        Type localVarReturnType = new TypeToken<StreamTargetCreateState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Restart an output stream target (asynchronously)
     * This operation restarts an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call restartTranscoderOutputOutputStreamTargetAsync(String transcoderId, String outputId, String streamTargetId, final ApiCallback<StreamTargetCreateState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = restartTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, streamTargetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamTargetCreateState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showTranscoder
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showTranscoderCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showTranscoderValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showTranscoder(Async)");
        }
        

        com.squareup.okhttp.Call call = showTranscoderCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch a transcoder
     * This operation shows the details of a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return Transcoder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Transcoder showTranscoder(String id) throws ApiException {
        TranscoderCreateInput resp = showTranscoderTransport(id);
        return resp.getTranscoder();
    }

    /**
     * Fetch a transcoder - Transport Wrapped
     * This operation shows the details of a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return TranscoderCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TranscoderCreateInput showTranscoderTransport(String id) throws ApiException {
        ApiResponse<TranscoderCreateInput> resp = showTranscoderWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Fetch a transcoder
     * This operation shows the details of a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;TranscoderCreateInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TranscoderCreateInput> showTranscoderWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = showTranscoderValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<TranscoderCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch a transcoder (asynchronously)
     * This operation shows the details of a specific transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showTranscoderAsync(String id, final ApiCallback<TranscoderCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showTranscoderValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TranscoderCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showTranscoderOutput
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showTranscoderOutputCall(String transcoderId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs/{id}"
            .replaceAll("\\{" + "transcoder_id" + "\\}", apiClient.escapeString(transcoderId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showTranscoderOutputValidateBeforeCall(String transcoderId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling showTranscoderOutput(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showTranscoderOutput(Async)");
        }
        

        com.squareup.okhttp.Call call = showTranscoderOutputCall(transcoderId, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch an output
     * This operation shows the details of a specific output rendition for a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @return Output
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Output showTranscoderOutput(String transcoderId, String id) throws ApiException {
        OutputCreateInput resp = showTranscoderOutputTransport(transcoderId, id);
        return resp.getOutput();
    }

    /**
     * Fetch an output - Transport Wrapped
     * This operation shows the details of a specific output rendition for a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @return OutputCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OutputCreateInput showTranscoderOutputTransport(String transcoderId, String id) throws ApiException {
        ApiResponse<OutputCreateInput> resp = showTranscoderOutputWithHttpInfo(transcoderId, id);
        return resp.getData();
    }

    /**
     * Fetch an output
     * This operation shows the details of a specific output rendition for a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @return ApiResponse&lt;OutputCreateInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OutputCreateInput> showTranscoderOutputWithHttpInfo(String transcoderId, String id) throws ApiException {
        com.squareup.okhttp.Call call = showTranscoderOutputValidateBeforeCall(transcoderId, id, null, null);
        Type localVarReturnType = new TypeToken<OutputCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch an output (asynchronously)
     * This operation shows the details of a specific output rendition for a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showTranscoderOutputAsync(String transcoderId, String id, final ApiCallback<OutputCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showTranscoderOutputValidateBeforeCall(transcoderId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OutputCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showTranscoderOutputOutputStreamTarget
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showTranscoderOutputOutputStreamTargetCall(String transcoderId, String outputId, String streamTargetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{stream_target_id}"
            .replaceAll("\\{" + "transcoder_id" + "\\}", apiClient.escapeString(transcoderId.toString()))
            .replaceAll("\\{" + "output_id" + "\\}", apiClient.escapeString(outputId.toString()))
            .replaceAll("\\{" + "stream_target_id" + "\\}", apiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showTranscoderOutputOutputStreamTargetValidateBeforeCall(String transcoderId, String outputId, String streamTargetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling showTranscoderOutputOutputStreamTarget(Async)");
        }
        
        // verify the required parameter 'outputId' is set
        if (outputId == null) {
            throw new ApiException("Missing the required parameter 'outputId' when calling showTranscoderOutputOutputStreamTarget(Async)");
        }
        
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling showTranscoderOutputOutputStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = showTranscoderOutputOutputStreamTargetCall(transcoderId, outputId, streamTargetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch an output stream target
     * This operation shows the details of an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return OutputStreamTarget
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OutputStreamTarget showTranscoderOutputOutputStreamTarget(String transcoderId, String outputId, String streamTargetId) throws ApiException {
        OutputStreamTargetInput resp = showTranscoderOutputOutputStreamTargetTransport(transcoderId, outputId, streamTargetId);
        return resp.getOutputStreamTarget();
    }

    /**
     * Fetch an output stream target - Transport Wrapped
     * This operation shows the details of an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return OutputStreamTargetInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OutputStreamTargetInput showTranscoderOutputOutputStreamTargetTransport(String transcoderId, String outputId, String streamTargetId) throws ApiException {
        ApiResponse<OutputStreamTargetInput> resp = showTranscoderOutputOutputStreamTargetWithHttpInfo(transcoderId, outputId, streamTargetId);
        return resp.getData();
    }

    /**
     * Fetch an output stream target
     * This operation shows the details of an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;OutputStreamTargetInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OutputStreamTargetInput> showTranscoderOutputOutputStreamTargetWithHttpInfo(String transcoderId, String outputId, String streamTargetId) throws ApiException {
        com.squareup.okhttp.Call call = showTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, streamTargetId, null, null);
        Type localVarReturnType = new TypeToken<OutputStreamTargetInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch an output stream target (asynchronously)
     * This operation shows the details of an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showTranscoderOutputOutputStreamTargetAsync(String transcoderId, String outputId, String streamTargetId, final ApiCallback<OutputStreamTargetInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, streamTargetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OutputStreamTargetInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showTranscoderProperty
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique string that identifies the transcoder property. The string contains the section and the key, connected by a dash. For example, cupertino-cupertinoProgramDateTimeOffset. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showTranscoderPropertyCall(String transcoderId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/properties/{id}"
            .replaceAll("\\{" + "transcoder_id" + "\\}", apiClient.escapeString(transcoderId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showTranscoderPropertyValidateBeforeCall(String transcoderId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling showTranscoderProperty(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showTranscoderProperty(Async)");
        }
        

        com.squareup.okhttp.Call call = showTranscoderPropertyCall(transcoderId, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch a property for a transcoder
     * This operation shows the details of a specific property for a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique string that identifies the transcoder property. The string contains the section and the key, connected by a dash. For example, cupertino-cupertinoProgramDateTimeOffset. (required)
     * @return TranscoderProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TranscoderProperty showTranscoderProperty(String transcoderId, String id) throws ApiException {
        TranscoderPropertyCreateInput resp = showTranscoderPropertyTransport(transcoderId, id);
        return resp.getTranscoderProperty();
    }

    /**
     * Fetch a property for a transcoder - Transport Wrapped
     * This operation shows the details of a specific property for a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique string that identifies the transcoder property. The string contains the section and the key, connected by a dash. For example, cupertino-cupertinoProgramDateTimeOffset. (required)
     * @return TranscoderPropertyCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TranscoderPropertyCreateInput showTranscoderPropertyTransport(String transcoderId, String id) throws ApiException {
        ApiResponse<TranscoderPropertyCreateInput> resp = showTranscoderPropertyWithHttpInfo(transcoderId, id);
        return resp.getData();
    }

    /**
     * Fetch a property for a transcoder
     * This operation shows the details of a specific property for a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique string that identifies the transcoder property. The string contains the section and the key, connected by a dash. For example, cupertino-cupertinoProgramDateTimeOffset. (required)
     * @return ApiResponse&lt;TranscoderPropertyCreateInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TranscoderPropertyCreateInput> showTranscoderPropertyWithHttpInfo(String transcoderId, String id) throws ApiException {
        com.squareup.okhttp.Call call = showTranscoderPropertyValidateBeforeCall(transcoderId, id, null, null);
        Type localVarReturnType = new TypeToken<TranscoderPropertyCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch a property for a transcoder (asynchronously)
     * This operation shows the details of a specific property for a specific transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique string that identifies the transcoder property. The string contains the section and the key, connected by a dash. For example, cupertino-cupertinoProgramDateTimeOffset. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showTranscoderPropertyAsync(String transcoderId, String id, final ApiCallback<TranscoderPropertyCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showTranscoderPropertyValidateBeforeCall(transcoderId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TranscoderPropertyCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showTranscoderState
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showTranscoderStateCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{id}/state"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showTranscoderStateValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showTranscoderState(Async)");
        }
        

        com.squareup.okhttp.Call call = showTranscoderStateCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch the state and uptime ID of a transcoder
     * This operation shows the current state and uptime ID of a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return TranscoderState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TranscoderState showTranscoderState(String id) throws ApiException {
        TranscoderCreateState resp = showTranscoderStateTransport(id);
        return resp.getTranscoderState();
    }

    /**
     * Fetch the state and uptime ID of a transcoder - Transport Wrapped
     * This operation shows the current state and uptime ID of a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return TranscoderCreateState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TranscoderCreateState showTranscoderStateTransport(String id) throws ApiException {
        ApiResponse<TranscoderCreateState> resp = showTranscoderStateWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Fetch the state and uptime ID of a transcoder
     * This operation shows the current state and uptime ID of a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;TranscoderCreateState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TranscoderCreateState> showTranscoderStateWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = showTranscoderStateValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<TranscoderCreateState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch the state and uptime ID of a transcoder (asynchronously)
     * This operation shows the current state and uptime ID of a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showTranscoderStateAsync(String id, final ApiCallback<TranscoderCreateState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showTranscoderStateValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TranscoderCreateState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showTranscoderStats
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showTranscoderStatsCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{id}/stats"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showTranscoderStatsValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showTranscoderStats(Async)");
        }
        

        com.squareup.okhttp.Call call = showTranscoderStatsCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch statistics for a current transcoder
     * This operation responds with a hash of metrics (keys) for a currently running transcoder. Each key has a &lt;strong&gt;status&lt;/strong&gt;, &lt;strong&gt;text&lt;/strong&gt; (description), &lt;strong&gt;units&lt;/strong&gt;, and &lt;strong&gt;value&lt;/strong&gt;.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ShmMetrics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShmMetrics showTranscoderStats(String id) throws ApiException {
        TranscoderCreateShmMetrics resp = showTranscoderStatsTransport(id);
        return resp.getTranscoderShmMetrics();
    }

    /**
     * Fetch statistics for a current transcoder - Transport Wrapped
     * This operation responds with a hash of metrics (keys) for a currently running transcoder. Each key has a &lt;strong&gt;status&lt;/strong&gt;, &lt;strong&gt;text&lt;/strong&gt; (description), &lt;strong&gt;units&lt;/strong&gt;, and &lt;strong&gt;value&lt;/strong&gt;.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return TranscoderCreateShmMetrics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TranscoderCreateShmMetrics showTranscoderStatsTransport(String id) throws ApiException {
        ApiResponse<TranscoderCreateShmMetrics> resp = showTranscoderStatsWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Fetch statistics for a current transcoder
     * This operation responds with a hash of metrics (keys) for a currently running transcoder. Each key has a &lt;strong&gt;status&lt;/strong&gt;, &lt;strong&gt;text&lt;/strong&gt; (description), &lt;strong&gt;units&lt;/strong&gt;, and &lt;strong&gt;value&lt;/strong&gt;.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;TranscoderCreateShmMetrics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TranscoderCreateShmMetrics> showTranscoderStatsWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = showTranscoderStatsValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<TranscoderCreateShmMetrics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch statistics for a current transcoder (asynchronously)
     * This operation responds with a hash of metrics (keys) for a currently running transcoder. Each key has a &lt;strong&gt;status&lt;/strong&gt;, &lt;strong&gt;text&lt;/strong&gt; (description), &lt;strong&gt;units&lt;/strong&gt;, and &lt;strong&gt;value&lt;/strong&gt;.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showTranscoderStatsAsync(String id, final ApiCallback<TranscoderCreateShmMetrics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showTranscoderStatsValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TranscoderCreateShmMetrics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showTranscoderThumbnailUrl
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showTranscoderThumbnailUrlCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{id}/thumbnail_url"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showTranscoderThumbnailUrlValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showTranscoderThumbnailUrl(Async)");
        }
        

        com.squareup.okhttp.Call call = showTranscoderThumbnailUrlCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch the thumbnail URL of a transcoder
     * This operation shows the thumbnail URL of a started transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return LiveStreamThumbnail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveStreamThumbnail showTranscoderThumbnailUrl(String id) throws ApiException {
        TranscoderCreateThumbnail resp = showTranscoderThumbnailUrlTransport(id);
        return resp.getTranscoderThumbnailUrl();
    }

    /**
     * Fetch the thumbnail URL of a transcoder - Transport Wrapped
     * This operation shows the thumbnail URL of a started transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return TranscoderCreateThumbnail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TranscoderCreateThumbnail showTranscoderThumbnailUrlTransport(String id) throws ApiException {
        ApiResponse<TranscoderCreateThumbnail> resp = showTranscoderThumbnailUrlWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Fetch the thumbnail URL of a transcoder
     * This operation shows the thumbnail URL of a started transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;TranscoderCreateThumbnail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TranscoderCreateThumbnail> showTranscoderThumbnailUrlWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = showTranscoderThumbnailUrlValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<TranscoderCreateThumbnail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch the thumbnail URL of a transcoder (asynchronously)
     * This operation shows the thumbnail URL of a started transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showTranscoderThumbnailUrlAsync(String id, final ApiCallback<TranscoderCreateThumbnail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showTranscoderThumbnailUrlValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TranscoderCreateThumbnail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showUptime
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showUptimeCall(String transcoderId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/uptimes/{id}"
            .replaceAll("\\{" + "transcoder_id" + "\\}", apiClient.escapeString(transcoderId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showUptimeValidateBeforeCall(String transcoderId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling showUptime(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showUptime(Async)");
        }
        

        com.squareup.okhttp.Call call = showUptimeCall(transcoderId, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch an uptime record
     * This operation shows the details of a specific uptime record for a specific transcoder. An &lt;em&gt;uptime record&lt;/em&gt; identifies a transcoding session.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @return Uptime
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Uptime showUptime(String transcoderId, String id) throws ApiException {
        TranscoderCreateUptime resp = showUptimeTransport(transcoderId, id);
        return resp.getTranscoderUptime();
    }

    /**
     * Fetch an uptime record - Transport Wrapped
     * This operation shows the details of a specific uptime record for a specific transcoder. An &lt;em&gt;uptime record&lt;/em&gt; identifies a transcoding session.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @return TranscoderCreateUptime
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TranscoderCreateUptime showUptimeTransport(String transcoderId, String id) throws ApiException {
        ApiResponse<TranscoderCreateUptime> resp = showUptimeWithHttpInfo(transcoderId, id);
        return resp.getData();
    }

    /**
     * Fetch an uptime record
     * This operation shows the details of a specific uptime record for a specific transcoder. An &lt;em&gt;uptime record&lt;/em&gt; identifies a transcoding session.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @return ApiResponse&lt;TranscoderCreateUptime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TranscoderCreateUptime> showUptimeWithHttpInfo(String transcoderId, String id) throws ApiException {
        com.squareup.okhttp.Call call = showUptimeValidateBeforeCall(transcoderId, id, null, null);
        Type localVarReturnType = new TypeToken<TranscoderCreateUptime>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch an uptime record (asynchronously)
     * This operation shows the details of a specific uptime record for a specific transcoder. An &lt;em&gt;uptime record&lt;/em&gt; identifies a transcoding session.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showUptimeAsync(String transcoderId, String id, final ApiCallback<TranscoderCreateUptime> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showUptimeValidateBeforeCall(transcoderId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TranscoderCreateUptime>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showUptimeMetricsCurrent
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @param fields A comma-separated list of fields to return. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showUptimeMetricsCurrentCall(String transcoderId, String id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/uptimes/{id}/metrics/current"
            .replaceAll("\\{" + "transcoder_id" + "\\}", apiClient.escapeString(transcoderId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showUptimeMetricsCurrentValidateBeforeCall(String transcoderId, String id, String fields, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling showUptimeMetricsCurrent(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showUptimeMetricsCurrent(Async)");
        }
        

        com.squareup.okhttp.Call call = showUptimeMetricsCurrentCall(transcoderId, id, fields, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch current stream health metrics for an active transcoder
     * This operation returns a snapshot of the current source connection and processing details of an active (running) transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @param fields A comma-separated list of fields to return. (optional)
     * @return LimitsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LimitsResponse showUptimeMetricsCurrent(String transcoderId, String id, String fields) throws ApiException {
        ApiResponse<LimitsResponse> resp = showUptimeMetricsCurrentWithHttpInfo(transcoderId, id, fields);
        return resp.getData();
    }

    /**
     * Fetch current stream health metrics for an active transcoder
     * This operation returns a snapshot of the current source connection and processing details of an active (running) transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @param fields A comma-separated list of fields to return. (optional)
     * @return ApiResponse&lt;LimitsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LimitsResponse> showUptimeMetricsCurrentWithHttpInfo(String transcoderId, String id, String fields) throws ApiException {
        com.squareup.okhttp.Call call = showUptimeMetricsCurrentValidateBeforeCall(transcoderId, id, fields, null, null);
        Type localVarReturnType = new TypeToken<LimitsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch current stream health metrics for an active transcoder (asynchronously)
     * This operation returns a snapshot of the current source connection and processing details of an active (running) transcoder.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @param fields A comma-separated list of fields to return. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showUptimeMetricsCurrentAsync(String transcoderId, String id, String fields, final ApiCallback<LimitsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showUptimeMetricsCurrentValidateBeforeCall(transcoderId, id, fields, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LimitsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showUptimeMetricsHistoric
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @param fields A comma-separated list of fields to return. (optional)
     * @param from The start of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param to The end of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showUptimeMetricsHistoricCall(String transcoderId, String id, String fields, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/uptimes/{id}/metrics/historic"
            .replaceAll("\\{" + "transcoder_id" + "\\}", apiClient.escapeString(transcoderId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showUptimeMetricsHistoricValidateBeforeCall(String transcoderId, String id, String fields, String from, String to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling showUptimeMetricsHistoric(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showUptimeMetricsHistoric(Async)");
        }
        

        com.squareup.okhttp.Call call = showUptimeMetricsHistoricCall(transcoderId, id, fields, from, to, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch historic stream health metrics for a transcoder
     * This operation shows the historic source connection and processing details for a transcoding session (uptime record). The transcoder can be running or stopped. Metrics are recorded every 20 seconds.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @param fields A comma-separated list of fields to return. (optional)
     * @param from The start of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param to The end of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @return LimitsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LimitsResponse showUptimeMetricsHistoric(String transcoderId, String id, String fields, String from, String to) throws ApiException {
        ApiResponse<LimitsResponse> resp = showUptimeMetricsHistoricWithHttpInfo(transcoderId, id, fields, from, to);
        return resp.getData();
    }

    /**
     * Fetch historic stream health metrics for a transcoder
     * This operation shows the historic source connection and processing details for a transcoding session (uptime record). The transcoder can be running or stopped. Metrics are recorded every 20 seconds.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @param fields A comma-separated list of fields to return. (optional)
     * @param from The start of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param to The end of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @return ApiResponse&lt;LimitsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LimitsResponse> showUptimeMetricsHistoricWithHttpInfo(String transcoderId, String id, String fields, String from, String to) throws ApiException {
        com.squareup.okhttp.Call call = showUptimeMetricsHistoricValidateBeforeCall(transcoderId, id, fields, from, to, null, null);
        Type localVarReturnType = new TypeToken<LimitsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch historic stream health metrics for a transcoder (asynchronously)
     * This operation shows the historic source connection and processing details for a transcoding session (uptime record). The transcoder can be running or stopped. Metrics are recorded every 20 seconds.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the uptime record. (required)
     * @param fields A comma-separated list of fields to return. (optional)
     * @param from The start of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param to The end of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showUptimeMetricsHistoricAsync(String transcoderId, String id, String fields, String from, String to, final ApiCallback<LimitsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showUptimeMetricsHistoricValidateBeforeCall(transcoderId, id, fields, from, to, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LimitsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startTranscoder
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startTranscoderCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{id}/start"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startTranscoderValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling startTranscoder(Async)");
        }
        

        com.squareup.okhttp.Call call = startTranscoderCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Start a transcoder
     * This operation starts a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return TranscoderState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TranscoderState startTranscoder(String id) throws ApiException {
        TranscoderCreateState resp = startTranscoderTransport(id);
        return resp.getTranscoderState();
    }

    /**
     * Start a transcoder - Transport Wrapped
     * This operation starts a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return TranscoderCreateState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TranscoderCreateState startTranscoderTransport(String id) throws ApiException {
        ApiResponse<TranscoderCreateState> resp = startTranscoderWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Start a transcoder
     * This operation starts a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;TranscoderCreateState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TranscoderCreateState> startTranscoderWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = startTranscoderValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<TranscoderCreateState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start a transcoder (asynchronously)
     * This operation starts a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startTranscoderAsync(String id, final ApiCallback<TranscoderCreateState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startTranscoderValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TranscoderCreateState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopTranscoder
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopTranscoderCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transcoders/{id}/stop"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopTranscoderValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling stopTranscoder(Async)");
        }
        

        com.squareup.okhttp.Call call = stopTranscoderCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Stop a transcoder
     * This operation stops a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return TranscoderState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TranscoderState stopTranscoder(String id) throws ApiException {
	TranscoderCreateState resp = stopTranscoderTransport(id);
        return resp.getTranscoderState();
    }

    /**
     * Stop a transcoder - Transport Wrapped
     * This operation stops a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return TranscoderCreateState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TranscoderCreateState stopTranscoderTransport(String id) throws ApiException {
        ApiResponse<TranscoderCreateState> resp = stopTranscoderWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Stop a transcoder
     * This operation stops a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @return ApiResponse&lt;TranscoderCreateState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TranscoderCreateState> stopTranscoderWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = stopTranscoderValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<TranscoderCreateState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stop a transcoder (asynchronously)
     * This operation stops a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopTranscoderAsync(String id, final ApiCallback<TranscoderCreateState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopTranscoderValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TranscoderCreateState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTranscoder
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param transcoder Provide the details of the transcoder to update in the body of the request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTranscoderCall(String id, TranscoderCreateInput transcoder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = transcoder;

        // create path and map variables
        String localVarPath = "/transcoders/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTranscoderValidateBeforeCall(String id, TranscoderCreateInput transcoder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTranscoder(Async)");
        }
        
        // verify the required parameter 'transcoder' is set
        if (transcoder == null) {
            throw new ApiException("Missing the required parameter 'transcoder' when calling updateTranscoder(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTranscoderCall(id, transcoder, progressListener, progressRequestListener);
        return call;

    }

    public Transcoder updateTranscoder(String id, Transcoder transcoder) throws ApiException {
	TranscoderCreateInput input = new TranscoderCreateInput();
	input.setTranscoder(transcoder);
        TranscoderCreateInput resp = updateTranscoder(id, input);
        return resp.getTranscoder();
    }

    /**
     * Update a transcoder
     * This operation updates a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param transcoder Provide the details of the transcoder to update in the body of the request. (required)
     * @return Transcoder
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TranscoderCreateInput updateTranscoder(String id, TranscoderCreateInput transcoder) throws ApiException {
        ApiResponse<TranscoderCreateInput> resp = updateTranscoderWithHttpInfo(id, transcoder);
        return resp.getData();
    }

    /**
     * Update a transcoder
     * This operation updates a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param transcoder Provide the details of the transcoder to update in the body of the request. (required)
     * @return ApiResponse&lt;Transcoder&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TranscoderCreateInput> updateTranscoderWithHttpInfo(String id, TranscoderCreateInput transcoder) throws ApiException {
        com.squareup.okhttp.Call call = updateTranscoderValidateBeforeCall(id, transcoder, null, null);
        Type localVarReturnType = new TypeToken<TranscoderCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a transcoder (asynchronously)
     * This operation updates a transcoder.
     * @param id The unique alphanumeric string that identifies the transcoder. (required)
     * @param transcoder Provide the details of the transcoder to update in the body of the request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTranscoderAsync(String id, TranscoderCreateInput transcoder, final ApiCallback<TranscoderCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTranscoderValidateBeforeCall(id, transcoder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TranscoderCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTranscoderOutput
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param output Provide the details of the output rendition to update in the body of the request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTranscoderOutputCall(String transcoderId, String id, OutputCreateInput output, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = output;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs/{id}"
            .replaceAll("\\{" + "transcoder_id" + "\\}", apiClient.escapeString(transcoderId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTranscoderOutputValidateBeforeCall(String transcoderId, String id, OutputCreateInput output, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling updateTranscoderOutput(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateTranscoderOutput(Async)");
        }
        
        // verify the required parameter 'output' is set
        if (output == null) {
            throw new ApiException("Missing the required parameter 'output' when calling updateTranscoderOutput(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTranscoderOutputCall(transcoderId, id, output, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an output
     * This operation updates an output rendition.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param output Provide the details of the output rendition to update in the body of the request. (required)
     * @return Output
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Output updateTranscoderOutput(String transcoderId, String id, Output output) throws ApiException {
	OutputCreateInput input = new OutputCreateInput();
	input.setOutput(output);
        OutputCreateInput resp = updateTranscoderOutputTransport(transcoderId, id, input);
        return resp.getOutput();
    }

    /**
     * Update an output - Transport Wrapped
     * This operation updates an output rendition.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param output Provide the details of the output rendition to update in the body of the request. (required)
     * @return OutputCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OutputCreateInput updateTranscoderOutputTransport(String transcoderId, String id, OutputCreateInput output) throws ApiException {
        ApiResponse<OutputCreateInput> resp = updateTranscoderOutputWithHttpInfo(transcoderId, id, output);
        return resp.getData();
    }

    /**
     * Update an output
     * This operation updates an output rendition.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param output Provide the details of the output rendition to update in the body of the request. (required)
     * @return ApiResponse&lt;OutputCreateInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OutputCreateInput> updateTranscoderOutputWithHttpInfo(String transcoderId, String id, OutputCreateInput output) throws ApiException {
        com.squareup.okhttp.Call call = updateTranscoderOutputValidateBeforeCall(transcoderId, id, output, null, null);
        Type localVarReturnType = new TypeToken<OutputCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an output (asynchronously)
     * This operation updates an output rendition.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param id The unique alphanumeric string that identifies the output rendition. (required)
     * @param output Provide the details of the output rendition to update in the body of the request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTranscoderOutputAsync(String transcoderId, String id, OutputCreateInput output, final ApiCallback<OutputCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTranscoderOutputValidateBeforeCall(transcoderId, id, output, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OutputCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTranscoderOutputOutputStreamTarget
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param outputStreamTarget Provide the details of the output stream target to update in the body of the request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTranscoderOutputOutputStreamTargetCall(String transcoderId, String outputId, String streamTargetId, OutputStreamTargetCreateInput outputStreamTarget, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = outputStreamTarget;

        // create path and map variables
        String localVarPath = "/transcoders/{transcoder_id}/outputs/{output_id}/output_stream_targets/{stream_target_id}"
            .replaceAll("\\{" + "transcoder_id" + "\\}", apiClient.escapeString(transcoderId.toString()))
            .replaceAll("\\{" + "output_id" + "\\}", apiClient.escapeString(outputId.toString()))
            .replaceAll("\\{" + "stream_target_id" + "\\}", apiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTranscoderOutputOutputStreamTargetValidateBeforeCall(String transcoderId, String outputId, String streamTargetId, OutputStreamTargetCreateInput outputStreamTarget, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'transcoderId' is set
        if (transcoderId == null) {
            throw new ApiException("Missing the required parameter 'transcoderId' when calling updateTranscoderOutputOutputStreamTarget(Async)");
        }
        
        // verify the required parameter 'outputId' is set
        if (outputId == null) {
            throw new ApiException("Missing the required parameter 'outputId' when calling updateTranscoderOutputOutputStreamTarget(Async)");
        }
        
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling updateTranscoderOutputOutputStreamTarget(Async)");
        }
        
        // verify the required parameter 'outputStreamTarget' is set
        if (outputStreamTarget == null) {
            throw new ApiException("Missing the required parameter 'outputStreamTarget' when calling updateTranscoderOutputOutputStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = updateTranscoderOutputOutputStreamTargetCall(transcoderId, outputId, streamTargetId, outputStreamTarget, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an output stream target
     * This operation updates an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param outputStreamTarget Provide the details of the output stream target to update in the body of the request. (required)
     * @return OutputStreamTarget
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
    public OutputStreamTarget updateTranscoderOutputOutputStreamTarget(String transcoderId, String outputId, String streamTargetId, OutputStreamTarget outputStreamTarget) throws ApiException {
	OutputStreamTargetCreateInput input = new OutputStreamTargetCreateInput();
	input.setOutputStreamTarget(outputStreamTarget);
        OutputStreamTargetCreateInput resp = updateTranscoderOutputOutputStreamTargetTransport(transcoderId, outputId, streamTargetId, input);
        return resp.getOutputStreamTarget();
    }

    /**
     * Update an output stream target - Transport Wrapped
     * This operation updates an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param outputStreamTarget Provide the details of the output stream target to update in the body of the request. (required)
     * @return OutputStreamTargetCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OutputStreamTargetCreateInput updateTranscoderOutputOutputStreamTargetTransport(String transcoderId, String outputId, String streamTargetId, OutputStreamTargetCreateInput outputStreamTarget) throws ApiException {
        ApiResponse<OutputStreamTargetCreateInput> resp = updateTranscoderOutputOutputStreamTargetWithHttpInfo(transcoderId, outputId, streamTargetId, outputStreamTarget);
        return resp.getData();
    }

    /**
     * Update an output stream target
     * This operation updates an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param outputStreamTarget Provide the details of the output stream target to update in the body of the request. (required)
     * @return ApiResponse&lt;OutputStreamTargetCreateInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OutputStreamTargetCreateInput> updateTranscoderOutputOutputStreamTargetWithHttpInfo(String transcoderId, String outputId, String streamTargetId, OutputStreamTargetCreateInput outputStreamTarget) throws ApiException {
        com.squareup.okhttp.Call call = updateTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, streamTargetId, outputStreamTarget, null, null);
        Type localVarReturnType = new TypeToken<OutputStreamTargetCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an output stream target (asynchronously)
     * This operation updates an output stream target.
     * @param transcoderId The unique alphanumeric string that identifies the transcoder. (required)
     * @param outputId The unique alphanumeric string that identifies the output rendition. (required)
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param outputStreamTarget Provide the details of the output stream target to update in the body of the request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTranscoderOutputOutputStreamTargetAsync(String transcoderId, String outputId, String streamTargetId, OutputStreamTargetCreateInput outputStreamTarget, final ApiCallback<OutputStreamTargetCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTranscoderOutputOutputStreamTargetValidateBeforeCall(transcoderId, outputId, streamTargetId, outputStreamTarget, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OutputStreamTargetCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
