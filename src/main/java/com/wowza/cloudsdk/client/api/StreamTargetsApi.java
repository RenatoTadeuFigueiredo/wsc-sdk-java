/*
 * This code and all components Â© 2015 - 2019 Wowza Media Systems, LLC. All rights reserved.
 * This code is licensed pursuant to the BSD 3-Clause License.
 * 
 * Wowza Streaming Cloud REST API Reference Documentation
 *
 * OpenAPI spec version: v1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wowza.cloudsdk.client.api;

import com.wowza.cloudsdk.client.ApiCallback;
import com.wowza.cloudsdk.client.ApiClient;
import com.wowza.cloudsdk.client.ApiException;
import com.wowza.cloudsdk.client.ApiResponse;
import com.wowza.cloudsdk.client.Configuration;
import com.wowza.cloudsdk.client.Pair;
import com.wowza.cloudsdk.client.ProgressRequestBody;
import com.wowza.cloudsdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.wowza.cloudsdk.client.model.CustomStreamTargetCreateInput;
import com.wowza.cloudsdk.client.model.GeoblockCreateInput;
import com.wowza.cloudsdk.client.model.StreamTargetCustom;
import com.wowza.cloudsdk.client.model.CustomStreamTargetInput;
import com.wowza.cloudsdk.client.model.StreamTargetUll;
import com.wowza.cloudsdk.client.model.StreamTargetWowza;
import com.wowza.cloudsdk.client.model.StreamTargetCreateConnectioncode;
import com.wowza.cloudsdk.client.model.StreamTargetConnectioncode;
import com.wowza.cloudsdk.client.model.Geoblock;
import com.wowza.cloudsdk.client.model.TokenAuth;
import com.wowza.cloudsdk.client.model.StreamTargetProperty;
import com.wowza.cloudsdk.client.model.StreamTargetMetricsResponse;
import com.wowza.cloudsdk.client.model.IndexStreamTarget;
import com.wowza.cloudsdk.client.model.StreamTarget;
import com.wowza.cloudsdk.client.model.StreamTargetCreateInput;
import com.wowza.cloudsdk.client.model.StreamTargetProperties;
import com.wowza.cloudsdk.client.model.StreamTargetPropertyCreateInput;
import com.wowza.cloudsdk.client.model.StreamTargetCreateInput;
import com.wowza.cloudsdk.client.model.StreamTargets;
import com.wowza.cloudsdk.client.model.IndexCustomStreamTarget;
import com.wowza.cloudsdk.client.model.IndexUllStreamTarget;
import com.wowza.cloudsdk.client.model.IndexWowzaStreamTarget;
import com.wowza.cloudsdk.client.model.StreamTargetsCustom;
import com.wowza.cloudsdk.client.model.StreamTargetsUll;
import com.wowza.cloudsdk.client.model.StreamTargetsWowza;
import com.wowza.cloudsdk.client.model.TokenAuthCreateInput;
import com.wowza.cloudsdk.client.model.UllStreamTargetCreateInput;
import com.wowza.cloudsdk.client.model.UllStreamTargetCreateInput;
import com.wowza.cloudsdk.client.model.WowzaStreamTargetCreateInput;
import com.wowza.cloudsdk.client.model.WowzaStreamTargetCreateInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StreamTargetsApi {
    private ApiClient apiClient;

    public StreamTargetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StreamTargetsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createCustomStreamTarget
     * @param streamTargetCustom Provide the details of the custom stream target to create in the body of the request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createCustomStreamTargetCall(CustomStreamTargetCreateInput streamTargetCustom, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = streamTargetCustom;

        // create path and map variables
        String localVarPath = "/stream_targets/custom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createCustomStreamTargetValidateBeforeCall(CustomStreamTargetCreateInput streamTargetCustom, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'streamTargetCustom' is set
        if (streamTargetCustom == null) {
            throw new ApiException("Missing the required parameter 'streamTargetCustom' when calling createCustomStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = createCustomStreamTargetCall(streamTargetCustom, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a custom stream target
     * (Available from version 1.2) This operation creates a custom stream target for an external, third-party destination.
     * @param streamTargetCustom Provide the details of the custom stream target to create in the body of the request. (required)
     * @return StreamTargetCustom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetCustom createCustomStreamTarget(StreamTargetCustom streamTargetCustom) throws ApiException {
	CustomStreamTargetCreateInput input = new CustomStreamTargetCreateInput();
	input.setStreamTargetCustom(streamTargetCustom);
        CustomStreamTargetInput resp = createCustomStreamTargetTransport(input);
        return resp.getStreamTargetCustom();
    }

    /**
     * Create a custom stream target - Transport Wrapped
     * (Available from version 1.2) This operation creates a custom stream target for an external, third-party destination.
     * @param streamTargetCustom Provide the details of the custom stream target to create in the body of the request. (required)
     * @return CustomStreamTargetInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomStreamTargetInput createCustomStreamTargetTransport(CustomStreamTargetCreateInput streamTargetCustom) throws ApiException {
        ApiResponse<CustomStreamTargetInput> resp = createCustomStreamTargetWithHttpInfo(streamTargetCustom);
        return resp.getData();
    }

    /**
     * Create a custom stream target
     * (Available from version 1.2) This operation creates a custom stream target for an external, third-party destination.
     * @param streamTargetCustom Provide the details of the custom stream target to create in the body of the request. (required)
     * @return ApiResponse&lt;CustomStreamTargetInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomStreamTargetInput> createCustomStreamTargetWithHttpInfo(CustomStreamTargetCreateInput streamTargetCustom) throws ApiException {
        com.squareup.okhttp.Call call = createCustomStreamTargetValidateBeforeCall(streamTargetCustom, null, null);
        Type localVarReturnType = new TypeToken<CustomStreamTargetInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a custom stream target (asynchronously)
     * (Available from version 1.2) This operation creates a custom stream target for an external, third-party destination.
     * @param streamTargetCustom Provide the details of the custom stream target to create in the body of the request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createCustomStreamTargetAsync(CustomStreamTargetCreateInput streamTargetCustom, final ApiCallback<CustomStreamTargetInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createCustomStreamTargetValidateBeforeCall(streamTargetCustom, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomStreamTargetInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createStreamTarget
     * @param streamTarget Provide the details of the stream target to create in the body of the request. &lt;br /&gt;&lt;br /&gt; &lt;blockquote&gt;**Note:** The availability of many parameters depends on the type of target you create. The Responses schema for the create operation is generic and shows all possible parameters that may be returned for both types of targets.&lt;/blockquote&gt; (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createStreamTargetCall(StreamTargetCreateInput streamTarget, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = streamTarget;

        // create path and map variables
        String localVarPath = "/stream_targets ";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createStreamTargetValidateBeforeCall(StreamTargetCreateInput streamTarget, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'streamTarget' is set
        if (streamTarget == null) {
            throw new ApiException("Missing the required parameter 'streamTarget' when calling createStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = createStreamTargetCall(streamTarget, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deprecated operation
     * &lt;em&gt;POST /stream_targets&lt;/em&gt; is deprecated. To create a stream target, use &lt;em&gt;POST /stream_targets/custom&lt;/em&gt;, &lt;em&gt;POST /stream_targets/wowza&lt;/em&gt;, or &lt;em&gt;POST /stream_targets/ull&lt;/em&gt; instead.
     * @param streamTarget Provide the details of the stream target to create in the body of the request. &lt;br /&gt;&lt;br /&gt; &lt;blockquote&gt;**Note:** The availability of many parameters depends on the type of target you create. The Responses schema for the create operation is generic and shows all possible parameters that may be returned for both types of targets.&lt;/blockquote&gt; (required)
     * @return StreamTarget
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTarget createStreamTarget(StreamTargetCreateInput streamTarget) throws ApiException {
        ApiResponse<StreamTarget> resp = createStreamTargetWithHttpInfo(streamTarget);
        return resp.getData();
    }

    /**
     * Deprecated operation
     * &lt;em&gt;POST /stream_targets&lt;/em&gt; is deprecated. To create a stream target, use &lt;em&gt;POST /stream_targets/custom&lt;/em&gt;, &lt;em&gt;POST /stream_targets/wowza&lt;/em&gt;, or &lt;em&gt;POST /stream_targets/ull&lt;/em&gt; instead.
     * @param streamTarget Provide the details of the stream target to create in the body of the request. &lt;br /&gt;&lt;br /&gt; &lt;blockquote&gt;**Note:** The availability of many parameters depends on the type of target you create. The Responses schema for the create operation is generic and shows all possible parameters that may be returned for both types of targets.&lt;/blockquote&gt; (required)
     * @return ApiResponse&lt;StreamTarget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamTarget> createStreamTargetWithHttpInfo(StreamTargetCreateInput streamTarget) throws ApiException {
        com.squareup.okhttp.Call call = createStreamTargetValidateBeforeCall(streamTarget, null, null);
        Type localVarReturnType = new TypeToken<StreamTarget>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deprecated operation (asynchronously)
     * &lt;em&gt;POST /stream_targets&lt;/em&gt; is deprecated. To create a stream target, use &lt;em&gt;POST /stream_targets/custom&lt;/em&gt;, &lt;em&gt;POST /stream_targets/wowza&lt;/em&gt;, or &lt;em&gt;POST /stream_targets/ull&lt;/em&gt; instead.
     * @param streamTarget Provide the details of the stream target to create in the body of the request. &lt;br /&gt;&lt;br /&gt; &lt;blockquote&gt;**Note:** The availability of many parameters depends on the type of target you create. The Responses schema for the create operation is generic and shows all possible parameters that may be returned for both types of targets.&lt;/blockquote&gt; (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createStreamTargetAsync(StreamTargetCreateInput streamTarget, final ApiCallback<StreamTarget> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createStreamTargetValidateBeforeCall(streamTarget, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamTarget>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createStreamTargetGeoblock
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param geoblock Provide the details of the geo-blocking to create in the body of the request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createStreamTargetGeoblockCall(String streamTargetId, GeoblockCreateInput geoblock, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = geoblock;

        // create path and map variables
        String localVarPath = "/stream_targets/{stream_target_id}/geoblock"
            .replaceAll("\\{" + "stream_target_id" + "\\}", apiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createStreamTargetGeoblockValidateBeforeCall(String streamTargetId, GeoblockCreateInput geoblock, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling createStreamTargetGeoblock(Async)");
        }
        
        // verify the required parameter 'geoblock' is set
        if (geoblock == null) {
            throw new ApiException("Missing the required parameter 'geoblock' when calling createStreamTargetGeoblock(Async)");
        }
        

        com.squareup.okhttp.Call call = createStreamTargetGeoblockCall(streamTargetId, geoblock, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create geo-blocking for a Wowza stream target
     * This operation allows you to block or whitelist viewing of a stream target by geographic location. Only Wowza stream targets can be geo-blocked. For more information see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-geo-block-stream-targets-by-using-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Geo-block stream targets with the Wowza Streaming Cloud REST API&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;**Important:** After configuring geo-blocking, you must [contact Support](https://www.wowza.com/portal/help) in order for your changes to take effect.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param geoblock Provide the details of the geo-blocking to create in the body of the request. (required)
     * @return Geoblock
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Geoblock createStreamTargetGeoblock(String streamTargetId, Geoblock geoblock) throws ApiException {
	GeoblockCreateInput input = new GeoblockCreateInput();
	input.setGeoblock(geoblock);
        GeoblockCreateInput resp = createStreamTargetGeoblockTransport(streamTargetId, input);
        return resp.getGeoblock();
    }

    /**
     * Create geo-blocking for a Wowza stream target - Transport Wrapped
     * This operation allows you to block or whitelist viewing of a stream target by geographic location. Only Wowza stream targets can be geo-blocked. For more information see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-geo-block-stream-targets-by-using-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Geo-block stream targets with the Wowza Streaming Cloud REST API&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;**Important:** After configuring geo-blocking, you must [contact Support](https://www.wowza.com/portal/help) in order for your changes to take effect.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param geoblock Provide the details of the geo-blocking to create in the body of the request. (required)
     * @return GeoblockCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GeoblockCreateInput createStreamTargetGeoblockTransport(String streamTargetId, GeoblockCreateInput geoblock) throws ApiException {
        ApiResponse<GeoblockCreateInput> resp = createStreamTargetGeoblockWithHttpInfo(streamTargetId, geoblock);
        return resp.getData();
    }

    /**
     * Create geo-blocking for a Wowza stream target
     * This operation allows you to block or whitelist viewing of a stream target by geographic location. Only Wowza stream targets can be geo-blocked. For more information see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-geo-block-stream-targets-by-using-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Geo-block stream targets with the Wowza Streaming Cloud REST API&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;**Important:** After configuring geo-blocking, you must [contact Support](https://www.wowza.com/portal/help) in order for your changes to take effect.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param geoblock Provide the details of the geo-blocking to create in the body of the request. (required)
     * @return ApiResponse&lt;GeoblockCreateInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GeoblockCreateInput> createStreamTargetGeoblockWithHttpInfo(String streamTargetId, GeoblockCreateInput geoblock) throws ApiException {
        com.squareup.okhttp.Call call = createStreamTargetGeoblockValidateBeforeCall(streamTargetId, geoblock, null, null);
        Type localVarReturnType = new TypeToken<GeoblockCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create geo-blocking for a Wowza stream target (asynchronously)
     * This operation allows you to block or whitelist viewing of a stream target by geographic location. Only Wowza stream targets can be geo-blocked. For more information see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-geo-block-stream-targets-by-using-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Geo-block stream targets with the Wowza Streaming Cloud REST API&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;**Important:** After configuring geo-blocking, you must [contact Support](https://www.wowza.com/portal/help) in order for your changes to take effect.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param geoblock Provide the details of the geo-blocking to create in the body of the request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createStreamTargetGeoblockAsync(String streamTargetId, GeoblockCreateInput geoblock, final ApiCallback<GeoblockCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createStreamTargetGeoblockValidateBeforeCall(streamTargetId, geoblock, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GeoblockCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createStreamTargetProperty
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param property Provide the details of the property to configure in the body of the request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createStreamTargetPropertyCall(String streamTargetId, StreamTargetPropertyCreateInput property, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = property;

        // create path and map variables
        String localVarPath = "/stream_targets/{stream_target_id}/properties"
            .replaceAll("\\{" + "stream_target_id" + "\\}", apiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createStreamTargetPropertyValidateBeforeCall(String streamTargetId, StreamTargetPropertyCreateInput property, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling createStreamTargetProperty(Async)");
        }
        
        // verify the required parameter 'property' is set
        if (property == null) {
            throw new ApiException("Missing the required parameter 'property' when calling createStreamTargetProperty(Async)");
        }
        

        com.squareup.okhttp.Call call = createStreamTargetPropertyCall(streamTargetId, property, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Configure a property for a stream target
     * This operation configures a property for a stream target. Properties are available for a custom stream target or Wowza stream target whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;. For more information see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-set-advanced-properties-by-using-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Set advanced properties with the Wowza Streaming Cloud REST API&lt;/a&gt;.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param property Provide the details of the property to configure in the body of the request. (required)
     * @return StreamTargetProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetProperty createStreamTargetProperty(String streamTargetId, StreamTargetProperty property) throws ApiException {
	StreamTargetPropertyCreateInput input = new StreamTargetPropertyCreateInput();
	input.setStreamTargetProperty(property);
        StreamTargetPropertyCreateInput resp = createStreamTargetPropertyTransport(streamTargetId, input);
        return resp.getStreamTargetProperty();
    }


    /**
     * Configure a property for a stream target - Transport Wrapped
     * This operation configures a property for a stream target. Properties are available for a custom stream target or Wowza stream target whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;. For more information see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-set-advanced-properties-by-using-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Set advanced properties with the Wowza Streaming Cloud REST API&lt;/a&gt;.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param property Provide the details of the property to configure in the body of the request. (required)
     * @return StreamTargetPropertyCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetPropertyCreateInput createStreamTargetPropertyTransport(String streamTargetId, StreamTargetPropertyCreateInput property) throws ApiException {
        ApiResponse<StreamTargetPropertyCreateInput> resp = createStreamTargetPropertyWithHttpInfo(streamTargetId, property);
        return resp.getData();
    }

    /**
     * Configure a property for a stream target
     * This operation configures a property for a stream target. Properties are available for a custom stream target or Wowza stream target whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;. For more information see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-set-advanced-properties-by-using-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Set advanced properties with the Wowza Streaming Cloud REST API&lt;/a&gt;.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param property Provide the details of the property to configure in the body of the request. (required)
     * @return ApiResponse&lt;StreamTargetPropertyCreateInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamTargetPropertyCreateInput> createStreamTargetPropertyWithHttpInfo(String streamTargetId, StreamTargetPropertyCreateInput property) throws ApiException {
        com.squareup.okhttp.Call call = createStreamTargetPropertyValidateBeforeCall(streamTargetId, property, null, null);
        Type localVarReturnType = new TypeToken<StreamTargetPropertyCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Configure a property for a stream target (asynchronously)
     * This operation configures a property for a stream target. Properties are available for a custom stream target or Wowza stream target whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;. For more information see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-set-advanced-properties-by-using-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Set advanced properties with the Wowza Streaming Cloud REST API&lt;/a&gt;.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param property Provide the details of the property to configure in the body of the request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createStreamTargetPropertyAsync(String streamTargetId, StreamTargetPropertyCreateInput property, final ApiCallback<StreamTargetPropertyCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createStreamTargetPropertyValidateBeforeCall(streamTargetId, property, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamTargetPropertyCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createStreamTargetTokenAuth
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param tokenAuth Provide the details of the token authorization to create in the body of the request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createStreamTargetTokenAuthCall(String streamTargetId, TokenAuthCreateInput tokenAuth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tokenAuth;

        // create path and map variables
        String localVarPath = "/stream_targets/{stream_target_id}/token_auth"
            .replaceAll("\\{" + "stream_target_id" + "\\}", apiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createStreamTargetTokenAuthValidateBeforeCall(String streamTargetId, TokenAuthCreateInput tokenAuth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling createStreamTargetTokenAuth(Async)");
        }
        
        // verify the required parameter 'tokenAuth' is set
        if (tokenAuth == null) {
            throw new ApiException("Missing the required parameter 'tokenAuth' when calling createStreamTargetTokenAuth(Async)");
        }
        

        com.squareup.okhttp.Call call = createStreamTargetTokenAuthCall(streamTargetId, tokenAuth, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create token authorization for a Wowza stream target
     * This operation creates token authorization for a stream target. Only Wowza stream targets can use token authorization. For more information see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-protect-streams-with-token-authorization-by-using-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Protect stream targets with token authorization using the Wowza Streaming Cloud REST API&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;**Important:** After creating token authorization, you must [contact Support](https://www.wowza.com/portal/help) in order for your changes to take effect.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param tokenAuth Provide the details of the token authorization to create in the body of the request. (required)
     * @return TokenAuth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TokenAuth createStreamTargetTokenAuth(String streamTargetId, TokenAuth tokenAuth) throws ApiException {
	TokenAuthCreateInput input = new TokenAuthCreateInput();
	input.setTokenAuth(tokenAuth);
        TokenAuthCreateInput resp = createStreamTargetTokenAuthTransport(streamTargetId, input);
        return resp.getTokenAuth();
    }

    /**
     * Create token authorization for a Wowza stream target - Transport Wrapped
     * This operation creates token authorization for a stream target. Only Wowza stream targets can use token authorization. For more information see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-protect-streams-with-token-authorization-by-using-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Protect stream targets with token authorization using the Wowza Streaming Cloud REST API&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;**Important:** After creating token authorization, you must [contact Support](https://www.wowza.com/portal/help) in order for your changes to take effect.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param tokenAuth Provide the details of the token authorization to create in the body of the request. (required)
     * @return TokenAuthCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TokenAuthCreateInput createStreamTargetTokenAuthTransport(String streamTargetId, TokenAuthCreateInput tokenAuth) throws ApiException {
        ApiResponse<TokenAuthCreateInput> resp = createStreamTargetTokenAuthWithHttpInfo(streamTargetId, tokenAuth);
        return resp.getData();
    }

    /**
     * Create token authorization for a Wowza stream target
     * This operation creates token authorization for a stream target. Only Wowza stream targets can use token authorization. For more information see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-protect-streams-with-token-authorization-by-using-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Protect stream targets with token authorization using the Wowza Streaming Cloud REST API&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;**Important:** After creating token authorization, you must [contact Support](https://www.wowza.com/portal/help) in order for your changes to take effect.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param tokenAuth Provide the details of the token authorization to create in the body of the request. (required)
     * @return ApiResponse&lt;TokenAuthCreateInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TokenAuthCreateInput> createStreamTargetTokenAuthWithHttpInfo(String streamTargetId, TokenAuthCreateInput tokenAuth) throws ApiException {
        com.squareup.okhttp.Call call = createStreamTargetTokenAuthValidateBeforeCall(streamTargetId, tokenAuth, null, null);
        Type localVarReturnType = new TypeToken<TokenAuthCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create token authorization for a Wowza stream target (asynchronously)
     * This operation creates token authorization for a stream target. Only Wowza stream targets can use token authorization. For more information see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-protect-streams-with-token-authorization-by-using-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Protect stream targets with token authorization using the Wowza Streaming Cloud REST API&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;**Important:** After creating token authorization, you must [contact Support](https://www.wowza.com/portal/help) in order for your changes to take effect.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param tokenAuth Provide the details of the token authorization to create in the body of the request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createStreamTargetTokenAuthAsync(String streamTargetId, TokenAuthCreateInput tokenAuth, final ApiCallback<TokenAuthCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createStreamTargetTokenAuthValidateBeforeCall(streamTargetId, tokenAuth, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TokenAuthCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createUllStreamTarget
     * @param streamTargetUll Provide the details of the ultra low latency stream target to create in the body of the request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUllStreamTargetCall(UllStreamTargetCreateInput streamTargetUll, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = streamTargetUll;

        // create path and map variables
        String localVarPath = "/stream_targets/ull";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUllStreamTargetValidateBeforeCall(UllStreamTargetCreateInput streamTargetUll, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'streamTargetUll' is set
        if (streamTargetUll == null) {
            throw new ApiException("Missing the required parameter 'streamTargetUll' when calling createUllStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = createUllStreamTargetCall(streamTargetUll, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an ultra low latency stream target
     * (Available from version 1.2) This operation creates an ultra low latency stream target.&lt;br /&gt;&lt;br /&gt;Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;.
     * @param streamTargetCustom Provide the details of the ultra low latency stream target to create in the body of the request. (required)
     * @return StreamTargetUll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetUll createUllStreamTarget(StreamTargetUll streamTargetCustom) throws ApiException {
        UllStreamTargetCreateInput input = new UllStreamTargetCreateInput();
        input.setStreamTargetUll(streamTargetCustom);
        UllStreamTargetCreateInput resp = createUllStreamTargetTransport(input);
        return resp.getStreamTargetUll();
    }


    /**
     * Create an ultra low latency stream target - Transport Wrapped
     * (Available from version 1.2) This operation creates an ultra low latency stream target.&lt;br /&gt;&lt;br /&gt;Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;.
     * @param streamTargetUll Provide the details of the ultra low latency stream target to create in the body of the request. (required)
     * @return UllStreamTargetCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UllStreamTargetCreateInput createUllStreamTargetTransport(UllStreamTargetCreateInput streamTargetUll) throws ApiException {
        ApiResponse<UllStreamTargetCreateInput> resp = createUllStreamTargetWithHttpInfo(streamTargetUll);
        return resp.getData();
    }

    /**
     * Create an ultra low latency stream target
     * (Available from version 1.2) This operation creates an ultra low latency stream target.&lt;br /&gt;&lt;br /&gt;Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;.
     * @param streamTargetUll Provide the details of the ultra low latency stream target to create in the body of the request. (required)
     * @return ApiResponse&lt;UllStreamTargetCreateInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UllStreamTargetCreateInput> createUllStreamTargetWithHttpInfo(UllStreamTargetCreateInput streamTargetUll) throws ApiException {
        com.squareup.okhttp.Call call = createUllStreamTargetValidateBeforeCall(streamTargetUll, null, null);
        Type localVarReturnType = new TypeToken<UllStreamTargetCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an ultra low latency stream target (asynchronously)
     * (Available from version 1.2) This operation creates an ultra low latency stream target.&lt;br /&gt;&lt;br /&gt;Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;.
     * @param streamTargetUll Provide the details of the ultra low latency stream target to create in the body of the request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUllStreamTargetAsync(UllStreamTargetCreateInput streamTargetUll, final ApiCallback<UllStreamTargetCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUllStreamTargetValidateBeforeCall(streamTargetUll, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UllStreamTargetCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createWowzaStreamTarget
     * @param streamTargetWowza Provide the details of the Wowza stream target to create in the body of the request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createWowzaStreamTargetCall(WowzaStreamTargetCreateInput streamTargetWowza, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = streamTargetWowza;

        // create path and map variables
        String localVarPath = "/stream_targets/wowza";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createWowzaStreamTargetValidateBeforeCall(WowzaStreamTargetCreateInput streamTargetWowza, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'streamTargetWowza' is set
        if (streamTargetWowza == null) {
            throw new ApiException("Missing the required parameter 'streamTargetWowza' when calling createWowzaStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = createWowzaStreamTargetCall(streamTargetWowza, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Wowza stream target
     * (Available from version 1.2) This operation creates a Wowza stream target for a Wowza CDN.
     * @param streamTargetWowza Provide the details of the Wowza stream target to create in the body of the request. (required)
     * @return StreamTargetWowza
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetWowza createWowzaStreamTarget(StreamTargetWowza streamTargetWowza) throws ApiException {
	WowzaStreamTargetCreateInput input = new WowzaStreamTargetCreateInput();
	input.setStreamTargetWowza(streamTargetWowza);
        WowzaStreamTargetCreateInput resp = createWowzaStreamTargetTransport(input);
        return resp.getStreamTargetWowza();
    }

    /**
     * Create a Wowza stream target - Transport Wrapped
     * (Available from version 1.2) This operation creates a Wowza stream target for a Wowza CDN.
     * @param streamTargetWowza Provide the details of the Wowza stream target to create in the body of the request. (required)
     * @return WowzaStreamTargetCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WowzaStreamTargetCreateInput createWowzaStreamTargetTransport(WowzaStreamTargetCreateInput streamTargetWowza) throws ApiException {
        ApiResponse<WowzaStreamTargetCreateInput> resp = createWowzaStreamTargetWithHttpInfo(streamTargetWowza);
        return resp.getData();
    }

    /**
     * Create a Wowza stream target
     * (Available from version 1.2) This operation creates a Wowza stream target for a Wowza CDN.
     * @param streamTargetWowza Provide the details of the Wowza stream target to create in the body of the request. (required)
     * @return ApiResponse&lt;WowzaStreamTargetCreateInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WowzaStreamTargetCreateInput> createWowzaStreamTargetWithHttpInfo(WowzaStreamTargetCreateInput streamTargetWowza) throws ApiException {
        com.squareup.okhttp.Call call = createWowzaStreamTargetValidateBeforeCall(streamTargetWowza, null, null);
        Type localVarReturnType = new TypeToken<WowzaStreamTargetCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Wowza stream target (asynchronously)
     * (Available from version 1.2) This operation creates a Wowza stream target for a Wowza CDN.
     * @param streamTargetWowza Provide the details of the Wowza stream target to create in the body of the request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createWowzaStreamTargetAsync(WowzaStreamTargetCreateInput streamTargetWowza, final ApiCallback<WowzaStreamTargetCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createWowzaStreamTargetValidateBeforeCall(streamTargetWowza, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WowzaStreamTargetCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteCustomStreamTarget
     * @param id The unique alphanumeric string that identifies the custom stream target. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCustomStreamTargetCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/custom/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCustomStreamTargetValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCustomStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteCustomStreamTargetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a custom stream target
     * (Available from version 1.2) This operation deletes a custom stream target.
     * @param id The unique alphanumeric string that identifies the custom stream target. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteCustomStreamTarget(String id) throws ApiException {
        deleteCustomStreamTargetWithHttpInfo(id);
    }

    /**
     * Delete a custom stream target
     * (Available from version 1.2) This operation deletes a custom stream target.
     * @param id The unique alphanumeric string that identifies the custom stream target. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteCustomStreamTargetWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteCustomStreamTargetValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a custom stream target (asynchronously)
     * (Available from version 1.2) This operation deletes a custom stream target.
     * @param id The unique alphanumeric string that identifies the custom stream target. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCustomStreamTargetAsync(String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCustomStreamTargetValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteStreamTarget
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteStreamTargetCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteStreamTargetValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteStreamTargetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deprecated operation
     * &lt;em&gt;DELETE /stream_targets/[id]&lt;/em&gt; is deprecated. To remove a stream target, use &lt;em&gt;DELETE /stream_targets/custom/[id]&lt;/em&gt;, &lt;em&gt;DELETE /stream_targets/wowza/[id]&lt;/em&gt;, or &lt;em&gt;DELETE /stream_targets/ull/[id]&lt;/em&gt; instead.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteStreamTarget(String id) throws ApiException {
        deleteStreamTargetWithHttpInfo(id);
    }

    /**
     * Deprecated operation
     * &lt;em&gt;DELETE /stream_targets/[id]&lt;/em&gt; is deprecated. To remove a stream target, use &lt;em&gt;DELETE /stream_targets/custom/[id]&lt;/em&gt;, &lt;em&gt;DELETE /stream_targets/wowza/[id]&lt;/em&gt;, or &lt;em&gt;DELETE /stream_targets/ull/[id]&lt;/em&gt; instead.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteStreamTargetWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteStreamTargetValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deprecated operation (asynchronously)
     * &lt;em&gt;DELETE /stream_targets/[id]&lt;/em&gt; is deprecated. To remove a stream target, use &lt;em&gt;DELETE /stream_targets/custom/[id]&lt;/em&gt;, &lt;em&gt;DELETE /stream_targets/wowza/[id]&lt;/em&gt;, or &lt;em&gt;DELETE /stream_targets/ull/[id]&lt;/em&gt; instead.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteStreamTargetAsync(String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteStreamTargetValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteStreamTargetProperty
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param id The unique string that identifies the stream target property. The string contains the &lt;em&gt;section&lt;/em&gt; and the &lt;em&gt;key&lt;/em&gt;, connected by a dash. For example, &lt;strong&gt;hls-chunkSize&lt;/strong&gt;. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteStreamTargetPropertyCall(String streamTargetId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/{stream_target_id}/properties/{id}"
            .replaceAll("\\{" + "stream_target_id" + "\\}", apiClient.escapeString(streamTargetId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteStreamTargetPropertyValidateBeforeCall(String streamTargetId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling deleteStreamTargetProperty(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteStreamTargetProperty(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteStreamTargetPropertyCall(streamTargetId, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a stream target property
     * This operation removes a property from a stream target.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param id The unique string that identifies the stream target property. The string contains the &lt;em&gt;section&lt;/em&gt; and the &lt;em&gt;key&lt;/em&gt;, connected by a dash. For example, &lt;strong&gt;hls-chunkSize&lt;/strong&gt;. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteStreamTargetProperty(String streamTargetId, String id) throws ApiException {
        deleteStreamTargetPropertyWithHttpInfo(streamTargetId, id);
    }

    /**
     * Delete a stream target property
     * This operation removes a property from a stream target.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param id The unique string that identifies the stream target property. The string contains the &lt;em&gt;section&lt;/em&gt; and the &lt;em&gt;key&lt;/em&gt;, connected by a dash. For example, &lt;strong&gt;hls-chunkSize&lt;/strong&gt;. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteStreamTargetPropertyWithHttpInfo(String streamTargetId, String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteStreamTargetPropertyValidateBeforeCall(streamTargetId, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a stream target property (asynchronously)
     * This operation removes a property from a stream target.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param id The unique string that identifies the stream target property. The string contains the &lt;em&gt;section&lt;/em&gt; and the &lt;em&gt;key&lt;/em&gt;, connected by a dash. For example, &lt;strong&gt;hls-chunkSize&lt;/strong&gt;. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteStreamTargetPropertyAsync(String streamTargetId, String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteStreamTargetPropertyValidateBeforeCall(streamTargetId, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteUllStreamTarget
     * @param id The unique alphanumeric string that identifies the ultra low latency stream target. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteUllStreamTargetCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/ull/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteUllStreamTargetValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteUllStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteUllStreamTargetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete an ultra low latency stream target
     * (Available from version 1.2) This operation deletes an ultra low latency stream target.&lt;br /&gt;&lt;br /&gt;Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;.
     * @param id The unique alphanumeric string that identifies the ultra low latency stream target. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteUllStreamTarget(String id) throws ApiException {
        deleteUllStreamTargetWithHttpInfo(id);
    }

    /**
     * Delete an ultra low latency stream target
     * (Available from version 1.2) This operation deletes an ultra low latency stream target.&lt;br /&gt;&lt;br /&gt;Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;.
     * @param id The unique alphanumeric string that identifies the ultra low latency stream target. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteUllStreamTargetWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteUllStreamTargetValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an ultra low latency stream target (asynchronously)
     * (Available from version 1.2) This operation deletes an ultra low latency stream target.&lt;br /&gt;&lt;br /&gt;Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;.
     * @param id The unique alphanumeric string that identifies the ultra low latency stream target. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteUllStreamTargetAsync(String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteUllStreamTargetValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for deleteWowzaStreamTarget
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteWowzaStreamTargetCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/wowza/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteWowzaStreamTargetValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteWowzaStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteWowzaStreamTargetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a Wowza stream target
     * (Available from version 1.2) This operation deletes a Wowza stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteWowzaStreamTarget(String id) throws ApiException {
        deleteWowzaStreamTargetWithHttpInfo(id);
    }

    /**
     * Delete a Wowza stream target
     * (Available from version 1.2) This operation deletes a Wowza stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteWowzaStreamTargetWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteWowzaStreamTargetValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a Wowza stream target (asynchronously)
     * (Available from version 1.2) This operation deletes a Wowza stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteWowzaStreamTargetAsync(String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWowzaStreamTargetValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listCustomStreamTargets
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listCustomStreamTargetsCall(Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/custom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listCustomStreamTargetsValidateBeforeCall(Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listCustomStreamTargetsCall(page, perPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch all custom stream targets
     * (Available from version 1.2) This operation lists limited details for all of your custom stream targets. For detailed information, fetch a single custom stream target.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @return List
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IndexCustomStreamTarget> listCustomStreamTargets(Integer page, Integer perPage) throws ApiException {
        StreamTargetsCustom resp = listCustomStreamTargetsTransport(page, perPage);
        return resp.getStreamTargetsCustom();
    }

    /**
     * Fetch all custom stream targets - Transport Wrapped
     * (Available from version 1.2) This operation lists limited details for all of your custom stream targets. For detailed information, fetch a single custom stream target.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @return StreamTargetsCustom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetsCustom listCustomStreamTargetsTransport(Integer page, Integer perPage) throws ApiException {
        ApiResponse<StreamTargetsCustom> resp = listCustomStreamTargetsWithHttpInfo(page, perPage);
        return resp.getData();
    }

    /**
     * Fetch all custom stream targets
     * (Available from version 1.2) This operation lists limited details for all of your custom stream targets. For detailed information, fetch a single custom stream target.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @return ApiResponse&lt;StreamTargetsCustom&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamTargetsCustom> listCustomStreamTargetsWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = listCustomStreamTargetsValidateBeforeCall(page, perPage, null, null);
        Type localVarReturnType = new TypeToken<StreamTargetsCustom>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch all custom stream targets (asynchronously)
     * (Available from version 1.2) This operation lists limited details for all of your custom stream targets. For detailed information, fetch a single custom stream target.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listCustomStreamTargetsAsync(Integer page, Integer perPage, final ApiCallback<StreamTargetsCustom> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listCustomStreamTargetsValidateBeforeCall(page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamTargetsCustom>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listStreamTargetProperties
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listStreamTargetPropertiesCall(String streamTargetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/{stream_target_id}/properties"
            .replaceAll("\\{" + "stream_target_id" + "\\}", apiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listStreamTargetPropertiesValidateBeforeCall(String streamTargetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling listStreamTargetProperties(Async)");
        }
        

        com.squareup.okhttp.Call call = listStreamTargetPropertiesCall(streamTargetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch all properties of a stream target
     * This operation shows the details of all of the properties assigned to a specific stream target. Properties can be applied to a custom stream target or Wowza stream target whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return List
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<StreamTargetProperty> listStreamTargetProperties(String streamTargetId) throws ApiException {
        StreamTargetProperties resp = listStreamTargetPropertiesTransport(streamTargetId);
        return resp.getProperties();
    }

    /**
     * Fetch all properties of a stream target - Transport Wrapped
     * This operation shows the details of all of the properties assigned to a specific stream target. Properties can be applied to a custom stream target or Wowza stream target whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return StreamTargetProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetProperties listStreamTargetPropertiesTransport(String streamTargetId) throws ApiException {
        ApiResponse<StreamTargetProperties> resp = listStreamTargetPropertiesWithHttpInfo(streamTargetId);
        return resp.getData();
    }

    /**
     * Fetch all properties of a stream target
     * This operation shows the details of all of the properties assigned to a specific stream target. Properties can be applied to a custom stream target or Wowza stream target whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;StreamTargetProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamTargetProperties> listStreamTargetPropertiesWithHttpInfo(String streamTargetId) throws ApiException {
        com.squareup.okhttp.Call call = listStreamTargetPropertiesValidateBeforeCall(streamTargetId, null, null);
        Type localVarReturnType = new TypeToken<StreamTargetProperties>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch all properties of a stream target (asynchronously)
     * This operation shows the details of all of the properties assigned to a specific stream target. Properties can be applied to a custom stream target or Wowza stream target whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listStreamTargetPropertiesAsync(String streamTargetId, final ApiCallback<StreamTargetProperties> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listStreamTargetPropertiesValidateBeforeCall(streamTargetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamTargetProperties>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listStreamTargets
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listStreamTargetsCall(Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listStreamTargetsValidateBeforeCall(Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listStreamTargetsCall(page, perPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch all stream targets
     * This operation lists limited details for custom stream targets, ultra low latency stream targets, and Wowza stream targets. For detailed information, fetch a single stream target of a specific type.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @return List
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IndexStreamTarget> listStreamTargets(Integer page, Integer perPage) throws ApiException {
        StreamTargets resp = listStreamTargetsTransport(page, perPage);
        return resp.getStreamTargets();
    }

    /**
     * Fetch all stream targets - Transport Wrapped
     * This operation lists limited details for custom stream targets, ultra low latency stream targets, and Wowza stream targets. For detailed information, fetch a single stream target of a specific type.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @return StreamTargets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargets listStreamTargetsTransport(Integer page, Integer perPage) throws ApiException {
        ApiResponse<StreamTargets> resp = listStreamTargetsWithHttpInfo(page, perPage);
        return resp.getData();
    }

    /**
     * Fetch all stream targets
     * This operation lists limited details for custom stream targets, ultra low latency stream targets, and Wowza stream targets. For detailed information, fetch a single stream target of a specific type.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @return ApiResponse&lt;StreamTargets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamTargets> listStreamTargetsWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = listStreamTargetsValidateBeforeCall(page, perPage, null, null);
        Type localVarReturnType = new TypeToken<StreamTargets>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch all stream targets (asynchronously)
     * This operation lists limited details for custom stream targets, ultra low latency stream targets, and Wowza stream targets. For detailed information, fetch a single stream target of a specific type.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listStreamTargetsAsync(Integer page, Integer perPage, final ApiCallback<StreamTargets> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listStreamTargetsValidateBeforeCall(page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamTargets>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listUllStreamTargets
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listUllStreamTargetsCall(Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/ull";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listUllStreamTargetsValidateBeforeCall(Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listUllStreamTargetsCall(page, perPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch all ultra low latency stream targets
     * (Available from version 1.2) This operation lists limited details for all of your ultra low latency stream targets. For detailed information, fetch a single ultra low latency stream target.&lt;br /&gt;&lt;br /&gt;Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @return List
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IndexUllStreamTarget> listUllStreamTargets(Integer page, Integer perPage) throws ApiException {
        StreamTargetsUll resp = listUllStreamTargetsTransport(page, perPage);
        return resp.getStreamTargetsUll();
    }

    /**
     * Fetch all ultra low latency stream targets - Transport Wrapped
     * (Available from version 1.2) This operation lists limited details for all of your ultra low latency stream targets. For detailed information, fetch a single ultra low latency stream target.&lt;br /&gt;&lt;br /&gt;Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @return StreamTargetsUll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetsUll listUllStreamTargetsTransport(Integer page, Integer perPage) throws ApiException {
        ApiResponse<StreamTargetsUll> resp = listUllStreamTargetsWithHttpInfo(page, perPage);
        return resp.getData();
    }

    /**
     * Fetch all ultra low latency stream targets
     * (Available from version 1.2) This operation lists limited details for all of your ultra low latency stream targets. For detailed information, fetch a single ultra low latency stream target.&lt;br /&gt;&lt;br /&gt;Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @return ApiResponse&lt;StreamTargetsUll&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamTargetsUll> listUllStreamTargetsWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = listUllStreamTargetsValidateBeforeCall(page, perPage, null, null);
        Type localVarReturnType = new TypeToken<StreamTargetsUll>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch all ultra low latency stream targets (asynchronously)
     * (Available from version 1.2) This operation lists limited details for all of your ultra low latency stream targets. For detailed information, fetch a single ultra low latency stream target.&lt;br /&gt;&lt;br /&gt;Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listUllStreamTargetsAsync(Integer page, Integer perPage, final ApiCallback<StreamTargetsUll> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listUllStreamTargetsValidateBeforeCall(page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamTargetsUll>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listWowzaStreamTargets
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listWowzaStreamTargetsCall(Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/wowza";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listWowzaStreamTargetsValidateBeforeCall(Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listWowzaStreamTargetsCall(page, perPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch all Wowza stream targets
     * (Available from version 1.2) This operation lists limited details for all of your Wowza stream targets. For detailed information, fetch a single Wowza stream target.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @return List
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IndexWowzaStreamTarget> listWowzaStreamTargets(Integer page, Integer perPage) throws ApiException {
        StreamTargetsWowza resp = listWowzaStreamTargetsTransport(page, perPage);
        return resp.getStreamTargetsWowza();
    }

    /**
     * Fetch all Wowza stream targets - Transport Wrapped
     * (Available from version 1.2) This operation lists limited details for all of your Wowza stream targets. For detailed information, fetch a single Wowza stream target.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @return StreamTargetsWowza
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetsWowza listWowzaStreamTargetsTransport(Integer page, Integer perPage) throws ApiException {
        ApiResponse<StreamTargetsWowza> resp = listWowzaStreamTargetsWithHttpInfo(page, perPage);
        return resp.getData();
    }

    /**
     * Fetch all Wowza stream targets
     * (Available from version 1.2) This operation lists limited details for all of your Wowza stream targets. For detailed information, fetch a single Wowza stream target.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @return ApiResponse&lt;StreamTargetsWowza&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamTargetsWowza> listWowzaStreamTargetsWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = listWowzaStreamTargetsValidateBeforeCall(page, perPage, null, null);
        Type localVarReturnType = new TypeToken<StreamTargetsWowza>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch all Wowza stream targets (asynchronously)
     * (Available from version 1.2) This operation lists limited details for all of your Wowza stream targets. For detailed information, fetch a single Wowza stream target.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listWowzaStreamTargetsAsync(Integer page, Integer perPage, final ApiCallback<StreamTargetsWowza> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listWowzaStreamTargetsValidateBeforeCall(page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamTargetsWowza>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for regenerateConnectionCodeStreamTarget
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call regenerateConnectionCodeStreamTargetCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/{id}/regenerate_connection_code"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call regenerateConnectionCodeStreamTargetValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling regenerateConnectionCodeStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = regenerateConnectionCodeStreamTargetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Regenerata the connection code for any stream target
     * This operation regenerates the connection code of any kind of stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @return StreamTargetConnectioncode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetConnectioncode regenerateConnectionCodeStreamTarget(String id) throws ApiException {
        StreamTargetCreateConnectioncode resp = regenerateConnectionCodeStreamTargetTransport(id);
        return resp.getStreamTargetConnectioncode();
    }

    /**
     * Regenerata the connection code for any stream target - Transport Wrapped
     * This operation regenerates the connection code of any kind of stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @return StreamTargetCreateConnectioncode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetCreateConnectioncode regenerateConnectionCodeStreamTargetTransport(String id) throws ApiException {
        ApiResponse<StreamTargetCreateConnectioncode> resp = regenerateConnectionCodeStreamTargetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Regenerate the connection code for any stream target
     * This operation regenerates the connection code of any kind of stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;StreamTargetCreateConnectioncode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamTargetCreateConnectioncode> regenerateConnectionCodeStreamTargetWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = regenerateConnectionCodeStreamTargetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<StreamTargetCreateConnectioncode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Regenerate the connection code for any stream target (asynchronously)
     * This operation regenerates the connection code of any kind of stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call regenerateConnectionCodeStreamTargetAsync(String id, final ApiCallback<StreamTargetCreateConnectioncode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = regenerateConnectionCodeStreamTargetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamTargetCreateConnectioncode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showCustomStreamTarget
     * @param id The unique alphanumeric string that identifies the custom stream target. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showCustomStreamTargetCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/custom/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showCustomStreamTargetValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showCustomStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = showCustomStreamTargetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch a custom stream target
     * (Available from version 1.2) This operation shows the details of a specific custom stream target.
     * @param id The unique alphanumeric string that identifies the custom stream target. (required)
     * @return StreamTargetCustom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetCustom showCustomStreamTarget(String id) throws ApiException {
        CustomStreamTargetCreateInput resp = showCustomStreamTargetTransport(id);
        return resp.getStreamTargetCustom();
    }

    /**
     * Fetch a custom stream target - Transport Wrapped
     * (Available from version 1.2) This operation shows the details of a specific custom stream target.
     * @param id The unique alphanumeric string that identifies the custom stream target. (required)
     * @return CustomStreamTargetCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomStreamTargetCreateInput showCustomStreamTargetTransport(String id) throws ApiException {
        ApiResponse<CustomStreamTargetCreateInput> resp = showCustomStreamTargetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Fetch a custom stream target
     * (Available from version 1.2) This operation shows the details of a specific custom stream target.
     * @param id The unique alphanumeric string that identifies the custom stream target. (required)
     * @return ApiResponse&lt;CustomStreamTargetCreateInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomStreamTargetCreateInput> showCustomStreamTargetWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = showCustomStreamTargetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<CustomStreamTargetCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch a custom stream target (asynchronously)
     * (Available from version 1.2) This operation shows the details of a specific custom stream target.
     * @param id The unique alphanumeric string that identifies the custom stream target. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showCustomStreamTargetAsync(String id, final ApiCallback<CustomStreamTargetCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showCustomStreamTargetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomStreamTargetCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showStreamTarget
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showStreamTargetCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showStreamTargetValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = showStreamTargetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deprecated operation
     * &lt;em&gt;GET /stream_targets/[id]&lt;/em&gt; is deprecated. To retrieve a single stream target, use &lt;em&gt;GET /stream_targets/custom/[id]/&lt;em&gt;, GET /stream_targets/wowza/[&lt;em&gt;id]&lt;/em&gt;, or &lt;em&gt;GET /stream_targets/ull/[id]&lt;/em&gt; instead.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @return StreamTarget
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTarget showStreamTarget(String id) throws ApiException {
        ApiResponse<StreamTarget> resp = showStreamTargetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Deprecated operation
     * &lt;em&gt;GET /stream_targets/[id]&lt;/em&gt; is deprecated. To retrieve a single stream target, use &lt;em&gt;GET /stream_targets/custom/[id]/&lt;em&gt;, GET /stream_targets/wowza/[&lt;em&gt;id]&lt;/em&gt;, or &lt;em&gt;GET /stream_targets/ull/[id]&lt;/em&gt; instead.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;StreamTarget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamTarget> showStreamTargetWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = showStreamTargetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<StreamTarget>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deprecated operation (asynchronously)
     * &lt;em&gt;GET /stream_targets/[id]&lt;/em&gt; is deprecated. To retrieve a single stream target, use &lt;em&gt;GET /stream_targets/custom/[id]/&lt;em&gt;, GET /stream_targets/wowza/[&lt;em&gt;id]&lt;/em&gt;, or &lt;em&gt;GET /stream_targets/ull/[id]&lt;/em&gt; instead.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showStreamTargetAsync(String id, final ApiCallback<StreamTarget> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showStreamTargetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamTarget>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showStreamTargetGeoblock
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showStreamTargetGeoblockCall(String streamTargetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/{stream_target_id}/geoblock"
            .replaceAll("\\{" + "stream_target_id" + "\\}", apiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showStreamTargetGeoblockValidateBeforeCall(String streamTargetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling showStreamTargetGeoblock(Async)");
        }
        

        com.squareup.okhttp.Call call = showStreamTargetGeoblockCall(streamTargetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch geo-blocking for a Wowza stream target
     * This operation shows the details of geo-blocking applied to a specific stream target. Only Wowza stream targets can be geo-blocked.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return Geoblock
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Geoblock showStreamTargetGeoblock(String streamTargetId) throws ApiException {
        GeoblockCreateInput resp = showStreamTargetGeoblockTransport(streamTargetId);
        return resp.getGeoblock();
    }

    /**
     * Fetch geo-blocking for a Wowza stream target - Transport Wrapped
     * This operation shows the details of geo-blocking applied to a specific stream target. Only Wowza stream targets can be geo-blocked.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return GeoblockCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GeoblockCreateInput showStreamTargetGeoblockTransport(String streamTargetId) throws ApiException {
        ApiResponse<GeoblockCreateInput> resp = showStreamTargetGeoblockWithHttpInfo(streamTargetId);
        return resp.getData();
    }

    /**
     * Fetch geo-blocking for a Wowza stream target
     * This operation shows the details of geo-blocking applied to a specific stream target. Only Wowza stream targets can be geo-blocked.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;GeoblockCreateInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GeoblockCreateInput> showStreamTargetGeoblockWithHttpInfo(String streamTargetId) throws ApiException {
        com.squareup.okhttp.Call call = showStreamTargetGeoblockValidateBeforeCall(streamTargetId, null, null);
        Type localVarReturnType = new TypeToken<GeoblockCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch geo-blocking for a Wowza stream target (asynchronously)
     * This operation shows the details of geo-blocking applied to a specific stream target. Only Wowza stream targets can be geo-blocked.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showStreamTargetGeoblockAsync(String streamTargetId, final ApiCallback<GeoblockCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showStreamTargetGeoblockValidateBeforeCall(streamTargetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GeoblockCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showStreamTargetMetricsCurrent
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showStreamTargetMetricsCurrentCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/{id}/metrics/current"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showStreamTargetMetricsCurrentValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showStreamTargetMetricsCurrent(Async)");
        }
        

        com.squareup.okhttp.Call call = showStreamTargetMetricsCurrentCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch current health metrics for an active ultra low latency stream target
     * This operation returns a snapshot of the current connection and throughput details for an active ultra low latency stream target. The interval for current metrics is 30 seconds from the moment of the query.  &lt;br /&gt;&lt;br /&gt; &lt;blockquote&gt;**Note:** Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;. &lt;/blockquote&gt;
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @return StreamTargetMetricsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetMetricsResponse showStreamTargetMetricsCurrent(String id) throws ApiException {
        ApiResponse<StreamTargetMetricsResponse> resp = showStreamTargetMetricsCurrentWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Fetch current health metrics for an active ultra low latency stream target
     * This operation returns a snapshot of the current connection and throughput details for an active ultra low latency stream target. The interval for current metrics is 30 seconds from the moment of the query.  &lt;br /&gt;&lt;br /&gt; &lt;blockquote&gt;**Note:** Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;. &lt;/blockquote&gt;
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;StreamTargetMetricsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamTargetMetricsResponse> showStreamTargetMetricsCurrentWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = showStreamTargetMetricsCurrentValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<StreamTargetMetricsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch current health metrics for an active ultra low latency stream target (asynchronously)
     * This operation returns a snapshot of the current connection and throughput details for an active ultra low latency stream target. The interval for current metrics is 30 seconds from the moment of the query.  &lt;br /&gt;&lt;br /&gt; &lt;blockquote&gt;**Note:** Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;. &lt;/blockquote&gt;
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showStreamTargetMetricsCurrentAsync(String id, final ApiCallback<StreamTargetMetricsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showStreamTargetMetricsCurrentValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamTargetMetricsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showStreamTargetMetricsHistoric
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param from The start of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param to The end of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param interval The length of time for a block of metrics. The default is **10m** (10 minutes). (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showStreamTargetMetricsHistoricCall(String id, String from, String to, String interval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/{id}/metrics/historic"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));
        if (interval != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("interval", interval));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showStreamTargetMetricsHistoricValidateBeforeCall(String id, String from, String to, String interval, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showStreamTargetMetricsHistoric(Async)");
        }
        

        com.squareup.okhttp.Call call = showStreamTargetMetricsHistoricCall(id, from, to, interval, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch historic health metrics for an ultra low latency stream target
     * This operation shows historic connection and throughput details for an ultra low latency stream target.  &lt;br /&gt;&lt;blockquote&gt;**Note:** Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;. &lt;/blockquote&gt;
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param from The start of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param to The end of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param interval The length of time for a block of metrics. The default is **10m** (10 minutes). (optional)
     * @return StreamTargetMetricsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetMetricsResponse showStreamTargetMetricsHistoric(String id, String from, String to, String interval) throws ApiException {
        ApiResponse<StreamTargetMetricsResponse> resp = showStreamTargetMetricsHistoricWithHttpInfo(id, from, to, interval);
        return resp.getData();
    }

    /**
     * Fetch historic health metrics for an ultra low latency stream target
     * This operation shows historic connection and throughput details for an ultra low latency stream target.  &lt;br /&gt;&lt;blockquote&gt;**Note:** Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;. &lt;/blockquote&gt;
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param from The start of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param to The end of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param interval The length of time for a block of metrics. The default is **10m** (10 minutes). (optional)
     * @return ApiResponse&lt;StreamTargetMetricsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamTargetMetricsResponse> showStreamTargetMetricsHistoricWithHttpInfo(String id, String from, String to, String interval) throws ApiException {
        com.squareup.okhttp.Call call = showStreamTargetMetricsHistoricValidateBeforeCall(id, from, to, interval, null, null);
        Type localVarReturnType = new TypeToken<StreamTargetMetricsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch historic health metrics for an ultra low latency stream target (asynchronously)
     * This operation shows historic connection and throughput details for an ultra low latency stream target.  &lt;br /&gt;&lt;blockquote&gt;**Note:** Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;. &lt;/blockquote&gt;
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param from The start of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param to The end of the range of time used to aggregate the metrics. Express the value by using the ISO 8601 standard of &lt;strong&gt;YYYY-MM-DDTHH:MM:SSZ&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. (optional)
     * @param interval The length of time for a block of metrics. The default is **10m** (10 minutes). (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showStreamTargetMetricsHistoricAsync(String id, String from, String to, String interval, final ApiCallback<StreamTargetMetricsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showStreamTargetMetricsHistoricValidateBeforeCall(id, from, to, interval, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamTargetMetricsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showStreamTargetProperty
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param id The unique string that identifies the stream target property. The string contains the &lt;em&gt;section&lt;/em&gt; and the &lt;em&gt;key&lt;/em&gt;, connected by a dash. For example, &lt;strong&gt;hls-chunkSize&lt;/strong&gt;. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showStreamTargetPropertyCall(String streamTargetId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/{stream_target_id}/properties/{id}"
            .replaceAll("\\{" + "stream_target_id" + "\\}", apiClient.escapeString(streamTargetId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showStreamTargetPropertyValidateBeforeCall(String streamTargetId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling showStreamTargetProperty(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showStreamTargetProperty(Async)");
        }
        

        com.squareup.okhttp.Call call = showStreamTargetPropertyCall(streamTargetId, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch a property of a stream target
     * This operation shows the details of a specific property assigned to a specific stream target. Properties can be applied to a custom stream target or Wowza stream target whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param id The unique string that identifies the stream target property. The string contains the &lt;em&gt;section&lt;/em&gt; and the &lt;em&gt;key&lt;/em&gt;, connected by a dash. For example, &lt;strong&gt;hls-chunkSize&lt;/strong&gt;. (required)
     * @return StreamTargetProperty
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetProperty showStreamTargetProperty(String streamTargetId, String id) throws ApiException {
        StreamTargetPropertyCreateInput resp = showStreamTargetPropertyTransport(streamTargetId, id);
        return resp.getStreamTargetProperty();
    }

    /**
     * Fetch a property of a stream target - Transport Wrapped
     * This operation shows the details of a specific property assigned to a specific stream target. Properties can be applied to a custom stream target or Wowza stream target whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param id The unique string that identifies the stream target property. The string contains the &lt;em&gt;section&lt;/em&gt; and the &lt;em&gt;key&lt;/em&gt;, connected by a dash. For example, &lt;strong&gt;hls-chunkSize&lt;/strong&gt;. (required)
     * @return StreamTargetPropertyCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetPropertyCreateInput showStreamTargetPropertyTransport(String streamTargetId, String id) throws ApiException {
        ApiResponse<StreamTargetPropertyCreateInput> resp = showStreamTargetPropertyWithHttpInfo(streamTargetId, id);
        return resp.getData();
    }

    /**
     * Fetch a property of a stream target
     * This operation shows the details of a specific property assigned to a specific stream target. Properties can be applied to a custom stream target or Wowza stream target whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param id The unique string that identifies the stream target property. The string contains the &lt;em&gt;section&lt;/em&gt; and the &lt;em&gt;key&lt;/em&gt;, connected by a dash. For example, &lt;strong&gt;hls-chunkSize&lt;/strong&gt;. (required)
     * @return ApiResponse&lt;StreamTargetPropertyCreateInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamTargetPropertyCreateInput> showStreamTargetPropertyWithHttpInfo(String streamTargetId, String id) throws ApiException {
        com.squareup.okhttp.Call call = showStreamTargetPropertyValidateBeforeCall(streamTargetId, id, null, null);
        Type localVarReturnType = new TypeToken<StreamTargetPropertyCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch a property of a stream target (asynchronously)
     * This operation shows the details of a specific property assigned to a specific stream target. Properties can be applied to a custom stream target or Wowza stream target whose &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;akamai_cupertino&lt;/strong&gt;.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param id The unique string that identifies the stream target property. The string contains the &lt;em&gt;section&lt;/em&gt; and the &lt;em&gt;key&lt;/em&gt;, connected by a dash. For example, &lt;strong&gt;hls-chunkSize&lt;/strong&gt;. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showStreamTargetPropertyAsync(String streamTargetId, String id, final ApiCallback<StreamTargetPropertyCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showStreamTargetPropertyValidateBeforeCall(streamTargetId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamTargetPropertyCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showStreamTargetTokenAuth
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showStreamTargetTokenAuthCall(String streamTargetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/{stream_target_id}/token_auth"
            .replaceAll("\\{" + "stream_target_id" + "\\}", apiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showStreamTargetTokenAuthValidateBeforeCall(String streamTargetId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling showStreamTargetTokenAuth(Async)");
        }
        

        com.squareup.okhttp.Call call = showStreamTargetTokenAuthCall(streamTargetId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch token authorization for a Wowza stream target
     * This operation shows the details of the token authorization applied to a stream target. Only Wowza stream targets can use token authorization.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return TokenAuth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TokenAuth showStreamTargetTokenAuth(String streamTargetId) throws ApiException {
        TokenAuthCreateInput resp = showStreamTargetTokenAuthTransport(streamTargetId);
        return resp.getTokenAuth();
    }

    /**
     * Fetch token authorization for a Wowza stream target - Transport Wrapped
     * This operation shows the details of the token authorization applied to a stream target. Only Wowza stream targets can use token authorization.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return TokenAuthCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TokenAuthCreateInput showStreamTargetTokenAuthTransport(String streamTargetId) throws ApiException {
        ApiResponse<TokenAuthCreateInput> resp = showStreamTargetTokenAuthWithHttpInfo(streamTargetId);
        return resp.getData();
    }

    /**
     * Fetch token authorization for a Wowza stream target
     * This operation shows the details of the token authorization applied to a stream target. Only Wowza stream targets can use token authorization.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;TokenAuthCreateInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TokenAuthCreateInput> showStreamTargetTokenAuthWithHttpInfo(String streamTargetId) throws ApiException {
        com.squareup.okhttp.Call call = showStreamTargetTokenAuthValidateBeforeCall(streamTargetId, null, null);
        Type localVarReturnType = new TypeToken<TokenAuthCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch token authorization for a Wowza stream target (asynchronously)
     * This operation shows the details of the token authorization applied to a stream target. Only Wowza stream targets can use token authorization.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showStreamTargetTokenAuthAsync(String streamTargetId, final ApiCallback<TokenAuthCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showStreamTargetTokenAuthValidateBeforeCall(streamTargetId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TokenAuthCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showUllStreamTarget
     * @param id The unique alphanumeric string that identifies the ultra low latency stream target. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showUllStreamTargetCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/ull/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showUllStreamTargetValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showUllStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = showUllStreamTargetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch an ultra low latency stream target
     * (Available from version 1.2) This operation shows the details of a specific ultra low latency stream target.&lt;br /&gt;&lt;br /&gt;Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;.
     * @param id The unique alphanumeric string that identifies the ultra low latency stream target. (required)
     * @return StreamTargetUll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetUll showUllStreamTarget(String id) throws ApiException {
        UllStreamTargetCreateInput resp = showUllStreamTargetTransport(id);
        return resp.getStreamTargetUll();
    }

    /**
     * Fetch an ultra low latency stream target - Transport Wrapped
     * (Available from version 1.2) This operation shows the details of a specific ultra low latency stream target.&lt;br /&gt;&lt;br /&gt;Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;.
     * @param id The unique alphanumeric string that identifies the ultra low latency stream target. (required)
     * @return UllStreamTargetCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UllStreamTargetCreateInput showUllStreamTargetTransport(String id) throws ApiException {
        ApiResponse<UllStreamTargetCreateInput> resp = showUllStreamTargetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Fetch an ultra low latency stream target
     * (Available from version 1.2) This operation shows the details of a specific ultra low latency stream target.&lt;br /&gt;&lt;br /&gt;Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;.
     * @param id The unique alphanumeric string that identifies the ultra low latency stream target. (required)
     * @return ApiResponse&lt;UllStreamTargetCreateInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UllStreamTargetCreateInput> showUllStreamTargetWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = showUllStreamTargetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<UllStreamTargetCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch an ultra low latency stream target (asynchronously)
     * (Available from version 1.2) This operation shows the details of a specific ultra low latency stream target.&lt;br /&gt;&lt;br /&gt;Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;.
     * @param id The unique alphanumeric string that identifies the ultra low latency stream target. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showUllStreamTargetAsync(String id, final ApiCallback<UllStreamTargetCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showUllStreamTargetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UllStreamTargetCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showWowzaStreamTarget
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showWowzaStreamTargetCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/stream_targets/wowza/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showWowzaStreamTargetValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showWowzaStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = showWowzaStreamTargetCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch a Wowza stream target
     * (Available from version 1.2) This operation shows the details of a specific Wowza stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @return StreamTargetWowza
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetWowza showWowzaStreamTarget(String id) throws ApiException {
        WowzaStreamTargetCreateInput resp = showWowzaStreamTargetTransport(id);
        return resp.getStreamTargetWowza();
    }

    /**
     * Fetch a Wowza stream target - Transport Wrapped
     * (Available from version 1.2) This operation shows the details of a specific Wowza stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @return WowzaStreamTargetCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WowzaStreamTargetCreateInput showWowzaStreamTargetTransport(String id) throws ApiException {
        ApiResponse<WowzaStreamTargetCreateInput> resp = showWowzaStreamTargetWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Fetch a Wowza stream target
     * (Available from version 1.2) This operation shows the details of a specific Wowza stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @return ApiResponse&lt;WowzaStreamTargetCreateInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WowzaStreamTargetCreateInput> showWowzaStreamTargetWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = showWowzaStreamTargetValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<WowzaStreamTargetCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch a Wowza stream target (asynchronously)
     * (Available from version 1.2) This operation shows the details of a specific Wowza stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showWowzaStreamTargetAsync(String id, final ApiCallback<WowzaStreamTargetCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showWowzaStreamTargetValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WowzaStreamTargetCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateCustomStreamTarget
     * @param id The unique alphanumeric string that identifies the custom stream target. (required)
     * @param streamTargetUll Provide the details of the custom stream target to update in the body of the request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateCustomStreamTargetCall(String id, CustomStreamTargetCreateInput streamTargetUll, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = streamTargetUll;

        // create path and map variables
        String localVarPath = "/stream_targets/custom/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateCustomStreamTargetValidateBeforeCall(String id, CustomStreamTargetCreateInput streamTargetUll, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCustomStreamTarget(Async)");
        }
        
        // verify the required parameter 'streamTargetUll' is set
        if (streamTargetUll == null) {
            throw new ApiException("Missing the required parameter 'streamTargetUll' when calling updateCustomStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = updateCustomStreamTargetCall(id, streamTargetUll, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a custom stream target
     * (Available from version 1.2) This operation updates a custom stream target.
     * @param id The unique alphanumeric string that identifies the custom stream target. (required)
     * @param streamTargetCustom Provide the details of the custom stream target to update in the body of the request. (required)
     * @return StreamTargetCustom
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetCustom updateCustomStreamTarget(String id, StreamTargetCustom streamTargetCustom) throws ApiException {
	CustomStreamTargetCreateInput input = new CustomStreamTargetCreateInput();
	input.setStreamTargetCustom(streamTargetCustom);
        CustomStreamTargetCreateInput resp = updateCustomStreamTargetTransport(id, input);
        return resp.getStreamTargetCustom();
    }

    /**
     * Update a custom stream target - Transport Wrapped
     * (Available from version 1.2) This operation updates a custom stream target.
     * @param id The unique alphanumeric string that identifies the custom stream target. (required)
     * @param streamTargetUll Provide the details of the custom stream target to update in the body of the request. (required)
     * @return CustomStreamTargetCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CustomStreamTargetCreateInput updateCustomStreamTargetTransport(String id, CustomStreamTargetCreateInput streamTargetUll) throws ApiException {
        ApiResponse<CustomStreamTargetCreateInput> resp = updateCustomStreamTargetWithHttpInfo(id, streamTargetUll);
        return resp.getData();
    }

    /**
     * Update a custom stream target
     * (Available from version 1.2) This operation updates a custom stream target.
     * @param id The unique alphanumeric string that identifies the custom stream target. (required)
     * @param streamTargetUll Provide the details of the custom stream target to update in the body of the request. (required)
     * @return ApiResponse&lt;CustomStreamTargetCreateInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CustomStreamTargetCreateInput> updateCustomStreamTargetWithHttpInfo(String id, CustomStreamTargetCreateInput streamTargetUll) throws ApiException {
        com.squareup.okhttp.Call call = updateCustomStreamTargetValidateBeforeCall(id, streamTargetUll, null, null);
        Type localVarReturnType = new TypeToken<CustomStreamTargetCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a custom stream target (asynchronously)
     * (Available from version 1.2) This operation updates a custom stream target.
     * @param id The unique alphanumeric string that identifies the custom stream target. (required)
     * @param streamTargetUll Provide the details of the custom stream target to update in the body of the request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateCustomStreamTargetAsync(String id, CustomStreamTargetCreateInput streamTargetUll, final ApiCallback<CustomStreamTargetCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateCustomStreamTargetValidateBeforeCall(id, streamTargetUll, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CustomStreamTargetCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateStreamTarget
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param streamTarget Provide the details of the stream target to update in the body of the request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateStreamTargetCall(String id, StreamTargetCreateInput streamTarget, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = streamTarget;

        // create path and map variables
        String localVarPath = "/stream_targets/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStreamTargetValidateBeforeCall(String id, StreamTargetCreateInput streamTarget, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateStreamTarget(Async)");
        }
        
        // verify the required parameter 'streamTarget' is set
        if (streamTarget == null) {
            throw new ApiException("Missing the required parameter 'streamTarget' when calling updateStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = updateStreamTargetCall(id, streamTarget, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deprecated operation
     * &lt;em&gt;PATCH /stream_targets/[id]&lt;/em&gt; is deprecated. To update a stream target, use &lt;em&gt;PATCH /stream_targets/custom/[id]&lt;/em&gt;, &lt;em&gt;PATCH /stream_targets/wowza/[id]&lt;/em&gt;, or &lt;em&gt;PATCH /stream_targets/ull/[id]&lt;/em&gt; instead.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param streamTarget Provide the details of the stream target to update in the body of the request. (required)
     * @return StreamTarget
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTarget updateStreamTarget(String id, StreamTargetCreateInput streamTarget) throws ApiException {
        ApiResponse<StreamTarget> resp = updateStreamTargetWithHttpInfo(id, streamTarget);
        return resp.getData();
    }

    /**
     * Deprecated operation
     * &lt;em&gt;PATCH /stream_targets/[id]&lt;/em&gt; is deprecated. To update a stream target, use &lt;em&gt;PATCH /stream_targets/custom/[id]&lt;/em&gt;, &lt;em&gt;PATCH /stream_targets/wowza/[id]&lt;/em&gt;, or &lt;em&gt;PATCH /stream_targets/ull/[id]&lt;/em&gt; instead.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param streamTarget Provide the details of the stream target to update in the body of the request. (required)
     * @return ApiResponse&lt;StreamTarget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<StreamTarget> updateStreamTargetWithHttpInfo(String id, StreamTargetCreateInput streamTarget) throws ApiException {
        com.squareup.okhttp.Call call = updateStreamTargetValidateBeforeCall(id, streamTarget, null, null);
        Type localVarReturnType = new TypeToken<StreamTarget>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Deprecated operation (asynchronously)
     * &lt;em&gt;PATCH /stream_targets/[id]&lt;/em&gt; is deprecated. To update a stream target, use &lt;em&gt;PATCH /stream_targets/custom/[id]&lt;/em&gt;, &lt;em&gt;PATCH /stream_targets/wowza/[id]&lt;/em&gt;, or &lt;em&gt;PATCH /stream_targets/ull/[id]&lt;/em&gt; instead.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param streamTarget Provide the details of the stream target to update in the body of the request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateStreamTargetAsync(String id, StreamTargetCreateInput streamTarget, final ApiCallback<StreamTarget> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStreamTargetValidateBeforeCall(id, streamTarget, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<StreamTarget>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateStreamTargetGeoblock
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param geoblock Provide the details of the geo-blocking to update in the body of the request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateStreamTargetGeoblockCall(String streamTargetId, GeoblockCreateInput geoblock, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = geoblock;

        // create path and map variables
        String localVarPath = "/stream_targets/{stream_target_id}/geoblock"
            .replaceAll("\\{" + "stream_target_id" + "\\}", apiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStreamTargetGeoblockValidateBeforeCall(String streamTargetId, GeoblockCreateInput geoblock, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling updateStreamTargetGeoblock(Async)");
        }
        
        // verify the required parameter 'geoblock' is set
        if (geoblock == null) {
            throw new ApiException("Missing the required parameter 'geoblock' when calling updateStreamTargetGeoblock(Async)");
        }
        

        com.squareup.okhttp.Call call = updateStreamTargetGeoblockCall(streamTargetId, geoblock, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update geo-blocking for a Wowza stream target
     * This operation updates the geo-blocking applied to a stream target. Only Wowza stream targets can be geo-blocked. &lt;br /&gt;&lt;br /&gt;**Important:** After updating geo-blocking, you must [contact Support](https://www.wowza.com/portal/help) in order for your changes to take effect.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param geoblock Provide the details of the geo-blocking to update in the body of the request. (required)
     * @return Geoblock
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Geoblock updateStreamTargetGeoblock(String streamTargetId, Geoblock geoblock) throws ApiException {
	GeoblockCreateInput input = new GeoblockCreateInput();
	input.setGeoblock(geoblock);
        GeoblockCreateInput resp = updateStreamTargetGeoblockTransport(streamTargetId, input);
        return resp.getGeoblock();
    }

    /**
     * Update geo-blocking for a Wowza stream target - Transport Wrapped
     * This operation updates the geo-blocking applied to a stream target. Only Wowza stream targets can be geo-blocked. &lt;br /&gt;&lt;br /&gt;**Important:** After updating geo-blocking, you must [contact Support](https://www.wowza.com/portal/help) in order for your changes to take effect.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param geoblock Provide the details of the geo-blocking to update in the body of the request. (required)
     * @return GeoblockCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GeoblockCreateInput updateStreamTargetGeoblockTransport(String streamTargetId, GeoblockCreateInput geoblock) throws ApiException {
        ApiResponse<GeoblockCreateInput> resp = updateStreamTargetGeoblockWithHttpInfo(streamTargetId, geoblock);
        return resp.getData();
    }

    /**
     * Update geo-blocking for a Wowza stream target
     * This operation updates the geo-blocking applied to a stream target. Only Wowza stream targets can be geo-blocked. &lt;br /&gt;&lt;br /&gt;**Important:** After updating geo-blocking, you must [contact Support](https://www.wowza.com/portal/help) in order for your changes to take effect.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param geoblock Provide the details of the geo-blocking to update in the body of the request. (required)
     * @return ApiResponse&lt;GeoblockCreateInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GeoblockCreateInput> updateStreamTargetGeoblockWithHttpInfo(String streamTargetId, GeoblockCreateInput geoblock) throws ApiException {
        com.squareup.okhttp.Call call = updateStreamTargetGeoblockValidateBeforeCall(streamTargetId, geoblock, null, null);
        Type localVarReturnType = new TypeToken<GeoblockCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update geo-blocking for a Wowza stream target (asynchronously)
     * This operation updates the geo-blocking applied to a stream target. Only Wowza stream targets can be geo-blocked. &lt;br /&gt;&lt;br /&gt;**Important:** After updating geo-blocking, you must [contact Support](https://www.wowza.com/portal/help) in order for your changes to take effect.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param geoblock Provide the details of the geo-blocking to update in the body of the request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateStreamTargetGeoblockAsync(String streamTargetId, GeoblockCreateInput geoblock, final ApiCallback<GeoblockCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStreamTargetGeoblockValidateBeforeCall(streamTargetId, geoblock, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GeoblockCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateStreamTargetTokenAuth
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param tokenAuth Provide the details of the token authorization to update in the body of the request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateStreamTargetTokenAuthCall(String streamTargetId, TokenAuthCreateInput tokenAuth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = tokenAuth;

        // create path and map variables
        String localVarPath = "/stream_targets/{stream_target_id}/token_auth"
            .replaceAll("\\{" + "stream_target_id" + "\\}", apiClient.escapeString(streamTargetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateStreamTargetTokenAuthValidateBeforeCall(String streamTargetId, TokenAuthCreateInput tokenAuth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'streamTargetId' is set
        if (streamTargetId == null) {
            throw new ApiException("Missing the required parameter 'streamTargetId' when calling updateStreamTargetTokenAuth(Async)");
        }
        
        // verify the required parameter 'tokenAuth' is set
        if (tokenAuth == null) {
            throw new ApiException("Missing the required parameter 'tokenAuth' when calling updateStreamTargetTokenAuth(Async)");
        }
        

        com.squareup.okhttp.Call call = updateStreamTargetTokenAuthCall(streamTargetId, tokenAuth, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update token authorization for a Wowza stream target
     * This operation updates the token authorization applied to a stream target. Only Wowza stream targets can use token authorization. &lt;br /&gt;&lt;br /&gt;**Important:** After updating token authorization, you must [contact Support](https://www.wowza.com/portal/help) in order for your changes to take effect.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param tokenAuth Provide the details of the token authorization to update in the body of the request. (required)
     * @return TokenAuth
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TokenAuth updateStreamTargetTokenAuth(String streamTargetId, TokenAuth tokenAuth) throws ApiException {
	TokenAuthCreateInput input = new TokenAuthCreateInput();
	input.setTokenAuth(tokenAuth);
        TokenAuthCreateInput resp = updateStreamTargetTokenAuthTransport(streamTargetId, input);
        return resp.getTokenAuth();
    }


    /**
     * Update token authorization for a Wowza stream target - Transport Wrapped 
     * This operation updates the token authorization applied to a stream target. Only Wowza stream targets can use token authorization. &lt;br /&gt;&lt;br /&gt;**Important:** After updating token authorization, you must [contact Support](https://www.wowza.com/portal/help) in order for your changes to take effect.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param tokenAuth Provide the details of the token authorization to update in the body of the request. (required)
     * @return TokenAuthCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TokenAuthCreateInput updateStreamTargetTokenAuthTransport(String streamTargetId, TokenAuthCreateInput tokenAuth) throws ApiException {
        ApiResponse<TokenAuthCreateInput> resp = updateStreamTargetTokenAuthWithHttpInfo(streamTargetId, tokenAuth);
        return resp.getData();
    }

    /**
     * Update token authorization for a Wowza stream target
     * This operation updates the token authorization applied to a stream target. Only Wowza stream targets can use token authorization. &lt;br /&gt;&lt;br /&gt;**Important:** After updating token authorization, you must [contact Support](https://www.wowza.com/portal/help) in order for your changes to take effect.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param tokenAuth Provide the details of the token authorization to update in the body of the request. (required)
     * @return ApiResponse&lt;TokenAuthCreateInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TokenAuthCreateInput> updateStreamTargetTokenAuthWithHttpInfo(String streamTargetId, TokenAuthCreateInput tokenAuth) throws ApiException {
        com.squareup.okhttp.Call call = updateStreamTargetTokenAuthValidateBeforeCall(streamTargetId, tokenAuth, null, null);
        Type localVarReturnType = new TypeToken<TokenAuthCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update token authorization for a Wowza stream target (asynchronously)
     * This operation updates the token authorization applied to a stream target. Only Wowza stream targets can use token authorization. &lt;br /&gt;&lt;br /&gt;**Important:** After updating token authorization, you must [contact Support](https://www.wowza.com/portal/help) in order for your changes to take effect.
     * @param streamTargetId The unique alphanumeric string that identifies the stream target. (required)
     * @param tokenAuth Provide the details of the token authorization to update in the body of the request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateStreamTargetTokenAuthAsync(String streamTargetId, TokenAuthCreateInput tokenAuth, final ApiCallback<TokenAuthCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateStreamTargetTokenAuthValidateBeforeCall(streamTargetId, tokenAuth, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TokenAuthCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateUllStreamTarget
     * @param id The unique alphanumeric string that identifies the ultra low latency stream target. (required)
     * @param streamTargetUll Provide the details of the ultra low latency stream target to update in the body of the request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateUllStreamTargetCall(String id, UllStreamTargetCreateInput streamTargetUll, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = streamTargetUll;

        // create path and map variables
        String localVarPath = "/stream_targets/ull/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateUllStreamTargetValidateBeforeCall(String id, UllStreamTargetCreateInput streamTargetUll, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateUllStreamTarget(Async)");
        }
        
        // verify the required parameter 'streamTargetUll' is set
        if (streamTargetUll == null) {
            throw new ApiException("Missing the required parameter 'streamTargetUll' when calling updateUllStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = updateUllStreamTargetCall(id, streamTargetUll, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update an ultra low latency stream target
     * (Available from version 1.2) This operation updates an ultra low latency stream target.&lt;br /&gt;&lt;br /&gt;Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;.
     * @param id The unique alphanumeric string that identifies the ultra low latency stream target. (required)
     * @param streamTargetUll Provide the details of the ultra low latency stream target to update in the body of the request. (required)
     * @return StreamTargetUll
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetUll updateUllStreamTarget(String id, StreamTargetUll streamTargetUll) throws ApiException {
        UllStreamTargetCreateInput input = new UllStreamTargetCreateInput();
        input.setStreamTargetUll(streamTargetUll);
        UllStreamTargetCreateInput resp = updateUllStreamTargetTransport(id, input);
        return resp.getStreamTargetUll();
    }


    /**
     * Update an ultra low latency stream target - Transport Wrapped 
     * (Available from version 1.2) This operation updates an ultra low latency stream target.&lt;br /&gt;&lt;br /&gt;Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;.
     * @param id The unique alphanumeric string that identifies the ultra low latency stream target. (required)
     * @param streamTargetUll Provide the details of the ultra low latency stream target to update in the body of the request. (required)
     * @return UllStreamTargetCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UllStreamTargetCreateInput updateUllStreamTargetTransport(String id, UllStreamTargetCreateInput streamTargetUll) throws ApiException {
        ApiResponse<UllStreamTargetCreateInput> resp = updateUllStreamTargetWithHttpInfo(id, streamTargetUll);
        return resp.getData();
    }

    /**
     * Update an ultra low latency stream target
     * (Available from version 1.2) This operation updates an ultra low latency stream target.&lt;br /&gt;&lt;br /&gt;Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;.
     * @param id The unique alphanumeric string that identifies the ultra low latency stream target. (required)
     * @param streamTargetUll Provide the details of the ultra low latency stream target to update in the body of the request. (required)
     * @return ApiResponse&lt;UllStreamTargetCreateInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UllStreamTargetCreateInput> updateUllStreamTargetWithHttpInfo(String id, UllStreamTargetCreateInput streamTargetUll) throws ApiException {
        com.squareup.okhttp.Call call = updateUllStreamTargetValidateBeforeCall(id, streamTargetUll, null, null);
        Type localVarReturnType = new TypeToken<UllStreamTargetCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update an ultra low latency stream target (asynchronously)
     * (Available from version 1.2) This operation updates an ultra low latency stream target.&lt;br /&gt;&lt;br /&gt;Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;.
     * @param id The unique alphanumeric string that identifies the ultra low latency stream target. (required)
     * @param streamTargetUll Provide the details of the ultra low latency stream target to update in the body of the request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateUllStreamTargetAsync(String id, UllStreamTargetCreateInput streamTargetUll, final ApiCallback<UllStreamTargetCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateUllStreamTargetValidateBeforeCall(id, streamTargetUll, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UllStreamTargetCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateWowzaStreamTarget
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param streamTargetWowza Provide the details of the Wowza stream target to update in the body of the request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateWowzaStreamTargetCall(String id, WowzaStreamTargetCreateInput streamTargetWowza, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = streamTargetWowza;

        // create path and map variables
        String localVarPath = "/stream_targets/wowza/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateWowzaStreamTargetValidateBeforeCall(String id, WowzaStreamTargetCreateInput streamTargetWowza, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateWowzaStreamTarget(Async)");
        }
        
        // verify the required parameter 'streamTargetWowza' is set
        if (streamTargetWowza == null) {
            throw new ApiException("Missing the required parameter 'streamTargetWowza' when calling updateWowzaStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = updateWowzaStreamTargetCall(id, streamTargetWowza, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a Wowza stream target
     * (Available from version 1.2) This operation updates a Wowza stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param streamTargetWowza Provide the details of the Wowza stream target to update in the body of the request. (required)
     * @return StreamTargetWowza
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public StreamTargetWowza updateWowzaStreamTarget(String id, StreamTargetWowza streamTargetWowza) throws ApiException {
	WowzaStreamTargetCreateInput input = new WowzaStreamTargetCreateInput();
	input.setStreamTargetWowza(streamTargetWowza);
        WowzaStreamTargetCreateInput resp = updateWowzaStreamTargetTransport(id, input);
        return resp.getStreamTargetWowza();
    }

    /**
     * Update a Wowza stream target - Transport Wrapped
     * (Available from version 1.2) This operation updates a Wowza stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param streamTargetWowza Provide the details of the Wowza stream target to update in the body of the request. (required)
     * @return WowzaStreamTargetCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WowzaStreamTargetCreateInput updateWowzaStreamTargetTransport(String id, WowzaStreamTargetCreateInput streamTargetWowza) throws ApiException {
        ApiResponse<WowzaStreamTargetCreateInput> resp = updateWowzaStreamTargetWithHttpInfo(id, streamTargetWowza);
        return resp.getData();
    }

    /**
     * Update a Wowza stream target
     * (Available from version 1.2) This operation updates a Wowza stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param streamTargetWowza Provide the details of the Wowza stream target to update in the body of the request. (required)
     * @return ApiResponse&lt;WowzaStreamTargetCreateInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WowzaStreamTargetCreateInput> updateWowzaStreamTargetWithHttpInfo(String id, WowzaStreamTargetCreateInput streamTargetWowza) throws ApiException {
        com.squareup.okhttp.Call call = updateWowzaStreamTargetValidateBeforeCall(id, streamTargetWowza, null, null);
        Type localVarReturnType = new TypeToken<WowzaStreamTargetCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Wowza stream target (asynchronously)
     * (Available from version 1.2) This operation updates a Wowza stream target.
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param streamTargetWowza Provide the details of the Wowza stream target to update in the body of the request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateWowzaStreamTargetAsync(String id, WowzaStreamTargetCreateInput streamTargetWowza, final ApiCallback<WowzaStreamTargetCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateWowzaStreamTargetValidateBeforeCall(id, streamTargetWowza, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WowzaStreamTargetCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
