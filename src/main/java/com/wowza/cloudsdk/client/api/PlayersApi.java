/*
 * This code and all components Â© 2015 - 2019 Wowza Media Systems, LLC. All rights reserved.
 * This code is licensed pursuant to the BSD 3-Clause License.
 * 
 * Wowza Streaming Cloud REST API Reference Documentation
 *
 * OpenAPI spec version: v1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wowza.cloudsdk.client.api;

import com.wowza.cloudsdk.client.ApiCallback;
import com.wowza.cloudsdk.client.ApiClient;
import com.wowza.cloudsdk.client.ApiException;
import com.wowza.cloudsdk.client.ApiResponse;
import com.wowza.cloudsdk.client.Configuration;
import com.wowza.cloudsdk.client.Pair;
import com.wowza.cloudsdk.client.ProgressRequestBody;
import com.wowza.cloudsdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import com.wowza.cloudsdk.client.model.Player;
import com.wowza.cloudsdk.client.model.Url;
import com.wowza.cloudsdk.client.model.PlayerCreate;
import com.wowza.cloudsdk.client.model.IndexPlayer;
import com.wowza.cloudsdk.client.model.PlayerState;
import com.wowza.cloudsdk.client.model.PlayerCreateState;
import com.wowza.cloudsdk.client.model.PlayerUpdateInput;
import com.wowza.cloudsdk.client.model.Players;
import com.wowza.cloudsdk.client.model.UrlCreateInput;
import com.wowza.cloudsdk.client.model.Urls;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlayersApi {
    private ApiClient apiClient;

    public PlayersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlayersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createPlayerUrl
     * @param playerId The unique alphanumeric string that identifies the player. (required)
     * @param url Provide the details of the player URL to create in the body of the request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPlayerUrlCall(String playerId, UrlCreateInput url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = url;

        // create path and map variables
        String localVarPath = "/players/{player_id}/urls"
            .replaceAll("\\{" + "player_id" + "\\}", apiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPlayerUrlValidateBeforeCall(String playerId, UrlCreateInput url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling createPlayerUrl(Async)");
        }
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling createPlayerUrl(Async)");
        }
        

        com.squareup.okhttp.Call call = createPlayerUrlCall(playerId, url, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a player URL
     * This operation creates a new player URL.
     * @param playerId The unique alphanumeric string that identifies the player. (required)
     * @param url Provide the details of the player URL to create in the body of the request. (required)
     * @return Url
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Url createPlayerUrl(String playerId, Url url) throws ApiException {
	UrlCreateInput input = new UrlCreateInput();
	input.setUrl(url);
        UrlCreateInput resp = createPlayerUrlTransport(playerId, input);
        return resp.getUrl();
    }

    /**
     * Create a player URL - Transport Wrapped
     * This operation creates a new player URL.
     * @param playerId The unique alphanumeric string that identifies the player. (required)
     * @param url Provide the details of the player URL to create in the body of the request. (required)
     * @return UrlCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UrlCreateInput createPlayerUrlTransport(String playerId, UrlCreateInput url) throws ApiException {
        ApiResponse<UrlCreateInput> resp = createPlayerUrlWithHttpInfo(playerId, url);
        return resp.getData();
    }

    /**
     * Create a player URL
     * This operation creates a new player URL.
     * @param playerId The unique alphanumeric string that identifies the player. (required)
     * @param url Provide the details of the player URL to create in the body of the request. (required)
     * @return ApiResponse&lt;UrlCreateInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UrlCreateInput> createPlayerUrlWithHttpInfo(String playerId, UrlCreateInput url) throws ApiException {
        com.squareup.okhttp.Call call = createPlayerUrlValidateBeforeCall(playerId, url, null, null);
        Type localVarReturnType = new TypeToken<UrlCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a player URL (asynchronously)
     * This operation creates a new player URL.
     * @param playerId The unique alphanumeric string that identifies the player. (required)
     * @param url Provide the details of the player URL to create in the body of the request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPlayerUrlAsync(String playerId, UrlCreateInput url, final ApiCallback<UrlCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPlayerUrlValidateBeforeCall(playerId, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UrlCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePlayerUrl
     * @param playerId The unique alphanumeric string that identifies the player. (required)
     * @param id The unique alphanumeric string that identifies the player URL. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePlayerUrlCall(String playerId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{player_id}/urls/{id}"
            .replaceAll("\\{" + "player_id" + "\\}", apiClient.escapeString(playerId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePlayerUrlValidateBeforeCall(String playerId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling deletePlayerUrl(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletePlayerUrl(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePlayerUrlCall(playerId, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a player URL
     * This operation deletes a player URL. 
     * @param playerId The unique alphanumeric string that identifies the player. (required)
     * @param id The unique alphanumeric string that identifies the player URL. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePlayerUrl(String playerId, String id) throws ApiException {
        deletePlayerUrlWithHttpInfo(playerId, id);
    }

    /**
     * Delete a player URL
     * This operation deletes a player URL. 
     * @param playerId The unique alphanumeric string that identifies the player. (required)
     * @param id The unique alphanumeric string that identifies the player URL. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePlayerUrlWithHttpInfo(String playerId, String id) throws ApiException {
        com.squareup.okhttp.Call call = deletePlayerUrlValidateBeforeCall(playerId, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a player URL (asynchronously)
     * This operation deletes a player URL. 
     * @param playerId The unique alphanumeric string that identifies the player. (required)
     * @param id The unique alphanumeric string that identifies the player URL. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePlayerUrlAsync(String playerId, String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePlayerUrlValidateBeforeCall(playerId, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listPlayerUrls
     * @param playerId The unique alphanumeric string that identifies the player. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listPlayerUrlsCall(String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{player_id}/urls"
            .replaceAll("\\{" + "player_id" + "\\}", apiClient.escapeString(playerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listPlayerUrlsValidateBeforeCall(String playerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling listPlayerUrls(Async)");
        }
        

        com.squareup.okhttp.Call call = listPlayerUrlsCall(playerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch all player URLs
     * This operation shows the details of all player URLs.
     * @param playerId The unique alphanumeric string that identifies the player. (required)
     * @return List
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Url> listPlayerUrls(String playerId) throws ApiException {
        Urls resp = listPlayerUrlsTransport(playerId);
        return resp.getUrls();
    }

    /**
     * Fetch all player URLs - Transport Wrapped 
     * This operation shows the details of all player URLs.
     * @param playerId The unique alphanumeric string that identifies the player. (required)
     * @return Urls
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Urls listPlayerUrlsTransport(String playerId) throws ApiException {
        ApiResponse<Urls> resp = listPlayerUrlsWithHttpInfo(playerId);
        return resp.getData();
    }

    /**
     * Fetch all player URLs
     * This operation shows the details of all player URLs.
     * @param playerId The unique alphanumeric string that identifies the player. (required)
     * @return ApiResponse&lt;Urls&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Urls> listPlayerUrlsWithHttpInfo(String playerId) throws ApiException {
        com.squareup.okhttp.Call call = listPlayerUrlsValidateBeforeCall(playerId, null, null);
        Type localVarReturnType = new TypeToken<Urls>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch all player URLs (asynchronously)
     * This operation shows the details of all player URLs.
     * @param playerId The unique alphanumeric string that identifies the player. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listPlayerUrlsAsync(String playerId, final ApiCallback<Urls> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listPlayerUrlsValidateBeforeCall(playerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Urls>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listPlayers
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listPlayersCall(Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listPlayersValidateBeforeCall(Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listPlayersCall(page, perPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch all players
     * This operation shows limited details for all of your players. For detailed information, fetch a single player.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @return List
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IndexPlayer> listPlayers(Integer page, Integer perPage) throws ApiException {
        Players resp = listPlayersTransport(page, perPage);
        return resp.getPlayers();
    }

    /**
     * Fetch all players - Transport Wrapped
     * This operation shows limited details for all of your players. For detailed information, fetch a single player.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @return Players
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Players listPlayersTransport(Integer page, Integer perPage) throws ApiException {
        ApiResponse<Players> resp = listPlayersWithHttpInfo(page, perPage);
        return resp.getData();
    }

    /**
     * Fetch all players
     * This operation shows limited details for all of your players. For detailed information, fetch a single player.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @return ApiResponse&lt;Players&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Players> listPlayersWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = listPlayersValidateBeforeCall(page, perPage, null, null);
        Type localVarReturnType = new TypeToken<Players>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch all players (asynchronously)
     * This operation shows limited details for all of your players. For detailed information, fetch a single player.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listPlayersAsync(Integer page, Integer perPage, final ApiCallback<Players> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listPlayersValidateBeforeCall(page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Players>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for requestPlayerRebuild
     * @param id The unique alphanumeric string that identifies the player. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call requestPlayerRebuildCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{id}/rebuild"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call requestPlayerRebuildValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling requestPlayerRebuild(Async)");
        }
        

        com.squareup.okhttp.Call call = requestPlayerRebuildCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Rebuild player code
     * This operation rebuilds the player with the current configuration.
     * @param id The unique alphanumeric string that identifies the player. (required)
     * @return PlayerState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PlayerState requestPlayerRebuild(String id) throws ApiException {
        PlayerCreateState resp = requestPlayerRebuildTransport(id);
        return resp.getPlayerState();
    }

    /**
     * Rebuild player code - Transport Wrapped 
     * This operation rebuilds the player with the current configuration.
     * @param id The unique alphanumeric string that identifies the player. (required)
     * @return PlayerCreateState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PlayerCreateState requestPlayerRebuildTransport(String id) throws ApiException {
        ApiResponse<PlayerCreateState> resp = requestPlayerRebuildWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Rebuild player code
     * This operation rebuilds the player with the current configuration.
     * @param id The unique alphanumeric string that identifies the player. (required)
     * @return ApiResponse&lt;PlayerCreateState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PlayerCreateState> requestPlayerRebuildWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = requestPlayerRebuildValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<PlayerCreateState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Rebuild player code (asynchronously)
     * This operation rebuilds the player with the current configuration.
     * @param id The unique alphanumeric string that identifies the player. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call requestPlayerRebuildAsync(String id, final ApiCallback<PlayerCreateState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = requestPlayerRebuildValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlayerCreateState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showPlayer
     * @param id The unique alphanumeric string that identifies the player. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showPlayerCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showPlayerValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showPlayer(Async)");
        }
        

        com.squareup.okhttp.Call call = showPlayerCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch a player
     * This operation shows details of a specific player.
     * @param id The unique alphanumeric string that identifies the player. (required)
     * @return Player
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Player showPlayer(String id) throws ApiException {
        PlayerCreate resp = showPlayerTransport(id);
        return resp.getPlayer();
    }

    /**
     * Fetch a player - Transport Wrapped
     * This operation shows details of a specific player.
     * @param id The unique alphanumeric string that identifies the player. (required)
     * @return PlayerCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PlayerCreate showPlayerTransport(String id) throws ApiException {
        ApiResponse<PlayerCreate> resp = showPlayerWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Fetch a player
     * This operation shows details of a specific player.
     * @param id The unique alphanumeric string that identifies the player. (required)
     * @return ApiResponse&lt;PlayerCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PlayerCreate> showPlayerWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = showPlayerValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<PlayerCreate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch a player (asynchronously)
     * This operation shows details of a specific player.
     * @param id The unique alphanumeric string that identifies the player. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showPlayerAsync(String id, final ApiCallback<PlayerCreate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showPlayerValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlayerCreate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showPlayerState
     * @param id The unique alphanumeric string that identifies the player. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showPlayerStateCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{id}/state"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showPlayerStateValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showPlayerState(Async)");
        }
        

        com.squareup.okhttp.Call call = showPlayerStateCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch the state of a player
     * This operation shows the current state of a player.
     * @param id The unique alphanumeric string that identifies the player. (required)
     * @return PlayerState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PlayerState showPlayerState(String id) throws ApiException {
        PlayerCreateState resp = showPlayerStateTransport(id);
        return resp.getPlayerState();
    }

    /**
     * Fetch the state of a player - Transport Wrapped
     * This operation shows the current state of a player.
     * @param id The unique alphanumeric string that identifies the player. (required)
     * @return PlayerCreateState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PlayerCreateState showPlayerStateTransport(String id) throws ApiException {
        ApiResponse<PlayerCreateState> resp = showPlayerStateWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Fetch the state of a player
     * This operation shows the current state of a player.
     * @param id The unique alphanumeric string that identifies the player. (required)
     * @return ApiResponse&lt;PlayerCreateState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PlayerCreateState> showPlayerStateWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = showPlayerStateValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<PlayerCreateState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch the state of a player (asynchronously)
     * This operation shows the current state of a player.
     * @param id The unique alphanumeric string that identifies the player. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showPlayerStateAsync(String id, final ApiCallback<PlayerCreateState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showPlayerStateValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlayerCreateState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showPlayerUrl
     * @param playerId The unique alphanumeric string that identifies the player. (required)
     * @param id The unique alphanumeric string that identifies the player URL. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showPlayerUrlCall(String playerId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/players/{player_id}/urls/{id}"
            .replaceAll("\\{" + "player_id" + "\\}", apiClient.escapeString(playerId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showPlayerUrlValidateBeforeCall(String playerId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling showPlayerUrl(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showPlayerUrl(Async)");
        }
        

        com.squareup.okhttp.Call call = showPlayerUrlCall(playerId, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch a player URL
     * This operation shows the details of a player URL.
     * @param playerId The unique alphanumeric string that identifies the player. (required)
     * @param id The unique alphanumeric string that identifies the player URL. (required)
     * @return Url
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Url showPlayerUrl(String playerId, String id) throws ApiException {
        UrlCreateInput resp = showPlayerUrlTransport(playerId, id);
        return resp.getUrl();
    }

    /**
     * Fetch a player URL - Transport Wrapped
     * This operation shows the details of a player URL.
     * @param playerId The unique alphanumeric string that identifies the player. (required)
     * @param id The unique alphanumeric string that identifies the player URL. (required)
     * @return UrlCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UrlCreateInput showPlayerUrlTransport(String playerId, String id) throws ApiException {
        ApiResponse<UrlCreateInput> resp = showPlayerUrlWithHttpInfo(playerId, id);
        return resp.getData();
    }

    /**
     * Fetch a player URL
     * This operation shows the details of a player URL.
     * @param playerId The unique alphanumeric string that identifies the player. (required)
     * @param id The unique alphanumeric string that identifies the player URL. (required)
     * @return ApiResponse&lt;UrlCreateInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UrlCreateInput> showPlayerUrlWithHttpInfo(String playerId, String id) throws ApiException {
        com.squareup.okhttp.Call call = showPlayerUrlValidateBeforeCall(playerId, id, null, null);
        Type localVarReturnType = new TypeToken<UrlCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch a player URL (asynchronously)
     * This operation shows the details of a player URL.
     * @param playerId The unique alphanumeric string that identifies the player. (required)
     * @param id The unique alphanumeric string that identifies the player URL. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showPlayerUrlAsync(String playerId, String id, final ApiCallback<UrlCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showPlayerUrlValidateBeforeCall(playerId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UrlCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePlayer
     * @param id The unique alphanumeric string that identifies the player. (required)
     * @param player Provide the details of the player to update in the body of the request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePlayerCall(String id, PlayerUpdateInput player, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = player;

        // create path and map variables
        String localVarPath = "/players/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePlayerValidateBeforeCall(String id, PlayerUpdateInput player, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePlayer(Async)");
        }
        
        // verify the required parameter 'player' is set
        if (player == null) {
            throw new ApiException("Missing the required parameter 'player' when calling updatePlayer(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePlayerCall(id, player, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a player
     * This operation updates a player.
     * @param id The unique alphanumeric string that identifies the player. (required)
     * @param player Provide the details of the player to update in the body of the request. (required)
     * @return Player
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Player updatePlayer(String id, Player player) throws ApiException {
	PlayerUpdateInput playerUpdate = new PlayerUpdateInput();
	playerUpdate.setPlayer(player);
        PlayerCreate resp = updatePlayerTransport(id, playerUpdate);
        return resp.getPlayer();
    }

    /**
     * Update a player - Transport Wrapped 
     * This operation updates a player.
     * @param id The unique alphanumeric string that identifies the player. (required)
     * @param player Provide the details of the player to update in the body of the request. (required)
     * @return PlayerCreate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PlayerCreate updatePlayerTransport(String id, PlayerUpdateInput player) throws ApiException {
        ApiResponse<PlayerCreate> resp = updatePlayerWithHttpInfo(id, player);
        return resp.getData();
    }

    /**
     * Update a player
     * This operation updates a player.
     * @param id The unique alphanumeric string that identifies the player. (required)
     * @param player Provide the details of the player to update in the body of the request. (required)
     * @return ApiResponse&lt;PlayerCreate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PlayerCreate> updatePlayerWithHttpInfo(String id, PlayerUpdateInput player) throws ApiException {
        com.squareup.okhttp.Call call = updatePlayerValidateBeforeCall(id, player, null, null);
        Type localVarReturnType = new TypeToken<PlayerCreate>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a player (asynchronously)
     * This operation updates a player.
     * @param id The unique alphanumeric string that identifies the player. (required)
     * @param player Provide the details of the player to update in the body of the request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePlayerAsync(String id, PlayerUpdateInput player, final ApiCallback<PlayerCreate> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePlayerValidateBeforeCall(id, player, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PlayerCreate>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePlayerUrl
     * @param playerId The unique alphanumeric string that identifies the player. (required)
     * @param id The unique alphanumeric string that identifies the player URL. (required)
     * @param url Provide the details of the player URL to update in the body of the request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePlayerUrlCall(String playerId, String id, UrlCreateInput url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = url;

        // create path and map variables
        String localVarPath = "/players/{player_id}/urls/{id}"
            .replaceAll("\\{" + "player_id" + "\\}", apiClient.escapeString(playerId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePlayerUrlValidateBeforeCall(String playerId, String id, UrlCreateInput url, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'playerId' is set
        if (playerId == null) {
            throw new ApiException("Missing the required parameter 'playerId' when calling updatePlayerUrl(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePlayerUrl(Async)");
        }
        
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling updatePlayerUrl(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePlayerUrlCall(playerId, id, url, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a player URL
     * This operation updates a player URL.
     * @param playerId The unique alphanumeric string that identifies the player. (required)
     * @param id The unique alphanumeric string that identifies the player URL. (required)
     * @param url Provide the details of the player URL to update in the body of the request. (required)
     * @return Url
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Url updatePlayerUrl(String playerId, String id, Url url) throws ApiException {
	UrlCreateInput input = new UrlCreateInput();
	input.setUrl(url);
        UrlCreateInput resp = updatePlayerUrlTransport(playerId, id, input);
        return resp.getUrl();
    }

    /**
     * Update a player URL - Transport Wrapped
     * This operation updates a player URL.
     * @param playerId The unique alphanumeric string that identifies the player. (required)
     * @param id The unique alphanumeric string that identifies the player URL. (required)
     * @param url Provide the details of the player URL to update in the body of the request. (required)
     * @return UrlCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UrlCreateInput updatePlayerUrlTransport(String playerId, String id, UrlCreateInput url) throws ApiException {
        ApiResponse<UrlCreateInput> resp = updatePlayerUrlWithHttpInfo(playerId, id, url);
        return resp.getData();
    }

    /**
     * Update a player URL
     * This operation updates a player URL.
     * @param playerId The unique alphanumeric string that identifies the player. (required)
     * @param id The unique alphanumeric string that identifies the player URL. (required)
     * @param url Provide the details of the player URL to update in the body of the request. (required)
     * @return ApiResponse&lt;UrlCreateInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UrlCreateInput> updatePlayerUrlWithHttpInfo(String playerId, String id, UrlCreateInput url) throws ApiException {
        com.squareup.okhttp.Call call = updatePlayerUrlValidateBeforeCall(playerId, id, url, null, null);
        Type localVarReturnType = new TypeToken<UrlCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a player URL (asynchronously)
     * This operation updates a player URL.
     * @param playerId The unique alphanumeric string that identifies the player. (required)
     * @param id The unique alphanumeric string that identifies the player URL. (required)
     * @param url Provide the details of the player URL to update in the body of the request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePlayerUrlAsync(String playerId, String id, UrlCreateInput url, final ApiCallback<UrlCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePlayerUrlValidateBeforeCall(playerId, id, url, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UrlCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
