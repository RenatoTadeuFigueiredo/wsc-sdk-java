/*
 * This code and all components Â© 2015 - 2019 Wowza Media Systems, LLC. All rights reserved.
 * This code is licensed pursuant to the BSD 3-Clause License.
 * 
 * Wowza Streaming Cloud REST API Reference Documentation
 *
 * OpenAPI spec version: v1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wowza.cloudsdk.client.api;

import com.wowza.cloudsdk.client.ApiCallback;
import com.wowza.cloudsdk.client.ApiClient;
import com.wowza.cloudsdk.client.ApiException;
import com.wowza.cloudsdk.client.ApiResponse;
import com.wowza.cloudsdk.client.Configuration;
import com.wowza.cloudsdk.client.Pair;
import com.wowza.cloudsdk.client.ProgressRequestBody;
import com.wowza.cloudsdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.wowza.cloudsdk.client.model.LiveStream;
import com.wowza.cloudsdk.client.model.LiveStreamActionState;
import com.wowza.cloudsdk.client.model.LiveStreamCreateActionState;
import com.wowza.cloudsdk.client.model.LiveStreamState;
import com.wowza.cloudsdk.client.model.LiveStreamCreateState;
import com.wowza.cloudsdk.client.model.LiveStreamConnectioncode;
import com.wowza.cloudsdk.client.model.LiveStreamCreateConnectioncode;
import com.wowza.cloudsdk.client.model.LiveStreamCreateThumbnail;
import com.wowza.cloudsdk.client.model.LiveStreamCreateMetrics;
import com.wowza.cloudsdk.client.model.LiveStreamThumbnail;
import com.wowza.cloudsdk.client.model.ShmMetrics;
import com.wowza.cloudsdk.client.model.LiveStreams;
import com.wowza.cloudsdk.client.model.LiveStreamCreateInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LiveStreamsApi {
    private ApiClient apiClient;

    public LiveStreamsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LiveStreamsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createLiveStream
     * @param liveStream Provide the details of the live stream to create in the body of the request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createLiveStreamCall(LiveStreamCreateInput liveStream, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = liveStream;

        // create path and map variables
        String localVarPath = "/live_streams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createLiveStreamValidateBeforeCall(LiveStreamCreateInput liveStream, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'liveStream' is set
        if (liveStream == null) {
            throw new ApiException("Missing the required parameter 'liveStream' when calling createLiveStream(Async)");
        }
        

        com.squareup.okhttp.Call call = createLiveStreamCall(liveStream, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a live stream
     * This operation creates a live stream.
     * @param liveStream Provide the details of the live stream to create in the body of the request. (required)
     * @return LiveStream
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveStream createLiveStream(LiveStream liveStream) throws ApiException {
	LiveStreamCreateInput liveStreamInput = new LiveStreamCreateInput();
	liveStreamInput.setLiveStream(liveStream);
	LiveStreamCreateInput liveStreamOutput = createLiveStreamTransport(liveStreamInput);
	return liveStreamOutput.getLiveStream();
	}

    /**
     * Create a live stream - Transport Wrapped
     * This operation creates a live stream.
     * @param liveStreamCreateInput Provide the details of the live stream to create in the body of the request. (required)
     * @return LiveStreamCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveStreamCreateInput createLiveStreamTransport(LiveStreamCreateInput liveStreamCreateInput) throws ApiException {
        ApiResponse<LiveStreamCreateInput> resp = createLiveStreamWithHttpInfo(liveStreamCreateInput);
        return resp.getData();
    }

    /**
     * Create a live stream
     * This operation creates a live stream.
     * @param liveStream Provide the details of the live stream to create in the body of the request. (required)
     * @return ApiResponse&lt;LiveStream&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LiveStreamCreateInput> createLiveStreamWithHttpInfo(LiveStreamCreateInput liveStream) throws ApiException {
        com.squareup.okhttp.Call call = createLiveStreamValidateBeforeCall(liveStream, null, null);
        Type localVarReturnType = new TypeToken<LiveStreamCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a live stream (asynchronously)
     * This operation creates a live stream.
     * @param liveStream Provide the details of the live stream to create in the body of the request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createLiveStreamAsync(LiveStreamCreateInput liveStream, final ApiCallback<LiveStream> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createLiveStreamValidateBeforeCall(liveStream, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LiveStreamCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteLiveStream
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLiveStreamCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live_streams/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLiveStreamValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteLiveStream(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteLiveStreamCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete a live stream
     * This operation deletes a live stream, including all assigned outputs and targets.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLiveStream(String id) throws ApiException {
        deleteLiveStreamWithHttpInfo(id);
    }

    /**
     * Delete a live stream
     * This operation deletes a live stream, including all assigned outputs and targets.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLiveStreamWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deleteLiveStreamValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a live stream (asynchronously)
     * This operation deletes a live stream, including all assigned outputs and targets.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLiveStreamAsync(String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLiveStreamValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for listLiveStreams
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call listLiveStreamsCall(Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live_streams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (page != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page", page));
        if (perPage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("per_page", perPage));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call listLiveStreamsValidateBeforeCall(Integer page, Integer perPage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = listLiveStreamsCall(page, perPage, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch all live streams
     * This operation shows limited details for all of your live streams. For detailed information, fetch a single live stream.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @return LiveStreams
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveStreams listLiveStreams(Integer page, Integer perPage) throws ApiException {
        ApiResponse<LiveStreams> resp = listLiveStreamsWithHttpInfo(page, perPage);
        return resp.getData();
    }

    /**
     * Fetch all live streams
     * This operation shows limited details for all of your live streams. For detailed information, fetch a single live stream.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @return ApiResponse&lt;LiveStreams&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LiveStreams> listLiveStreamsWithHttpInfo(Integer page, Integer perPage) throws ApiException {
        com.squareup.okhttp.Call call = listLiveStreamsValidateBeforeCall(page, perPage, null, null);
        Type localVarReturnType = new TypeToken<LiveStreams>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch all live streams (asynchronously)
     * This operation shows limited details for all of your live streams. For detailed information, fetch a single live stream.
     * @param page Returns a paginated view of results from the HTTP request. Specify a positive integer to indicate which page of the results should be displayed. The default is &lt;strong&gt;1&lt;/strong&gt;.&lt;br /&gt;&lt;br /&gt;For more information and examples, see &lt;a href&#x3D;&#39;https://www.wowza.com/docs/how-to-get-paginated-query-results-with-the-wowza-streaming-cloud-rest-api&#39; target&#x3D;&#39;_blank&#39;&gt;Get paginated query results with the Wowza Streaming Cloud REST API&lt;/a&gt;. (optional)
     * @param perPage For use with the &lt;em&gt;page&lt;/em&gt; parameter. Indicates how many records should be included in a page of results. A valid value is any positive integer. The default and maximum value is &lt;strong&gt;1000&lt;/strong&gt;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call listLiveStreamsAsync(Integer page, Integer perPage, final ApiCallback<LiveStreams> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = listLiveStreamsValidateBeforeCall(page, perPage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LiveStreams>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for regenerateConnectionCodeLiveStream
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call regenerateConnectionCodeLiveStreamCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live_streams/{id}/regenerate_connection_code"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call regenerateConnectionCodeLiveStreamValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling regenerateConnectionCodeLiveStream(Async)");
        }
        

        com.squareup.okhttp.Call call = regenerateConnectionCodeLiveStreamCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Regenerate the connection code for a live stream
     * This operation regenerates the connection code of a live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return LiveStreamConnectioncode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveStreamConnectioncode regenerateConnectionCodeLiveStream(String id) throws ApiException {
        LiveStreamCreateConnectioncode resp = regenerateConnectionCodeLiveStreamTransport(id);
        return resp.getLiveStreamConnectioncode();
    }

    /**
     * Regenerate the connection code for a live stream - Transport Wrapped 
     * This operation regenerates the connection code of a live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return LiveStreamCreateConnectioncode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveStreamCreateConnectioncode regenerateConnectionCodeLiveStreamTransport(String id) throws ApiException {
        ApiResponse<LiveStreamCreateConnectioncode> resp = regenerateConnectionCodeLiveStreamWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Regenerate the connection code for a live stream
     * This operation regenerates the connection code of a live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return ApiResponse&lt;LiveStreamConnectioncode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LiveStreamCreateConnectioncode> regenerateConnectionCodeLiveStreamWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = regenerateConnectionCodeLiveStreamValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<LiveStreamCreateConnectioncode>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Regenerate the connection code for a live stream (asynchronously)
     * This operation regenerates the connection code of a live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call regenerateConnectionCodeLiveStreamAsync(String id, final ApiCallback<LiveStreamCreateConnectioncode> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = regenerateConnectionCodeLiveStreamValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LiveStreamCreateConnectioncode>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resetLiveStream
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resetLiveStreamCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live_streams/{id}/reset"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resetLiveStreamValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resetLiveStream(Async)");
        }
        

        com.squareup.okhttp.Call call = resetLiveStreamCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Reset a live stream
     * This operation resets a live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return LiveStreamActionState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveStreamActionState resetLiveStream(String id) throws ApiException {
        LiveStreamCreateActionState resp = resetLiveStreamTransport(id);
        return resp.getLiveStreamActionState();
    }

    /**
     * Reset a live stream - Transport Wrapped
     * This operation resets a live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return LiveStreamCreateActionState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveStreamCreateActionState resetLiveStreamTransport(String id) throws ApiException {
        ApiResponse<LiveStreamCreateActionState> resp = resetLiveStreamWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Reset a live stream
     * This operation resets a live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return ApiResponse&lt;LiveStreamState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LiveStreamCreateActionState> resetLiveStreamWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = resetLiveStreamValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<LiveStreamCreateActionState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Reset a live stream (asynchronously)
     * This operation resets a live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resetLiveStreamAsync(String id, final ApiCallback<LiveStreamCreateActionState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resetLiveStreamValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LiveStreamCreateActionState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showLiveStream
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showLiveStreamCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live_streams/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showLiveStreamValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showLiveStream(Async)");
        }
        

        com.squareup.okhttp.Call call = showLiveStreamCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch a live stream
     * This operation shows the details of a specific live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return LiveStream
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveStream showLiveStream(String id) throws ApiException {
        LiveStreamCreateInput output = showLiveStreamTransport(id);
        return output.getLiveStream();
    }


    /**
     * Fetch a live stream - Transport Wrapped
     * This operation shows the details of a specific live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return LiveStreamCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveStreamCreateInput showLiveStreamTransport(String id) throws ApiException {
        ApiResponse<LiveStreamCreateInput> resp = showLiveStreamWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Fetch a live stream
     * This operation shows the details of a specific live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return ApiResponse&lt;LiveStream&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LiveStreamCreateInput> showLiveStreamWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = showLiveStreamValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<LiveStreamCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch a live stream (asynchronously)
     * This operation shows the details of a specific live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showLiveStreamAsync(String id, final ApiCallback<LiveStream> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showLiveStreamValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LiveStreamCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showLiveStreamState
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showLiveStreamStateCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live_streams/{id}/state"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showLiveStreamStateValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showLiveStreamState(Async)");
        }
        

        com.squareup.okhttp.Call call = showLiveStreamStateCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch the state of a live stream
     * This operation shows the current state of a live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return LiveStreamState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveStreamState showLiveStreamState(String id) throws ApiException {
        LiveStreamCreateState resp = showLiveStreamStateTransport(id);
        return resp.getLiveStreamState();
    }

    /**
     * Fetch the state of a live stream - Transport Wrapped
     * This operation shows the current state of a live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return LiveStreamCreateState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveStreamCreateState showLiveStreamStateTransport(String id) throws ApiException {
        ApiResponse<LiveStreamCreateState> resp = showLiveStreamStateWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Fetch the state of a live stream
     * This operation shows the current state of a live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return ApiResponse&lt;LiveStreamState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LiveStreamCreateState> showLiveStreamStateWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = showLiveStreamStateValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<LiveStreamCreateState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch the state of a live stream (asynchronously)
     * This operation shows the current state of a live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showLiveStreamStateAsync(String id, final ApiCallback<LiveStreamCreateState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showLiveStreamStateValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LiveStreamCreateState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showLiveStreamStats
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showLiveStreamStatsCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live_streams/{id}/stats"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showLiveStreamStatsValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showLiveStreamStats(Async)");
        }
        

        com.squareup.okhttp.Call call = showLiveStreamStatsCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch metrics for an active live stream
     * This operation returns a hash of metrics keys, each of which identifies a status, text description, unit, and value.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return ShmMetrics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ShmMetrics showLiveStreamStats(String id) throws ApiException {
        LiveStreamCreateMetrics resp = showLiveStreamStatsTransport(id);
        return resp.getLiveStreamMetrics();
    }

    /**
     * Fetch metrics for an active live stream - Transport Wrapped
     * This operation returns a hash of metrics keys, each of which identifies a status, text description, unit, and value.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return LiveStreamCreateMetrics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveStreamCreateMetrics showLiveStreamStatsTransport(String id) throws ApiException {
        ApiResponse<LiveStreamCreateMetrics> resp = showLiveStreamStatsWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Fetch metrics for an active live stream
     * This operation returns a hash of metrics keys, each of which identifies a status, text description, unit, and value.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return ApiResponse&lt;ShmMetrics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LiveStreamCreateMetrics> showLiveStreamStatsWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = showLiveStreamStatsValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<LiveStreamCreateMetrics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch metrics for an active live stream (asynchronously)
     * This operation returns a hash of metrics keys, each of which identifies a status, text description, unit, and value.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showLiveStreamStatsAsync(String id, final ApiCallback<LiveStreamCreateMetrics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showLiveStreamStatsValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LiveStreamCreateMetrics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for showLiveStreamThumbnailUrl
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showLiveStreamThumbnailUrlCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live_streams/{id}/thumbnail_url"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showLiveStreamThumbnailUrlValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showLiveStreamThumbnailUrl(Async)");
        }
        

        com.squareup.okhttp.Call call = showLiveStreamThumbnailUrlCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch the thumbnail URL of a live stream
     * This operation shows the thumbnail URL of a started live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return LiveStreamThumbnail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveStreamThumbnail showLiveStreamThumbnailUrl(String id) throws ApiException {
        LiveStreamCreateThumbnail liveStreamThumbnail = showLiveStreamThumbnailUrlTransport(id);
	return liveStreamThumbnail.getLiveStreamThumbnailUrl();
    }

    /**
     * Fetch the thumbnail URL of a live stream - Transport Wrapped
     * This operation shows the thumbnail URL of a started live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return LiveStreamCreateThumbnail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveStreamCreateThumbnail showLiveStreamThumbnailUrlTransport(String id) throws ApiException {
        ApiResponse<LiveStreamCreateThumbnail> resp = showLiveStreamThumbnailUrlWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Fetch the thumbnail URL of a live stream
     * This operation shows the thumbnail URL of a started live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return ApiResponse&lt;LiveStreamThumbnail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LiveStreamCreateThumbnail> showLiveStreamThumbnailUrlWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = showLiveStreamThumbnailUrlValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<LiveStreamCreateThumbnail>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch the thumbnail URL of a live stream (asynchronously)
     * This operation shows the thumbnail URL of a started live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showLiveStreamThumbnailUrlAsync(String id, final ApiCallback<LiveStreamCreateThumbnail> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showLiveStreamThumbnailUrlValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LiveStreamCreateThumbnail>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for startLiveStream
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call startLiveStreamCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live_streams/{id}/start"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call startLiveStreamValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling startLiveStream(Async)");
        }
        

        com.squareup.okhttp.Call call = startLiveStreamCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Start a live stream
     * This operation starts a live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return LiveStreamActionState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveStreamActionState startLiveStream(String id) throws ApiException {
        LiveStreamCreateActionState resp = startLiveStreamWithHttpInfoTransport(id);
        return resp.getLiveStreamActionState();
    }

    /**
     * Start a live stream - Transport Wrapped
     * This operation starts a live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return LiveStreamCreateActionState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveStreamCreateActionState startLiveStreamWithHttpInfoTransport(String id) throws ApiException {
        ApiResponse<LiveStreamCreateActionState> resp = startLiveStreamWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Start a live stream
     * This operation starts a live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return ApiResponse&lt;LiveStreamState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LiveStreamCreateActionState> startLiveStreamWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = startLiveStreamValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<LiveStreamCreateActionState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Start a live stream (asynchronously)
     * This operation starts a live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call startLiveStreamAsync(String id, final ApiCallback<LiveStreamCreateActionState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = startLiveStreamValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LiveStreamCreateActionState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for stopLiveStream
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopLiveStreamCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/live_streams/{id}/stop"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopLiveStreamValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling stopLiveStream(Async)");
        }
        

        com.squareup.okhttp.Call call = stopLiveStreamCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Stop a live stream
     * This operation stops a live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return LiveStreamActionState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveStreamActionState stopLiveStream(String id) throws ApiException {
        LiveStreamCreateActionState resp = stopLiveStreamTransport(id);
        return resp.getLiveStreamActionState();
    }

    /**
     * Stop a live stream - Transport Wrapped
     * This operation stops a live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return LiveStreamCreateActionState
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveStreamCreateActionState stopLiveStreamTransport(String id) throws ApiException {
        ApiResponse<LiveStreamCreateActionState> resp = stopLiveStreamWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Stop a live stream
     * This operation stops a live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @return ApiResponse&lt;LiveStreamState&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LiveStreamCreateActionState> stopLiveStreamWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = stopLiveStreamValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<LiveStreamCreateActionState>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stop a live stream (asynchronously)
     * This operation stops a live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopLiveStreamAsync(String id, final ApiCallback<LiveStreamCreateActionState> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopLiveStreamValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LiveStreamCreateActionState>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateLiveStream
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @param liveStream Provide the details of the live stream to update in the body of the request. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateLiveStreamCall(String id, LiveStreamCreateInput liveStream, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = liveStream;

        // create path and map variables
        String localVarPath = "/live_streams/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateLiveStreamValidateBeforeCall(String id, LiveStreamCreateInput liveStream, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateLiveStream(Async)");
        }
        
        // verify the required parameter 'liveStream' is set
        if (liveStream == null) {
            throw new ApiException("Missing the required parameter 'liveStream' when calling updateLiveStream(Async)");
        }
        

        com.squareup.okhttp.Call call = updateLiveStreamCall(id, liveStream, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a live stream
     * This operation updates a live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @param liveStream Provide the details of the live stream to update in the body of the request. (required)
     * @return LiveStream
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveStream updateLiveStream(String id, LiveStream liveStream) throws ApiException {
        LiveStreamCreateInput resp = updateLiveStreamTransport(id, liveStream);
        return resp.getLiveStream();
    }

    /**
     * Update a live stream - Transport Wrapped
     * This operation updates a live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @param liveStream Provide the details of the live stream to update in the body of the request. (required)
     * @return LiveStreamCreateInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LiveStreamCreateInput updateLiveStreamTransport(String id, LiveStream liveStream) throws ApiException {
	LiveStreamCreateInput liveStreamCreate = new LiveStreamCreateInput();
	liveStreamCreate.setLiveStream(liveStream);
        ApiResponse<LiveStreamCreateInput> resp = updateLiveStreamWithHttpInfo(id, liveStreamCreate);
        return resp.getData();
    }

    /**
     * Update a live stream
     * This operation updates a live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @param liveStream Provide the details of the live stream to update in the body of the request. (required)
     * @return ApiResponse&lt;LiveStream&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LiveStreamCreateInput> updateLiveStreamWithHttpInfo(String id, LiveStreamCreateInput liveStream) throws ApiException {
        com.squareup.okhttp.Call call = updateLiveStreamValidateBeforeCall(id, liveStream, null, null);
        Type localVarReturnType = new TypeToken<LiveStreamCreateInput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a live stream (asynchronously)
     * This operation updates a live stream.
     * @param id The unique alphanumeric string that identifies the live stream. (required)
     * @param liveStream Provide the details of the live stream to update in the body of the request. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateLiveStreamAsync(String id, LiveStreamCreateInput liveStream, final ApiCallback<LiveStreamCreateInput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateLiveStreamValidateBeforeCall(id, liveStream, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LiveStreamCreateInput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
