/*
 * This code and all components Â© 2015 - 2019 Wowza Media Systems, LLC. All rights reserved.
 * This code is licensed pursuant to the BSD 3-Clause License.
 * 
 * Wowza Streaming Cloud REST API Reference Documentation
 *
 * OpenAPI spec version: v1.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wowza.cloudsdk.client.api;

import com.wowza.cloudsdk.client.ApiCallback;
import com.wowza.cloudsdk.client.ApiClient;
import com.wowza.cloudsdk.client.ApiException;
import com.wowza.cloudsdk.client.ApiResponse;
import com.wowza.cloudsdk.client.Configuration;
import com.wowza.cloudsdk.client.Pair;
import com.wowza.cloudsdk.client.ProgressRequestBody;
import com.wowza.cloudsdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import java.time.OffsetDateTime;
import com.wowza.cloudsdk.client.model.UsageViewerDataStreamTarget;
import com.wowza.cloudsdk.client.model.ViewerDataStreamTarget;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ViewerDataApi {
    private ApiClient apiClient;

    public ViewerDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ViewerDataApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for showViewerDataStreamTarget
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param from The start of the range of time you want to view. Specify &lt;strong&gt;YYYY-MM-DD HH:MM:SS&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. The &lt;em&gt;from&lt;/em&gt; default is the last billing date. (optional)
     * @param to The end of the range of time you want to view. Specify &lt;strong&gt;YYYY-MM-DD HH:MM:SS&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. The &lt;em&gt;to&lt;/em&gt; default is the end of the current day. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call showViewerDataStreamTargetCall(String id, OffsetDateTime from, OffsetDateTime to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usage/viewer_data/stream_targets/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (from != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("from", from));
        if (to != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("to", to));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "wsc-access-key", "wsc-api-key", "wsc-signature", "wsc-timestamp" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call showViewerDataStreamTargetValidateBeforeCall(String id, OffsetDateTime from, OffsetDateTime to, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling showViewerDataStreamTarget(Async)");
        }
        

        com.squareup.okhttp.Call call = showViewerDataStreamTargetCall(id, from, to, progressListener, progressRequestListener);
        return call;

    }
    /**
     * Fetch viewer data for a stream target
     * This operation shows viewer data for a specific stream target. Viewer data provides insight into the number and types of requests that were made to play streams at a target. The default time frame is &lt;em&gt;from&lt;/em&gt; the last billing date &lt;em&gt;to&lt;/em&gt; the end of the current day.&lt;br /&gt;&lt;blockquote&gt;**Note:** Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;. &lt;/blockquote&gt;
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param from The start of the range of time you want to view. Specify &lt;strong&gt;YYYY-MM-DD HH:MM:SS&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. The &lt;em&gt;from&lt;/em&gt; default is the last billing date. (optional)
     * @param to The end of the range of time you want to view. Specify &lt;strong&gt;YYYY-MM-DD HH:MM:SS&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. The &lt;em&gt;to&lt;/em&gt; default is the end of the current day. (optional)
     * @return ViewerDataStreamTarget
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ViewerDataStreamTarget showViewerDataStreamTarget(String id, OffsetDateTime from, OffsetDateTime to) throws ApiException {
        UsageViewerDataStreamTarget resp = showViewerDataStreamTargetTransport(id, from, to);
        return resp.getViewerDataStreamTarget();
    }

    /**
     * Fetch viewer data for a stream target - Transport Wrapped
     * This operation shows viewer data for a specific stream target. Viewer data provides insight into the number and types of requests that were made to play streams at a target. The default time frame is &lt;em&gt;from&lt;/em&gt; the last billing date &lt;em&gt;to&lt;/em&gt; the end of the current day.&lt;br /&gt;&lt;blockquote&gt;**Note:** Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;. &lt;/blockquote&gt;
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param from The start of the range of time you want to view. Specify &lt;strong&gt;YYYY-MM-DD HH:MM:SS&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. The &lt;em&gt;from&lt;/em&gt; default is the last billing date. (optional)
     * @param to The end of the range of time you want to view. Specify &lt;strong&gt;YYYY-MM-DD HH:MM:SS&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. The &lt;em&gt;to&lt;/em&gt; default is the end of the current day. (optional)
     * @return UsageViewerDataStreamTarget
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UsageViewerDataStreamTarget showViewerDataStreamTargetTransport(String id, OffsetDateTime from, OffsetDateTime to) throws ApiException {
        ApiResponse<UsageViewerDataStreamTarget> resp = showViewerDataStreamTargetWithHttpInfo(id, from, to);
        return resp.getData();
    }

    /**
     * Fetch viewer data for a stream target
     * This operation shows viewer data for a specific stream target. Viewer data provides insight into the number and types of requests that were made to play streams at a target. The default time frame is &lt;em&gt;from&lt;/em&gt; the last billing date &lt;em&gt;to&lt;/em&gt; the end of the current day.&lt;br /&gt;&lt;blockquote&gt;**Note:** Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;. &lt;/blockquote&gt;
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param from The start of the range of time you want to view. Specify &lt;strong&gt;YYYY-MM-DD HH:MM:SS&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. The &lt;em&gt;from&lt;/em&gt; default is the last billing date. (optional)
     * @param to The end of the range of time you want to view. Specify &lt;strong&gt;YYYY-MM-DD HH:MM:SS&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. The &lt;em&gt;to&lt;/em&gt; default is the end of the current day. (optional)
     * @return ApiResponse&lt;UsageViewerDataStreamTarget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UsageViewerDataStreamTarget> showViewerDataStreamTargetWithHttpInfo(String id, OffsetDateTime from, OffsetDateTime to) throws ApiException {
        com.squareup.okhttp.Call call = showViewerDataStreamTargetValidateBeforeCall(id, from, to, null, null);
        Type localVarReturnType = new TypeToken<UsageViewerDataStreamTarget>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch viewer data for a stream target (asynchronously)
     * This operation shows viewer data for a specific stream target. Viewer data provides insight into the number and types of requests that were made to play streams at a target. The default time frame is &lt;em&gt;from&lt;/em&gt; the last billing date &lt;em&gt;to&lt;/em&gt; the end of the current day.&lt;br /&gt;&lt;blockquote&gt;**Note:** Ultra low latency stream targets are available through subscription to &lt;a href&#x3D;&#39;https://www.wowza.com/products/streaming-cloud#ultra-low-latency&#39; target&#x3D;&#39;_blank&#39;&gt;Wowza Streaming Cloud with Ultra Low Latency&lt;/a&gt;. &lt;/blockquote&gt;
     * @param id The unique alphanumeric string that identifies the stream target. (required)
     * @param from The start of the range of time you want to view. Specify &lt;strong&gt;YYYY-MM-DD HH:MM:SS&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. The &lt;em&gt;from&lt;/em&gt; default is the last billing date. (optional)
     * @param to The end of the range of time you want to view. Specify &lt;strong&gt;YYYY-MM-DD HH:MM:SS&lt;/strong&gt; where &lt;strong&gt;HH&lt;/strong&gt; is a 24-hour clock in UTC. The &lt;em&gt;to&lt;/em&gt; default is the end of the current day. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call showViewerDataStreamTargetAsync(String id, OffsetDateTime from, OffsetDateTime to, final ApiCallback<UsageViewerDataStreamTarget> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = showViewerDataStreamTargetValidateBeforeCall(id, from, to, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UsageViewerDataStreamTarget>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
